
Hub_Muster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002da  00800100  00001d20  00001dd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d20  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f1  008003da  008003da  000020ae  2**0
                  ALLOC
  3 .eeprom       00000004  00810000  00810000  000020ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000020b2  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020e4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000005e8  00000000  00000000  00002124  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000109f6  00000000  00000000  0000270c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002cb7  00000000  00000000  00013102  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000035af  00000000  00000000  00015db9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001294  00000000  00000000  00019368  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002fc8  00000000  00000000  0001a5fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000061e1  00000000  00000000  0001d5c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005b0  00000000  00000000  000237a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__dtors_end>
       4:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__vector_1>
       8:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <__vector_2>
       c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__vector_16>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <__vector_18>
      4c:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__vector_19>
      50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	75 07       	cpc	r23, r21
      ba:	f1 0a       	sbc	r15, r17

000000bc <__ctors_end>:
      bc:	79 07       	cpc	r23, r25

000000be <__dtors_end>:
      be:	11 24       	eor	r1, r1
      c0:	1f be       	out	0x3f, r1	; 63
      c2:	cf ef       	ldi	r28, 0xFF	; 255
      c4:	d8 e0       	ldi	r29, 0x08	; 8
      c6:	de bf       	out	0x3e, r29	; 62
      c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
      ca:	13 e0       	ldi	r17, 0x03	; 3
      cc:	a0 e0       	ldi	r26, 0x00	; 0
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	e0 e2       	ldi	r30, 0x20	; 32
      d2:	fd e1       	ldi	r31, 0x1D	; 29
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
      d6:	05 90       	lpm	r0, Z+
      d8:	0d 92       	st	X+, r0
      da:	aa 3d       	cpi	r26, 0xDA	; 218
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_clear_bss>:
      e0:	24 e0       	ldi	r18, 0x04	; 4
      e2:	aa ed       	ldi	r26, 0xDA	; 218
      e4:	b3 e0       	ldi	r27, 0x03	; 3
      e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
      e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
      ea:	ab 3c       	cpi	r26, 0xCB	; 203
      ec:	b2 07       	cpc	r27, r18
      ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>

000000f0 <__do_global_ctors>:
      f0:	10 e0       	ldi	r17, 0x00	; 0
      f2:	ce e5       	ldi	r28, 0x5E	; 94
      f4:	d0 e0       	ldi	r29, 0x00	; 0
      f6:	04 c0       	rjmp	.+8      	; 0x100 <__do_global_ctors+0x10>
      f8:	21 97       	sbiw	r28, 0x01	; 1
      fa:	fe 01       	movw	r30, r28
      fc:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__tablejump2__>
     100:	cc 35       	cpi	r28, 0x5C	; 92
     102:	d1 07       	cpc	r29, r17
     104:	c9 f7       	brne	.-14     	; 0xf8 <__do_global_ctors+0x8>
     106:	0e 94 20 0b 	call	0x1640	; 0x1640 <main>
     10a:	0c 94 83 0e 	jmp	0x1d06	; 0x1d06 <__do_global_dtors>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <loop>:
  }


}

void loop() {
     112:	0f 93       	push	r16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     114:	2f ef       	ldi	r18, 0xFF	; 255
     116:	87 ea       	ldi	r24, 0xA7	; 167
     118:	91 e6       	ldi	r25, 0x61	; 97
     11a:	21 50       	subi	r18, 0x01	; 1
     11c:	80 40       	sbci	r24, 0x00	; 0
     11e:	90 40       	sbci	r25, 0x00	; 0
     120:	e1 f7       	brne	.-8      	; 0x11a <loop+0x8>
     122:	00 c0       	rjmp	.+0      	; 0x124 <loop+0x12>
     124:	00 00       	nop
  // put your main code here, to run repeatedly:
	_delay_ms(2000);
	  CAN.beginExtendedPacket(ID_01_Keller_1_Bastelkeller_Lichtschalter);
     126:	00 e0       	ldi	r16, 0x00	; 0
     128:	2f ef       	ldi	r18, 0xFF	; 255
     12a:	3f ef       	ldi	r19, 0xFF	; 255
     12c:	41 e0       	ldi	r20, 0x01	; 1
     12e:	50 e0       	ldi	r21, 0x00	; 0
     130:	60 eb       	ldi	r22, 0xB0	; 176
     132:	74 e2       	ldi	r23, 0x24	; 36
     134:	8e ed       	ldi	r24, 0xDE	; 222
     136:	93 e0       	ldi	r25, 0x03	; 3
     138:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN18CANControllerClass19beginExtendedPacketElib>
	  CAN.write('w');
     13c:	67 e7       	ldi	r22, 0x77	; 119
     13e:	8e ed       	ldi	r24, 0xDE	; 222
     140:	93 e0       	ldi	r25, 0x03	; 3
     142:	0e 94 09 02 	call	0x412	; 0x412 <_ZN18CANControllerClass5writeEh>
	  CAN.write('o');
     146:	6f e6       	ldi	r22, 0x6F	; 111
     148:	8e ed       	ldi	r24, 0xDE	; 222
     14a:	93 e0       	ldi	r25, 0x03	; 3
     14c:	0e 94 09 02 	call	0x412	; 0x412 <_ZN18CANControllerClass5writeEh>
	  CAN.write('r');
     150:	62 e7       	ldi	r22, 0x72	; 114
     152:	8e ed       	ldi	r24, 0xDE	; 222
     154:	93 e0       	ldi	r25, 0x03	; 3
     156:	0e 94 09 02 	call	0x412	; 0x412 <_ZN18CANControllerClass5writeEh>
	  CAN.write('l');
     15a:	6c e6       	ldi	r22, 0x6C	; 108
     15c:	8e ed       	ldi	r24, 0xDE	; 222
     15e:	93 e0       	ldi	r25, 0x03	; 3
     160:	0e 94 09 02 	call	0x412	; 0x412 <_ZN18CANControllerClass5writeEh>
	  CAN.write('d');
     164:	64 e6       	ldi	r22, 0x64	; 100
     166:	8e ed       	ldi	r24, 0xDE	; 222
     168:	93 e0       	ldi	r25, 0x03	; 3
     16a:	0e 94 09 02 	call	0x412	; 0x412 <_ZN18CANControllerClass5writeEh>
	  CAN.endPacket();
     16e:	8e ed       	ldi	r24, 0xDE	; 222
     170:	93 e0       	ldi	r25, 0x03	; 3
     172:	0e 94 ba 07 	call	0xf74	; 0xf74 <_ZN12MCP2515Class9endPacketEv>

	  Serial.println("done");
     176:	60 e2       	ldi	r22, 0x20	; 32
     178:	72 e0       	ldi	r23, 0x02	; 2
     17a:	81 e2       	ldi	r24, 0x21	; 33
     17c:	94 e0       	ldi	r25, 0x04	; 4
}
     17e:	0f 91       	pop	r16
	  CAN.write('r');
	  CAN.write('l');
	  CAN.write('d');
	  CAN.endPacket();

	  Serial.println("done");
     180:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <_ZN5Print7printlnEPKc>

00000184 <setup>:
uint32_t EEPROM_UID_KELLER_HUB EEMEM = UID_KELLER_HUB;

uint32_t CAN_Buffer[20];
bool CAN_Message_detected = false;

void setup() {
     184:	0f 93       	push	r16
     186:	1f 93       	push	r17
  // put your setup code here, to run once:
  pinMode(4, OUTPUT);  //VCC für den Can Baustein zur Verfügung stellen
     188:	61 e0       	ldi	r22, 0x01	; 1
     18a:	84 e0       	ldi	r24, 0x04	; 4
     18c:	0e 94 c6 0c 	call	0x198c	; 0x198c <pinMode>
  digitalWrite(4, HIGH);
     190:	61 e0       	ldi	r22, 0x01	; 1
     192:	84 e0       	ldi	r24, 0x04	; 4
     194:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <digitalWrite>
  Serial.begin(9600);
     198:	40 e8       	ldi	r20, 0x80	; 128
     19a:	55 e2       	ldi	r21, 0x25	; 37
     19c:	60 e0       	ldi	r22, 0x00	; 0
     19e:	70 e0       	ldi	r23, 0x00	; 0
     1a0:	81 e2       	ldi	r24, 0x21	; 33
     1a2:	94 e0       	ldi	r25, 0x04	; 4
     1a4:	0e 94 8c 0a 	call	0x1518	; 0x1518 <_ZN14HardwareSerial5beginEm>
  while(!Serial);
  Serial.println("Can Hub");
     1a8:	65 e2       	ldi	r22, 0x25	; 37
     1aa:	72 e0       	ldi	r23, 0x02	; 2
     1ac:	81 e2       	ldi	r24, 0x21	; 33
     1ae:	94 e0       	ldi	r25, 0x04	; 4
     1b0:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <_ZN5Print7printlnEPKc>
  
  
  if (!CAN.begin(500E3))
     1b4:	40 e2       	ldi	r20, 0x20	; 32
     1b6:	51 ea       	ldi	r21, 0xA1	; 161
     1b8:	67 e0       	ldi	r22, 0x07	; 7
     1ba:	70 e0       	ldi	r23, 0x00	; 0
     1bc:	8e ed       	ldi	r24, 0xDE	; 222
     1be:	93 e0       	ldi	r25, 0x03	; 3
     1c0:	0e 94 7d 07 	call	0xefa	; 0xefa <_ZN12MCP2515Class5beginEl>
     1c4:	89 2b       	or	r24, r25
     1c6:	39 f4       	brne	.+14     	; 0x1d6 <setup+0x52>
  {
	  Serial.println("Starting Can failed.");
     1c8:	6d e2       	ldi	r22, 0x2D	; 45
     1ca:	72 e0       	ldi	r23, 0x02	; 2
     1cc:	81 e2       	ldi	r24, 0x21	; 33
     1ce:	94 e0       	ldi	r25, 0x04	; 4
     1d0:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <_ZN5Print7printlnEPKc>
     1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <setup+0x50>
	  while (1);
  }
  Serial.println("Es wird auf eine Can Nachricht gewartet...");
     1d6:	62 e4       	ldi	r22, 0x42	; 66
     1d8:	72 e0       	ldi	r23, 0x02	; 2
     1da:	81 e2       	ldi	r24, 0x21	; 33
     1dc:	94 e0       	ldi	r25, 0x04	; 4
     1de:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <_ZN5Print7printlnEPKc>
  
  //Testweise wird der Filter mal auf den Node eingestellt
  CAN.filterExtended(UID_NODE, UID_MASK_ZERO);
     1e2:	0f ef       	ldi	r16, 0xFF	; 255
     1e4:	1f ef       	ldi	r17, 0xFF	; 255
     1e6:	2f ef       	ldi	r18, 0xFF	; 255
     1e8:	33 e0       	ldi	r19, 0x03	; 3
     1ea:	40 e0       	ldi	r20, 0x00	; 0
     1ec:	50 ec       	ldi	r21, 0xC0	; 192
     1ee:	62 e9       	ldi	r22, 0x92	; 146
     1f0:	70 e0       	ldi	r23, 0x00	; 0
     1f2:	8e ed       	ldi	r24, 0xDE	; 222
     1f4:	93 e0       	ldi	r25, 0x03	; 3
     1f6:	0e 94 7f 05 	call	0xafe	; 0xafe <_ZN12MCP2515Class14filterExtendedEll>
  
  while(CAN.parsePacket() == 0)
     1fa:	8e ed       	ldi	r24, 0xDE	; 222
     1fc:	93 e0       	ldi	r25, 0x03	; 3
     1fe:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <_ZN12MCP2515Class11parsePacketEv>
     202:	89 2b       	or	r24, r25
     204:	d1 f3       	breq	.-12     	; 0x1fa <setup+0x76>
  {
	  //Endlosschleife bis eine CAN Nachricht gefunden wurde
  }
  Serial.println("Es wurde eine CAN Nachricht empfangen.");
     206:	6d e6       	ldi	r22, 0x6D	; 109
     208:	72 e0       	ldi	r23, 0x02	; 2
     20a:	81 e2       	ldi	r24, 0x21	; 33
     20c:	94 e0       	ldi	r25, 0x04	; 4
     20e:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <_ZN5Print7printlnEPKc>
  if (CAN.available())
     212:	8e ed       	ldi	r24, 0xDE	; 222
     214:	93 e0       	ldi	r25, 0x03	; 3
     216:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN18CANControllerClass9availableEv>
     21a:	89 2b       	or	r24, r25
     21c:	91 f1       	breq	.+100    	; 0x282 <setup+0xfe>
  {
	  Serial.println("Can Message wurde empfangen");
     21e:	64 e9       	ldi	r22, 0x94	; 148
     220:	72 e0       	ldi	r23, 0x02	; 2
     222:	81 e2       	ldi	r24, 0x21	; 33
     224:	94 e0       	ldi	r25, 0x04	; 4
     226:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <_ZN5Print7printlnEPKc>
	  if ((CAN.packetId()== UID_NODE) && (CAN.read() == Kommando_Get_HUB_ID) )
     22a:	8e ed       	ldi	r24, 0xDE	; 222
     22c:	93 e0       	ldi	r25, 0x03	; 3
     22e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN18CANControllerClass8packetIdEv>
     232:	61 15       	cp	r22, r1
     234:	70 4c       	sbci	r23, 0xC0	; 192
     236:	82 49       	sbci	r24, 0x92	; 146
     238:	91 05       	cpc	r25, r1
     23a:	09 f0       	breq	.+2      	; 0x23e <setup+0xba>
     23c:	a6 c0       	rjmp	.+332    	; 0x38a <setup+0x206>
     23e:	8e ed       	ldi	r24, 0xDE	; 222
     240:	93 e0       	ldi	r25, 0x03	; 3
     242:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN18CANControllerClass4readEv>
     246:	01 97       	sbiw	r24, 0x01	; 1
     248:	09 f0       	breq	.+2      	; 0x24c <setup+0xc8>
     24a:	9f c0       	rjmp	.+318    	; 0x38a <setup+0x206>
	  {
		  Serial.println("Es wurde die HUB ID angefordert.");
     24c:	6c ec       	ldi	r22, 0xCC	; 204
     24e:	72 e0       	ldi	r23, 0x02	; 2
     250:	81 e2       	ldi	r24, 0x21	; 33
     252:	94 e0       	ldi	r25, 0x04	; 4
     254:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <_ZN5Print7printlnEPKc>
		  //Die Antwort senden (Aktuell noch Hardgecodete ID zurück senden)
		  CAN.beginExtendedPacket(UID_KELLER_HUB);
     258:	00 e0       	ldi	r16, 0x00	; 0
     25a:	2f ef       	ldi	r18, 0xFF	; 255
     25c:	3f ef       	ldi	r19, 0xFF	; 255
     25e:	40 e0       	ldi	r20, 0x00	; 0
     260:	50 e0       	ldi	r21, 0x00	; 0
     262:	60 e9       	ldi	r22, 0x90	; 144
     264:	70 e0       	ldi	r23, 0x00	; 0
     266:	8e ed       	ldi	r24, 0xDE	; 222
     268:	93 e0       	ldi	r25, 0x03	; 3
     26a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN18CANControllerClass19beginExtendedPacketElib>
		  CAN.write(UID_KELLER_HUB);
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	8e ed       	ldi	r24, 0xDE	; 222
     272:	93 e0       	ldi	r25, 0x03	; 3
     274:	0e 94 09 02 	call	0x412	; 0x412 <_ZN18CANControllerClass5writeEh>
		  CAN.endPacket();
     278:	8e ed       	ldi	r24, 0xDE	; 222
     27a:	93 e0       	ldi	r25, 0x03	; 3
     27c:	0e 94 ba 07 	call	0xf74	; 0xf74 <_ZN12MCP2515Class9endPacketEv>
     280:	06 c0       	rjmp	.+12     	; 0x28e <setup+0x10a>
		  Serial.println("Entweder unbekannte ID, oder unbekanntes Kommando.");
	  }
  } 
  else
  {
	Serial.println("Da ist was falsch gelaufen.");  
     282:	60 eb       	ldi	r22, 0xB0	; 176
     284:	72 e0       	ldi	r23, 0x02	; 2
     286:	81 e2       	ldi	r24, 0x21	; 33
     288:	94 e0       	ldi	r25, 0x04	; 4
     28a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <_ZN5Print7printlnEPKc>
  }
  
  
  while(CAN.parsePacket() == 0)
     28e:	8e ed       	ldi	r24, 0xDE	; 222
     290:	93 e0       	ldi	r25, 0x03	; 3
     292:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <_ZN12MCP2515Class11parsePacketEv>
     296:	89 2b       	or	r24, r25
     298:	d1 f3       	breq	.-12     	; 0x28e <setup+0x10a>
  {
	  //Endlosschleife bis eine CAN Nachricht gefunden wurde
  }
  Serial.println("Es wurde eine CAN Nachricht empfangen.");
     29a:	6d e6       	ldi	r22, 0x6D	; 109
     29c:	72 e0       	ldi	r23, 0x02	; 2
     29e:	81 e2       	ldi	r24, 0x21	; 33
     2a0:	94 e0       	ldi	r25, 0x04	; 4
     2a2:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <_ZN5Print7printlnEPKc>
  if (CAN.available())
     2a6:	8e ed       	ldi	r24, 0xDE	; 222
     2a8:	93 e0       	ldi	r25, 0x03	; 3
     2aa:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN18CANControllerClass9availableEv>
     2ae:	89 2b       	or	r24, r25
     2b0:	09 f4       	brne	.+2      	; 0x2b4 <setup+0x130>
     2b2:	68 c0       	rjmp	.+208    	; 0x384 <setup+0x200>
  {
	  Serial.println("Can Message wurde empfangen");
     2b4:	64 e9       	ldi	r22, 0x94	; 148
     2b6:	72 e0       	ldi	r23, 0x02	; 2
     2b8:	81 e2       	ldi	r24, 0x21	; 33
     2ba:	94 e0       	ldi	r25, 0x04	; 4
     2bc:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <_ZN5Print7printlnEPKc>
	  if ((CAN.packetId()== UID_NODE) && (CAN.read() == Kommando_Get_ID_LIST_FROM_HUB) )
     2c0:	8e ed       	ldi	r24, 0xDE	; 222
     2c2:	93 e0       	ldi	r25, 0x03	; 3
     2c4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN18CANControllerClass8packetIdEv>
     2c8:	61 15       	cp	r22, r1
     2ca:	70 4c       	sbci	r23, 0xC0	; 192
     2cc:	82 49       	sbci	r24, 0x92	; 146
     2ce:	91 05       	cpc	r25, r1
     2d0:	09 f0       	breq	.+2      	; 0x2d4 <setup+0x150>
     2d2:	5e c0       	rjmp	.+188    	; 0x390 <setup+0x20c>
     2d4:	8e ed       	ldi	r24, 0xDE	; 222
     2d6:	93 e0       	ldi	r25, 0x03	; 3
     2d8:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN18CANControllerClass4readEv>
     2dc:	02 97       	sbiw	r24, 0x02	; 2
     2de:	09 f0       	breq	.+2      	; 0x2e2 <setup+0x15e>
     2e0:	57 c0       	rjmp	.+174    	; 0x390 <setup+0x20c>
	  {
		  Serial.println("Es wurde die ID Liste auf die gelauscht wird angefordert");
     2e2:	60 e2       	ldi	r22, 0x20	; 32
     2e4:	73 e0       	ldi	r23, 0x03	; 3
     2e6:	81 e2       	ldi	r24, 0x21	; 33
     2e8:	94 e0       	ldi	r25, 0x04	; 4
     2ea:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <_ZN5Print7printlnEPKc>
		  //Die Antwort senden (Aktuell noch Hardgecodete ID zurück senden)
		  CAN.beginExtendedPacket(UID_KELLER_HUB);
     2ee:	00 e0       	ldi	r16, 0x00	; 0
     2f0:	2f ef       	ldi	r18, 0xFF	; 255
     2f2:	3f ef       	ldi	r19, 0xFF	; 255
     2f4:	40 e0       	ldi	r20, 0x00	; 0
     2f6:	50 e0       	ldi	r21, 0x00	; 0
     2f8:	60 e9       	ldi	r22, 0x90	; 144
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	8e ed       	ldi	r24, 0xDE	; 222
     2fe:	93 e0       	ldi	r25, 0x03	; 3
     300:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN18CANControllerClass19beginExtendedPacketElib>
		  CAN.write(Zeiger_auf_UID_01_Keller_1_Bastelkeller_Lichtschalter, 4);
     304:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <Zeiger_auf_UID_01_Keller_1_Bastelkeller_Lichtschalter>
     308:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <Zeiger_auf_UID_01_Keller_1_Bastelkeller_Lichtschalter+0x1>
     30c:	44 e0       	ldi	r20, 0x04	; 4
     30e:	50 e0       	ldi	r21, 0x00	; 0
     310:	8e ed       	ldi	r24, 0xDE	; 222
     312:	93 e0       	ldi	r25, 0x03	; 3
     314:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN18CANControllerClass5writeEPKhj>
		  CAN.endPacket();
     318:	8e ed       	ldi	r24, 0xDE	; 222
     31a:	93 e0       	ldi	r25, 0x03	; 3
     31c:	0e 94 ba 07 	call	0xf74	; 0xf74 <_ZN12MCP2515Class9endPacketEv>
		  
		  CAN.beginExtendedPacket(UID_KELLER_HUB);
     320:	2f ef       	ldi	r18, 0xFF	; 255
     322:	3f ef       	ldi	r19, 0xFF	; 255
     324:	40 e0       	ldi	r20, 0x00	; 0
     326:	50 e0       	ldi	r21, 0x00	; 0
     328:	60 e9       	ldi	r22, 0x90	; 144
     32a:	70 e0       	ldi	r23, 0x00	; 0
     32c:	8e ed       	ldi	r24, 0xDE	; 222
     32e:	93 e0       	ldi	r25, 0x03	; 3
     330:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN18CANControllerClass19beginExtendedPacketElib>
		  CAN.write(Zeiger_auf_UID_01_Keller_1_Bastelkeller_Licht, 4);
     334:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <Zeiger_auf_UID_01_Keller_1_Bastelkeller_Licht>
     338:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <Zeiger_auf_UID_01_Keller_1_Bastelkeller_Licht+0x1>
     33c:	44 e0       	ldi	r20, 0x04	; 4
     33e:	50 e0       	ldi	r21, 0x00	; 0
     340:	8e ed       	ldi	r24, 0xDE	; 222
     342:	93 e0       	ldi	r25, 0x03	; 3
     344:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN18CANControllerClass5writeEPKhj>
		  CAN.endPacket();
     348:	8e ed       	ldi	r24, 0xDE	; 222
     34a:	93 e0       	ldi	r25, 0x03	; 3
     34c:	0e 94 ba 07 	call	0xf74	; 0xf74 <_ZN12MCP2515Class9endPacketEv>
		  
		  CAN.beginExtendedPacket(UID_KELLER_HUB);
     350:	2f ef       	ldi	r18, 0xFF	; 255
     352:	3f ef       	ldi	r19, 0xFF	; 255
     354:	40 e0       	ldi	r20, 0x00	; 0
     356:	50 e0       	ldi	r21, 0x00	; 0
     358:	60 e9       	ldi	r22, 0x90	; 144
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	8e ed       	ldi	r24, 0xDE	; 222
     35e:	93 e0       	ldi	r25, 0x03	; 3
     360:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN18CANControllerClass19beginExtendedPacketElib>
		  CAN.write(Zeiger_auf_UID_Liste_EndeIndikator, 4);
     364:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <Zeiger_auf_UID_Liste_EndeIndikator>
     368:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <Zeiger_auf_UID_Liste_EndeIndikator+0x1>
     36c:	44 e0       	ldi	r20, 0x04	; 4
     36e:	50 e0       	ldi	r21, 0x00	; 0
     370:	8e ed       	ldi	r24, 0xDE	; 222
     372:	93 e0       	ldi	r25, 0x03	; 3
     374:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN18CANControllerClass5writeEPKhj>
		  CAN.endPacket();		  
     378:	8e ed       	ldi	r24, 0xDE	; 222
     37a:	93 e0       	ldi	r25, 0x03	; 3
  {
	  Serial.println("Da ist was falsch gelaufen.");
  }


}
     37c:	1f 91       	pop	r17
     37e:	0f 91       	pop	r16
		  CAN.write(Zeiger_auf_UID_01_Keller_1_Bastelkeller_Licht, 4);
		  CAN.endPacket();
		  
		  CAN.beginExtendedPacket(UID_KELLER_HUB);
		  CAN.write(Zeiger_auf_UID_Liste_EndeIndikator, 4);
		  CAN.endPacket();		  
     380:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <_ZN12MCP2515Class9endPacketEv>
		  Serial.println("Entweder unbekannte ID, oder unbekanntes Kommando.");
	  }
  }
  else
  {
	  Serial.println("Da ist was falsch gelaufen.");
     384:	60 eb       	ldi	r22, 0xB0	; 176
     386:	72 e0       	ldi	r23, 0x02	; 2
     388:	05 c0       	rjmp	.+10     	; 0x394 <setup+0x210>
		  CAN.write(UID_KELLER_HUB);
		  CAN.endPacket();
	  } 
	  else
	  {
		  Serial.println("Entweder unbekannte ID, oder unbekanntes Kommando.");
     38a:	6d ee       	ldi	r22, 0xED	; 237
     38c:	72 e0       	ldi	r23, 0x02	; 2
     38e:	7b cf       	rjmp	.-266    	; 0x286 <setup+0x102>
		  CAN.endPacket();		  
		  
	  }
	  else
	  {
		  Serial.println("Entweder unbekannte ID, oder unbekanntes Kommando.");
     390:	6d ee       	ldi	r22, 0xED	; 237
     392:	72 e0       	ldi	r23, 0x02	; 2
     394:	81 e2       	ldi	r24, 0x21	; 33
     396:	94 e0       	ldi	r25, 0x04	; 4
  {
	  Serial.println("Da ist was falsch gelaufen.");
  }


}
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
		  CAN.endPacket();		  
		  
	  }
	  else
	  {
		  Serial.println("Entweder unbekannte ID, oder unbekanntes Kommando.");
     39c:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <_ZN5Print7printlnEPKc>

000003a0 <_ZN5Print17availableForWriteEv>:
  _txLength = 0;

  memset(_txData, 0x00, sizeof(_txData));

  return 1;
}
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	08 95       	ret

000003a6 <_ZN18CANControllerClass6filterEi>:
     3a6:	dc 01       	movw	r26, r24
     3a8:	ed 91       	ld	r30, X+
     3aa:	fc 91       	ld	r31, X
     3ac:	02 8c       	ldd	r0, Z+26	; 0x1a
     3ae:	f3 8d       	ldd	r31, Z+27	; 0x1b
     3b0:	e0 2d       	mov	r30, r0
     3b2:	4f ef       	ldi	r20, 0xFF	; 255
     3b4:	57 e0       	ldi	r21, 0x07	; 7
     3b6:	09 94       	ijmp

000003b8 <_ZN18CANControllerClass14filterExtendedEl>:
     3b8:	0f 93       	push	r16
     3ba:	1f 93       	push	r17
     3bc:	dc 01       	movw	r26, r24
     3be:	ed 91       	ld	r30, X+
     3c0:	fc 91       	ld	r31, X
     3c2:	06 8c       	ldd	r0, Z+30	; 0x1e
     3c4:	f7 8d       	ldd	r31, Z+31	; 0x1f
     3c6:	e0 2d       	mov	r30, r0
     3c8:	0f ef       	ldi	r16, 0xFF	; 255
     3ca:	1f ef       	ldi	r17, 0xFF	; 255
     3cc:	2f ef       	ldi	r18, 0xFF	; 255
     3ce:	3f e1       	ldi	r19, 0x1F	; 31
     3d0:	09 95       	icall
     3d2:	1f 91       	pop	r17
     3d4:	0f 91       	pop	r16
     3d6:	08 95       	ret

000003d8 <_ZN18CANControllerClassD1Ev>:
     3d8:	08 95       	ret

000003da <_ZN18CANControllerClass5beginEl>:
     3da:	fc 01       	movw	r30, r24
     3dc:	16 86       	std	Z+14, r1	; 0x0e
     3de:	8f ef       	ldi	r24, 0xFF	; 255
     3e0:	9f ef       	ldi	r25, 0xFF	; 255
     3e2:	dc 01       	movw	r26, r24
     3e4:	87 87       	std	Z+15, r24	; 0x0f
     3e6:	90 8b       	std	Z+16, r25	; 0x10
     3e8:	a1 8b       	std	Z+17, r26	; 0x11
     3ea:	b2 8b       	std	Z+18, r27	; 0x12
     3ec:	14 8a       	std	Z+20, r1	; 0x14
     3ee:	16 8a       	std	Z+22, r1	; 0x16
     3f0:	15 8a       	std	Z+21, r1	; 0x15
     3f2:	10 8e       	std	Z+24, r1	; 0x18
     3f4:	17 8a       	std	Z+23, r1	; 0x17
     3f6:	81 a3       	std	Z+33, r24	; 0x21
     3f8:	92 a3       	std	Z+34, r25	; 0x22
     3fa:	a3 a3       	std	Z+35, r26	; 0x23
     3fc:	b4 a3       	std	Z+36, r27	; 0x24
     3fe:	16 a2       	std	Z+38, r1	; 0x26
     400:	10 a6       	std	Z+40, r1	; 0x28
     402:	17 a2       	std	Z+39, r1	; 0x27
     404:	12 a6       	std	Z+42, r1	; 0x2a
     406:	11 a6       	std	Z+41, r1	; 0x29
     408:	14 a6       	std	Z+44, r1	; 0x2c
     40a:	13 a6       	std	Z+43, r1	; 0x2b
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	08 95       	ret

00000412 <_ZN18CANControllerClass5writeEh>:
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	1f 92       	push	r1
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	69 83       	std	Y+1, r22	; 0x01
     41e:	dc 01       	movw	r26, r24
     420:	ed 91       	ld	r30, X+
     422:	fc 91       	ld	r31, X
     424:	02 80       	ldd	r0, Z+2	; 0x02
     426:	f3 81       	ldd	r31, Z+3	; 0x03
     428:	e0 2d       	mov	r30, r0
     42a:	41 e0       	ldi	r20, 0x01	; 1
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	be 01       	movw	r22, r28
     430:	6f 5f       	subi	r22, 0xFF	; 255
     432:	7f 4f       	sbci	r23, 0xFF	; 255
     434:	09 95       	icall
     436:	0f 90       	pop	r0
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	08 95       	ret

0000043e <_ZN18CANControllerClass9availableEv>:
     43e:	fc 01       	movw	r30, r24
     440:	81 a5       	ldd	r24, Z+41	; 0x29
     442:	92 a5       	ldd	r25, Z+42	; 0x2a
     444:	23 a5       	ldd	r18, Z+43	; 0x2b
     446:	34 a5       	ldd	r19, Z+44	; 0x2c
     448:	82 1b       	sub	r24, r18
     44a:	93 0b       	sbc	r25, r19
     44c:	08 95       	ret

0000044e <_ZN18CANControllerClass4readEv>:
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	ec 01       	movw	r28, r24
     454:	e8 81       	ld	r30, Y
     456:	f9 81       	ldd	r31, Y+1	; 0x01
     458:	00 84       	ldd	r0, Z+8	; 0x08
     45a:	f1 85       	ldd	r31, Z+9	; 0x09
     45c:	e0 2d       	mov	r30, r0
     45e:	09 95       	icall
     460:	89 2b       	or	r24, r25
     462:	61 f0       	breq	.+24     	; 0x47c <_ZN18CANControllerClass4readEv+0x2e>
     464:	8b a5       	ldd	r24, Y+43	; 0x2b
     466:	9c a5       	ldd	r25, Y+44	; 0x2c
     468:	9c 01       	movw	r18, r24
     46a:	2f 5f       	subi	r18, 0xFF	; 255
     46c:	3f 4f       	sbci	r19, 0xFF	; 255
     46e:	3c a7       	std	Y+44, r19	; 0x2c
     470:	2b a7       	std	Y+43, r18	; 0x2b
     472:	c8 0f       	add	r28, r24
     474:	d9 1f       	adc	r29, r25
     476:	8d a5       	ldd	r24, Y+45	; 0x2d
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	02 c0       	rjmp	.+4      	; 0x480 <_ZN18CANControllerClass4readEv+0x32>
     47c:	8f ef       	ldi	r24, 0xFF	; 255
     47e:	9f ef       	ldi	r25, 0xFF	; 255
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <_ZN18CANControllerClass4peekEv>:
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	ec 01       	movw	r28, r24
     48c:	e8 81       	ld	r30, Y
     48e:	f9 81       	ldd	r31, Y+1	; 0x01
     490:	00 84       	ldd	r0, Z+8	; 0x08
     492:	f1 85       	ldd	r31, Z+9	; 0x09
     494:	e0 2d       	mov	r30, r0
     496:	09 95       	icall
     498:	89 2b       	or	r24, r25
     49a:	39 f0       	breq	.+14     	; 0x4aa <_ZN18CANControllerClass4peekEv+0x24>
     49c:	8b a5       	ldd	r24, Y+43	; 0x2b
     49e:	9c a5       	ldd	r25, Y+44	; 0x2c
     4a0:	c8 0f       	add	r28, r24
     4a2:	d9 1f       	adc	r29, r25
     4a4:	8d a5       	ldd	r24, Y+45	; 0x2d
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <_ZN18CANControllerClass4peekEv+0x28>
     4aa:	8f ef       	ldi	r24, 0xFF	; 255
     4ac:	9f ef       	ldi	r25, 0xFF	; 255
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	08 95       	ret

000004b4 <_ZN18CANControllerClass3endEv>:
     4b4:	08 95       	ret

000004b6 <_ZN18CANControllerClass9onReceiveEPFviE>:
     4b6:	fc 01       	movw	r30, r24
     4b8:	75 87       	std	Z+13, r23	; 0x0d
     4ba:	64 87       	std	Z+12, r22	; 0x0c
     4bc:	08 95       	ret

000004be <_ZN18CANControllerClass6filterEii>:
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	08 95       	ret

000004c4 <_ZN18CANControllerClass14filterExtendedEll>:
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	08 95       	ret

000004ca <_ZN18CANControllerClass11parsePacketEv>:
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	08 95       	ret

000004d0 <_ZN18CANControllerClassD0Ev>:
     4d0:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <_ZdlPv>

000004d4 <_ZN18CANControllerClass5writeEPKhj>:
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	fc 01       	movw	r30, r24
     4de:	26 85       	ldd	r18, Z+14	; 0x0e
     4e0:	22 23       	and	r18, r18
     4e2:	e1 f0       	breq	.+56     	; 0x51c <_ZN18CANControllerClass5writeEPKhj+0x48>
     4e4:	27 89       	ldd	r18, Z+23	; 0x17
     4e6:	30 8d       	ldd	r19, Z+24	; 0x18
     4e8:	e8 e0       	ldi	r30, 0x08	; 8
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	e2 1b       	sub	r30, r18
     4ee:	f3 0b       	sbc	r31, r19
     4f0:	ea 01       	movw	r28, r20
     4f2:	e4 17       	cp	r30, r20
     4f4:	f5 07       	cpc	r31, r21
     4f6:	08 f4       	brcc	.+2      	; 0x4fa <_ZN18CANControllerClass5writeEPKhj+0x26>
     4f8:	ef 01       	movw	r28, r30
     4fa:	8c 01       	movw	r16, r24
     4fc:	c9 01       	movw	r24, r18
     4fe:	49 96       	adiw	r24, 0x19	; 25
     500:	ae 01       	movw	r20, r28
     502:	80 0f       	add	r24, r16
     504:	91 1f       	adc	r25, r17
     506:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <memcpy>
     50a:	f8 01       	movw	r30, r16
     50c:	87 89       	ldd	r24, Z+23	; 0x17
     50e:	90 8d       	ldd	r25, Z+24	; 0x18
     510:	8c 0f       	add	r24, r28
     512:	9d 1f       	adc	r25, r29
     514:	90 8f       	std	Z+24, r25	; 0x18
     516:	87 8b       	std	Z+23, r24	; 0x17
     518:	ce 01       	movw	r24, r28
     51a:	02 c0       	rjmp	.+4      	; 0x520 <_ZN18CANControllerClass5writeEPKhj+0x4c>
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	1f 91       	pop	r17
     526:	0f 91       	pop	r16
     528:	08 95       	ret

0000052a <_ZN18CANControllerClass9endPacketEv>:
     52a:	fc 01       	movw	r30, r24
     52c:	86 85       	ldd	r24, Z+14	; 0x0e
     52e:	88 23       	and	r24, r24
     530:	41 f0       	breq	.+16     	; 0x542 <_ZN18CANControllerClass9endPacketEv+0x18>
     532:	16 86       	std	Z+14, r1	; 0x0e
     534:	85 89       	ldd	r24, Z+21	; 0x15
     536:	96 89       	ldd	r25, Z+22	; 0x16
     538:	97 fd       	sbrc	r25, 7
     53a:	06 c0       	rjmp	.+12     	; 0x548 <_ZN18CANControllerClass9endPacketEv+0x1e>
     53c:	90 8f       	std	Z+24, r25	; 0x18
     53e:	87 8b       	std	Z+23, r24	; 0x17
     540:	03 c0       	rjmp	.+6      	; 0x548 <_ZN18CANControllerClass9endPacketEv+0x1e>
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	08 95       	ret
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	08 95       	ret

0000054e <_ZN18CANControllerClassC1Ev>:
     54e:	fc 01       	movw	r30, r24
     550:	13 82       	std	Z+3, r1	; 0x03
     552:	12 82       	std	Z+2, r1	; 0x02
     554:	88 ee       	ldi	r24, 0xE8	; 232
     556:	93 e0       	ldi	r25, 0x03	; 3
     558:	a0 e0       	ldi	r26, 0x00	; 0
     55a:	b0 e0       	ldi	r27, 0x00	; 0
     55c:	84 83       	std	Z+4, r24	; 0x04
     55e:	95 83       	std	Z+5, r25	; 0x05
     560:	a6 83       	std	Z+6, r26	; 0x06
     562:	b7 83       	std	Z+7, r27	; 0x07
     564:	8d e5       	ldi	r24, 0x5D	; 93
     566:	93 e0       	ldi	r25, 0x03	; 3
     568:	91 83       	std	Z+1, r25	; 0x01
     56a:	80 83       	st	Z, r24
     56c:	15 86       	std	Z+13, r1	; 0x0d
     56e:	14 86       	std	Z+12, r1	; 0x0c
     570:	16 86       	std	Z+14, r1	; 0x0e
     572:	8f ef       	ldi	r24, 0xFF	; 255
     574:	9f ef       	ldi	r25, 0xFF	; 255
     576:	dc 01       	movw	r26, r24
     578:	87 87       	std	Z+15, r24	; 0x0f
     57a:	90 8b       	std	Z+16, r25	; 0x10
     57c:	a1 8b       	std	Z+17, r26	; 0x11
     57e:	b2 8b       	std	Z+18, r27	; 0x12
     580:	21 e0       	ldi	r18, 0x01	; 1
     582:	23 8b       	std	Z+19, r18	; 0x13
     584:	14 8a       	std	Z+20, r1	; 0x14
     586:	16 8a       	std	Z+22, r1	; 0x16
     588:	15 8a       	std	Z+21, r1	; 0x15
     58a:	10 8e       	std	Z+24, r1	; 0x18
     58c:	17 8a       	std	Z+23, r1	; 0x17
     58e:	81 a3       	std	Z+33, r24	; 0x21
     590:	92 a3       	std	Z+34, r25	; 0x22
     592:	a3 a3       	std	Z+35, r26	; 0x23
     594:	b4 a3       	std	Z+36, r27	; 0x24
     596:	15 a2       	std	Z+37, r1	; 0x25
     598:	16 a2       	std	Z+38, r1	; 0x26
     59a:	10 a6       	std	Z+40, r1	; 0x28
     59c:	17 a2       	std	Z+39, r1	; 0x27
     59e:	12 a6       	std	Z+42, r1	; 0x2a
     5a0:	11 a6       	std	Z+41, r1	; 0x29
     5a2:	14 a6       	std	Z+44, r1	; 0x2c
     5a4:	13 a6       	std	Z+43, r1	; 0x2b
     5a6:	40 e0       	ldi	r20, 0x00	; 0
     5a8:	50 e0       	ldi	r21, 0x00	; 0
     5aa:	ba 01       	movw	r22, r20
     5ac:	cf 01       	movw	r24, r30
     5ae:	0c 94 86 0b 	jmp	0x170c	; 0x170c <_ZN6Stream10setTimeoutEm>

000005b2 <_ZN18CANControllerClass19beginExtendedPacketElib>:

int CANControllerClass::beginExtendedPacket(long id, int dlc, bool rtr)
{
     5b2:	0f 93       	push	r16
     5b4:	fc 01       	movw	r30, r24
  if (id < 0 || id > 0x1FFFFFFF) {
     5b6:	41 15       	cp	r20, r1
     5b8:	51 05       	cpc	r21, r1
     5ba:	61 05       	cpc	r22, r1
     5bc:	80 e2       	ldi	r24, 0x20	; 32
     5be:	78 07       	cpc	r23, r24
     5c0:	c0 f4       	brcc	.+48     	; 0x5f2 <_ZN18CANControllerClass19beginExtendedPacketElib+0x40>
    return 0;
  }

  if (dlc > 8) {
     5c2:	29 30       	cpi	r18, 0x09	; 9
     5c4:	31 05       	cpc	r19, r1
     5c6:	ac f4       	brge	.+42     	; 0x5f2 <_ZN18CANControllerClass19beginExtendedPacketElib+0x40>
    return 0;
  }

  _packetBegun = true;
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	86 87       	std	Z+14, r24	; 0x0e
  _txId = id;
     5cc:	47 87       	std	Z+15, r20	; 0x0f
     5ce:	50 8b       	std	Z+16, r21	; 0x10
     5d0:	61 8b       	std	Z+17, r22	; 0x11
     5d2:	72 8b       	std	Z+18, r23	; 0x12
  _txExtended = true;
     5d4:	83 8b       	std	Z+19, r24	; 0x13
  _txRtr = rtr;
     5d6:	04 8b       	std	Z+20, r16	; 0x14
  _txDlc = dlc;
     5d8:	36 8b       	std	Z+22, r19	; 0x16
     5da:	25 8b       	std	Z+21, r18	; 0x15
  _txLength = 0;
     5dc:	10 8e       	std	Z+24, r1	; 0x18
     5de:	17 8a       	std	Z+23, r1	; 0x17

  memset(_txData, 0x00, sizeof(_txData));
     5e0:	79 96       	adiw	r30, 0x19	; 25
     5e2:	88 e0       	ldi	r24, 0x08	; 8
     5e4:	df 01       	movw	r26, r30
     5e6:	1d 92       	st	X+, r1
     5e8:	8a 95       	dec	r24
     5ea:	e9 f7       	brne	.-6      	; 0x5e6 <_ZN18CANControllerClass19beginExtendedPacketElib+0x34>

  return 1;
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <_ZN18CANControllerClass19beginExtendedPacketElib+0x44>
}

int CANControllerClass::beginExtendedPacket(long id, int dlc, bool rtr)
{
  if (id < 0 || id > 0x1FFFFFFF) {
    return 0;
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
  _txLength = 0;

  memset(_txData, 0x00, sizeof(_txData));

  return 1;
}
     5f6:	0f 91       	pop	r16
     5f8:	08 95       	ret

000005fa <_ZN18CANControllerClass8packetIdEv>:
  return 0;
}

long CANControllerClass::packetId()
{
  return _rxId;
     5fa:	fc 01       	movw	r30, r24
     5fc:	61 a1       	ldd	r22, Z+33	; 0x21
     5fe:	72 a1       	ldd	r23, Z+34	; 0x22
     600:	83 a1       	ldd	r24, Z+35	; 0x23
     602:	94 a1       	ldd	r25, Z+36	; 0x24
}
     604:	08 95       	ret

00000606 <_ZN12MCP2515ClassD1Ev>:
    if (b < 16) {
      out.print('0');
    }
    out.println(b, HEX);
  }
}
     606:	2d e8       	ldi	r18, 0x8D	; 141
     608:	33 e0       	ldi	r19, 0x03	; 3
     60a:	fc 01       	movw	r30, r24
     60c:	31 83       	std	Z+1, r19	; 0x01
     60e:	20 83       	st	Z, r18
     610:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <_ZN18CANControllerClassD1Ev>

00000614 <_ZN12MCP2515ClassD0Ev>:
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	ec 01       	movw	r28, r24
     61a:	0e 94 03 03 	call	0x606	; 0x606 <_ZN12MCP2515ClassD1Ev>
     61e:	ce 01       	movw	r24, r28
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <_ZdlPv>

00000628 <_ZN8SPIClass16beginTransactionE11SPISettings>:
     628:	20 91 1f 04 	lds	r18, 0x041F	; 0x80041f <_ZN8SPIClass13interruptModeE>
     62c:	22 23       	and	r18, r18
     62e:	99 f0       	breq	.+38     	; 0x656 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     630:	4f b7       	in	r20, 0x3f	; 63
     632:	f8 94       	cli
     634:	20 91 1f 04 	lds	r18, 0x041F	; 0x80041f <_ZN8SPIClass13interruptModeE>
     638:	21 30       	cpi	r18, 0x01	; 1
     63a:	59 f4       	brne	.+22     	; 0x652 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
     63c:	2d b3       	in	r18, 0x1d	; 29
     63e:	20 93 1d 04 	sts	0x041D, r18	; 0x80041d <_ZN8SPIClass13interruptSaveE>
     642:	3d b3       	in	r19, 0x1d	; 29
     644:	20 91 1e 04 	lds	r18, 0x041E	; 0x80041e <_ZN8SPIClass13interruptMaskE>
     648:	20 95       	com	r18
     64a:	23 23       	and	r18, r19
     64c:	2d bb       	out	0x1d, r18	; 29
     64e:	4f bf       	out	0x3f, r20	; 63
     650:	02 c0       	rjmp	.+4      	; 0x656 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     652:	40 93 1d 04 	sts	0x041D, r20	; 0x80041d <_ZN8SPIClass13interruptSaveE>
     656:	8c bd       	out	0x2c, r24	; 44
     658:	9d bd       	out	0x2d, r25	; 45
     65a:	08 95       	ret

0000065c <_ZN8SPIClass8transferEh>:
     65c:	8e bd       	out	0x2e, r24	; 46
     65e:	00 00       	nop
     660:	0d b4       	in	r0, 0x2d	; 45
     662:	07 fe       	sbrs	r0, 7
     664:	fd cf       	rjmp	.-6      	; 0x660 <_ZN8SPIClass8transferEh+0x4>
     666:	8e b5       	in	r24, 0x2e	; 46
     668:	08 95       	ret

0000066a <_ZN8SPIClass14endTransactionEv>:
     66a:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <_ZN8SPIClass13interruptModeE>
     66e:	88 23       	and	r24, r24
     670:	61 f0       	breq	.+24     	; 0x68a <_ZN8SPIClass14endTransactionEv+0x20>
     672:	9f b7       	in	r25, 0x3f	; 63
     674:	f8 94       	cli
     676:	20 91 1f 04 	lds	r18, 0x041F	; 0x80041f <_ZN8SPIClass13interruptModeE>
     67a:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <_ZN8SPIClass13interruptSaveE>
     67e:	21 30       	cpi	r18, 0x01	; 1
     680:	19 f4       	brne	.+6      	; 0x688 <_ZN8SPIClass14endTransactionEv+0x1e>
     682:	8d bb       	out	0x1d, r24	; 29
     684:	9f bf       	out	0x3f, r25	; 63
     686:	08 95       	ret
     688:	8f bf       	out	0x3f, r24	; 63
     68a:	08 95       	ret

0000068c <_ZN12MCP2515ClassC1Ev>:
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	ec 01       	movw	r28, r24
     692:	0e 94 a7 02 	call	0x54e	; 0x54e <_ZN18CANControllerClassC1Ev>
     696:	8d e8       	ldi	r24, 0x8D	; 141
     698:	93 e0       	ldi	r25, 0x03	; 3
     69a:	99 83       	std	Y+1, r25	; 0x01
     69c:	88 83       	st	Y, r24
     69e:	80 e5       	ldi	r24, 0x50	; 80
     6a0:	8d ab       	std	Y+53, r24	; 0x35
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	8e ab       	std	Y+54, r24	; 0x36
     6a6:	8a e0       	ldi	r24, 0x0A	; 10
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	98 af       	std	Y+56, r25	; 0x38
     6ac:	8f ab       	std	Y+55, r24	; 0x37
     6ae:	82 e0       	ldi	r24, 0x02	; 2
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	9a af       	std	Y+58, r25	; 0x3a
     6b4:	89 af       	std	Y+57, r24	; 0x39
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	94 e2       	ldi	r25, 0x24	; 36
     6ba:	a4 ef       	ldi	r26, 0xF4	; 244
     6bc:	b0 e0       	ldi	r27, 0x00	; 0
     6be:	8b af       	std	Y+59, r24	; 0x3b
     6c0:	9c af       	std	Y+60, r25	; 0x3c
     6c2:	ad af       	std	Y+61, r26	; 0x3d
     6c4:	be af       	std	Y+62, r27	; 0x3e
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	08 95       	ret

000006cc <_ZN12MCP2515Class5resetEv>:
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	ec 01       	movw	r28, r24
     6d2:	8d a9       	ldd	r24, Y+53	; 0x35
     6d4:	9e a9       	ldd	r25, Y+54	; 0x36
     6d6:	0e 94 14 03 	call	0x628	; 0x628 <_ZN8SPIClass16beginTransactionE11SPISettings>
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	8f a9       	ldd	r24, Y+55	; 0x37
     6de:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <digitalWrite>
     6e2:	80 ec       	ldi	r24, 0xC0	; 192
     6e4:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN8SPIClass8transferEh>
     6e8:	61 e0       	ldi	r22, 0x01	; 1
     6ea:	8f a9       	ldd	r24, Y+55	; 0x37
     6ec:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <digitalWrite>
     6f0:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN8SPIClass14endTransactionEv>
     6f4:	8a e0       	ldi	r24, 0x0A	; 10
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	0c 94 57 0c 	jmp	0x18ae	; 0x18ae <delayMicroseconds>

00000700 <_ZN12MCP2515Class12readRegisterEh>:
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	ec 01       	movw	r28, r24
     708:	16 2f       	mov	r17, r22
     70a:	8d a9       	ldd	r24, Y+53	; 0x35
     70c:	9e a9       	ldd	r25, Y+54	; 0x36
     70e:	0e 94 14 03 	call	0x628	; 0x628 <_ZN8SPIClass16beginTransactionE11SPISettings>
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	8f a9       	ldd	r24, Y+55	; 0x37
     716:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <digitalWrite>
     71a:	83 e0       	ldi	r24, 0x03	; 3
     71c:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN8SPIClass8transferEh>
     720:	81 2f       	mov	r24, r17
     722:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN8SPIClass8transferEh>
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN8SPIClass8transferEh>
     72c:	18 2f       	mov	r17, r24
     72e:	61 e0       	ldi	r22, 0x01	; 1
     730:	8f a9       	ldd	r24, Y+55	; 0x37
     732:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <digitalWrite>
     736:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN8SPIClass14endTransactionEv>
     73a:	81 2f       	mov	r24, r17
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	08 95       	ret

00000744 <_ZN12MCP2515Class15handleInterruptEv>:

  delayMicroseconds(10);
}

void MCP2515Class::handleInterrupt()
{
     744:	0f 93       	push	r16
     746:	1f 93       	push	r17
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	ec 01       	movw	r28, r24
  if (readRegister(REG_CANINTF) == 0) {
     74e:	6c e2       	ldi	r22, 0x2C	; 44
     750:	0e 94 80 03 	call	0x700	; 0x700 <_ZN12MCP2515Class12readRegisterEh>
     754:	88 23       	and	r24, r24
     756:	a9 f0       	breq	.+42     	; 0x782 <_ZN12MCP2515Class15handleInterruptEv+0x3e>
    return;
  }

  while (parsePacket()) {
     758:	e8 81       	ld	r30, Y
     75a:	f9 81       	ldd	r31, Y+1	; 0x01
     75c:	04 88       	ldd	r0, Z+20	; 0x14
     75e:	f5 89       	ldd	r31, Z+21	; 0x15
     760:	e0 2d       	mov	r30, r0
     762:	ce 01       	movw	r24, r28
     764:	09 95       	icall
     766:	89 2b       	or	r24, r25
     768:	61 f0       	breq	.+24     	; 0x782 <_ZN12MCP2515Class15handleInterruptEv+0x3e>
    _onReceive(available());
     76a:	0c 85       	ldd	r16, Y+12	; 0x0c
     76c:	1d 85       	ldd	r17, Y+13	; 0x0d
     76e:	e8 81       	ld	r30, Y
     770:	f9 81       	ldd	r31, Y+1	; 0x01
     772:	00 84       	ldd	r0, Z+8	; 0x08
     774:	f1 85       	ldd	r31, Z+9	; 0x09
     776:	e0 2d       	mov	r30, r0
     778:	ce 01       	movw	r24, r28
     77a:	09 95       	icall
     77c:	f8 01       	movw	r30, r16
     77e:	09 95       	icall
     780:	eb cf       	rjmp	.-42     	; 0x758 <_ZN12MCP2515Class15handleInterruptEv+0x14>
  }
}
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	08 95       	ret

0000078c <_ZN12MCP2515Class11onInterruptEv>:
  SPI.endTransaction();
}

void MCP2515Class::onInterrupt()
{
  CAN.handleInterrupt();
     78c:	8e ed       	ldi	r24, 0xDE	; 222
     78e:	93 e0       	ldi	r25, 0x03	; 3
     790:	0c 94 a2 03 	jmp	0x744	; 0x744 <_ZN12MCP2515Class15handleInterruptEv>

00000794 <_ZN12MCP2515Class14modifyRegisterEhhh>:

  return value;
}

void MCP2515Class::modifyRegister(uint8_t address, uint8_t mask, uint8_t value)
{
     794:	ff 92       	push	r15
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	ec 01       	movw	r28, r24
     7a0:	f6 2e       	mov	r15, r22
     7a2:	04 2f       	mov	r16, r20
     7a4:	12 2f       	mov	r17, r18
  SPI.beginTransaction(_spiSettings);
     7a6:	8d a9       	ldd	r24, Y+53	; 0x35
     7a8:	9e a9       	ldd	r25, Y+54	; 0x36
     7aa:	0e 94 14 03 	call	0x628	; 0x628 <_ZN8SPIClass16beginTransactionE11SPISettings>
  digitalWrite(_csPin, LOW);
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	8f a9       	ldd	r24, Y+55	; 0x37
     7b2:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <digitalWrite>
  SPI.transfer(0x05);
     7b6:	85 e0       	ldi	r24, 0x05	; 5
     7b8:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN8SPIClass8transferEh>
  SPI.transfer(address);
     7bc:	8f 2d       	mov	r24, r15
     7be:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN8SPIClass8transferEh>
  SPI.transfer(mask);
     7c2:	80 2f       	mov	r24, r16
     7c4:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN8SPIClass8transferEh>
  SPI.transfer(value);
     7c8:	81 2f       	mov	r24, r17
     7ca:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN8SPIClass8transferEh>
  digitalWrite(_csPin, HIGH);
     7ce:	61 e0       	ldi	r22, 0x01	; 1
     7d0:	8f a9       	ldd	r24, Y+55	; 0x37
     7d2:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <digitalWrite>
  SPI.endTransaction();
}
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	ff 90       	pop	r15
  SPI.transfer(0x05);
  SPI.transfer(address);
  SPI.transfer(mask);
  SPI.transfer(value);
  digitalWrite(_csPin, HIGH);
  SPI.endTransaction();
     7e0:	0c 94 35 03 	jmp	0x66a	; 0x66a <_ZN8SPIClass14endTransactionEv>

000007e4 <_ZN12MCP2515Class11parsePacketEv>:

  return (readRegister(REG_TXBnCTRL(n)) & 0x70) ? 0 : 1;
}

int MCP2515Class::parsePacket()
{
     7e4:	9f 92       	push	r9
     7e6:	af 92       	push	r10
     7e8:	bf 92       	push	r11
     7ea:	cf 92       	push	r12
     7ec:	df 92       	push	r13
     7ee:	ef 92       	push	r14
     7f0:	ff 92       	push	r15
     7f2:	0f 93       	push	r16
     7f4:	1f 93       	push	r17
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	ec 01       	movw	r28, r24
  int n;

  uint8_t intf = readRegister(REG_CANINTF);
     7fc:	6c e2       	ldi	r22, 0x2C	; 44
     7fe:	0e 94 80 03 	call	0x700	; 0x700 <_ZN12MCP2515Class12readRegisterEh>

  if (intf & FLAG_RXnIF(0)) {
     802:	80 fd       	sbrc	r24, 0
     804:	10 c0       	rjmp	.+32     	; 0x826 <_ZN12MCP2515Class11parsePacketEv+0x42>
    n = 0;
  } else if (intf & FLAG_RXnIF(1)) {
     806:	81 fd       	sbrc	r24, 1
     808:	10 c0       	rjmp	.+32     	; 0x82a <_ZN12MCP2515Class11parsePacketEv+0x46>
    n = 1;
  } else {
    _rxId = -1;
     80a:	8f ef       	ldi	r24, 0xFF	; 255
     80c:	9f ef       	ldi	r25, 0xFF	; 255
     80e:	dc 01       	movw	r26, r24
     810:	89 a3       	std	Y+33, r24	; 0x21
     812:	9a a3       	std	Y+34, r25	; 0x22
     814:	ab a3       	std	Y+35, r26	; 0x23
     816:	bc a3       	std	Y+36, r27	; 0x24
    _rxExtended = false;
     818:	1d a2       	std	Y+37, r1	; 0x25
    _rxRtr = false;
     81a:	1e a2       	std	Y+38, r1	; 0x26
    _rxLength = 0;
     81c:	1a a6       	std	Y+42, r1	; 0x2a
     81e:	19 a6       	std	Y+41, r1	; 0x29
    return 0;
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	a0 c0       	rjmp	.+320    	; 0x966 <__stack+0x67>
  int n;

  uint8_t intf = readRegister(REG_CANINTF);

  if (intf & FLAG_RXnIF(0)) {
    n = 0;
     826:	00 e0       	ldi	r16, 0x00	; 0
     828:	01 c0       	rjmp	.+2      	; 0x82c <_ZN12MCP2515Class11parsePacketEv+0x48>
  } else if (intf & FLAG_RXnIF(1)) {
    n = 1;
     82a:	01 e0       	ldi	r16, 0x01	; 1
    _rxRtr = false;
    _rxLength = 0;
    return 0;
  }

  _rxExtended = (readRegister(REG_RXBnSIDL(n)) & FLAG_IDE) ? true : false;
     82c:	10 2f       	mov	r17, r16
     82e:	12 95       	swap	r17
     830:	10 7f       	andi	r17, 0xF0	; 240
     832:	42 e6       	ldi	r20, 0x62	; 98
     834:	a4 2e       	mov	r10, r20
     836:	a1 0e       	add	r10, r17
     838:	6a 2d       	mov	r22, r10
     83a:	ce 01       	movw	r24, r28
     83c:	0e 94 80 03 	call	0x700	; 0x700 <_ZN12MCP2515Class12readRegisterEh>
     840:	83 fb       	bst	r24, 3
     842:	88 27       	eor	r24, r24
     844:	80 f9       	bld	r24, 0
     846:	8d a3       	std	Y+37, r24	; 0x25

  uint32_t idA = ((readRegister(REG_RXBnSIDH(n)) << 3) & 0x07f8) | ((readRegister(REG_RXBnSIDL(n)) >> 5) & 0x07);
     848:	61 e6       	ldi	r22, 0x61	; 97
     84a:	61 0f       	add	r22, r17
     84c:	ce 01       	movw	r24, r28
     84e:	0e 94 80 03 	call	0x700	; 0x700 <_ZN12MCP2515Class12readRegisterEh>
     852:	c8 2e       	mov	r12, r24
     854:	6a 2d       	mov	r22, r10
     856:	ce 01       	movw	r24, r28
     858:	0e 94 80 03 	call	0x700	; 0x700 <_ZN12MCP2515Class12readRegisterEh>
     85c:	98 e0       	ldi	r25, 0x08	; 8
     85e:	c9 9e       	mul	r12, r25
     860:	60 01       	movw	r12, r0
     862:	11 24       	eor	r1, r1
     864:	82 95       	swap	r24
     866:	86 95       	lsr	r24
     868:	87 70       	andi	r24, 0x07	; 7
     86a:	c8 2a       	or	r12, r24
  if (_rxExtended) {
     86c:	8d a1       	ldd	r24, Y+37	; 0x25
     86e:	0d 2c       	mov	r0, r13
     870:	00 0c       	add	r0, r0
     872:	ee 08       	sbc	r14, r14
     874:	ff 08       	sbc	r15, r15
     876:	55 e6       	ldi	r21, 0x65	; 101
     878:	b5 2e       	mov	r11, r21
     87a:	b1 0e       	add	r11, r17
     87c:	88 23       	and	r24, r24
     87e:	89 f1       	breq	.+98     	; 0x8e2 <_ZN12MCP2515Class11parsePacketEv+0xfe>
    uint32_t idB = (((uint32_t)(readRegister(REG_RXBnSIDL(n)) & 0x03) << 16) & 0x30000) | ((readRegister(REG_RXBnEID8(n)) << 8) & 0xff00) | readRegister(REG_RXBnEID0(n));
     880:	6a 2d       	mov	r22, r10
     882:	ce 01       	movw	r24, r28
     884:	0e 94 80 03 	call	0x700	; 0x700 <_ZN12MCP2515Class12readRegisterEh>
     888:	98 2e       	mov	r9, r24
     88a:	63 e6       	ldi	r22, 0x63	; 99
     88c:	61 0f       	add	r22, r17
     88e:	ce 01       	movw	r24, r28
     890:	0e 94 80 03 	call	0x700	; 0x700 <_ZN12MCP2515Class12readRegisterEh>
     894:	a8 2e       	mov	r10, r24
     896:	64 e6       	ldi	r22, 0x64	; 100
     898:	61 0f       	add	r22, r17
     89a:	ce 01       	movw	r24, r28
     89c:	0e 94 80 03 	call	0x700	; 0x700 <_ZN12MCP2515Class12readRegisterEh>

    _rxId = (idA << 18) | idB;
     8a0:	99 2d       	mov	r25, r9
     8a2:	93 70       	andi	r25, 0x03	; 3
     8a4:	22 e1       	ldi	r18, 0x12	; 18
     8a6:	cc 0c       	add	r12, r12
     8a8:	dd 1c       	adc	r13, r13
     8aa:	ee 1c       	adc	r14, r14
     8ac:	ff 1c       	adc	r15, r15
     8ae:	2a 95       	dec	r18
     8b0:	d1 f7       	brne	.-12     	; 0x8a6 <_ZN12MCP2515Class11parsePacketEv+0xc2>
     8b2:	c8 2a       	or	r12, r24
     8b4:	e9 2a       	or	r14, r25
     8b6:	8a 2d       	mov	r24, r10
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	98 2f       	mov	r25, r24
     8bc:	88 27       	eor	r24, r24
     8be:	a0 e0       	ldi	r26, 0x00	; 0
     8c0:	b0 e0       	ldi	r27, 0x00	; 0
     8c2:	c8 2a       	or	r12, r24
     8c4:	d9 2a       	or	r13, r25
     8c6:	ea 2a       	or	r14, r26
     8c8:	fb 2a       	or	r15, r27
     8ca:	c9 a2       	std	Y+33, r12	; 0x21
     8cc:	da a2       	std	Y+34, r13	; 0x22
     8ce:	eb a2       	std	Y+35, r14	; 0x23
     8d0:	fc a2       	std	Y+36, r15	; 0x24
    _rxRtr = (readRegister(REG_RXBnDLC(n)) & FLAG_RTR) ? true : false;
     8d2:	6b 2d       	mov	r22, r11
     8d4:	ce 01       	movw	r24, r28
     8d6:	0e 94 80 03 	call	0x700	; 0x700 <_ZN12MCP2515Class12readRegisterEh>
     8da:	86 fb       	bst	r24, 6
     8dc:	88 27       	eor	r24, r24
     8de:	80 f9       	bld	r24, 0
     8e0:	0a c0       	rjmp	.+20     	; 0x8f6 <_ZN12MCP2515Class11parsePacketEv+0x112>
  } else {
    _rxId = idA;
     8e2:	c9 a2       	std	Y+33, r12	; 0x21
     8e4:	da a2       	std	Y+34, r13	; 0x22
     8e6:	eb a2       	std	Y+35, r14	; 0x23
     8e8:	fc a2       	std	Y+36, r15	; 0x24
    _rxRtr = (readRegister(REG_RXBnSIDL(n)) & FLAG_SRR) ? true : false;
     8ea:	6a 2d       	mov	r22, r10
     8ec:	ce 01       	movw	r24, r28
     8ee:	0e 94 80 03 	call	0x700	; 0x700 <_ZN12MCP2515Class12readRegisterEh>
     8f2:	82 95       	swap	r24
     8f4:	81 70       	andi	r24, 0x01	; 1
     8f6:	8e a3       	std	Y+38, r24	; 0x26
  }
  _rxDlc = readRegister(REG_RXBnDLC(n)) & 0x0f;
     8f8:	6b 2d       	mov	r22, r11
     8fa:	ce 01       	movw	r24, r28
     8fc:	0e 94 80 03 	call	0x700	; 0x700 <_ZN12MCP2515Class12readRegisterEh>
     900:	8f 70       	andi	r24, 0x0F	; 15
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	98 a7       	std	Y+40, r25	; 0x28
     906:	8f a3       	std	Y+39, r24	; 0x27
  _rxIndex = 0;
     908:	1c a6       	std	Y+44, r1	; 0x2c
     90a:	1b a6       	std	Y+43, r1	; 0x2b

  if (_rxRtr) {
     90c:	2e a1       	ldd	r18, Y+38	; 0x26
     90e:	22 23       	and	r18, r18
     910:	19 f0       	breq	.+6      	; 0x918 <__stack+0x19>
    _rxLength = 0;
     912:	1a a6       	std	Y+42, r1	; 0x2a
     914:	19 a6       	std	Y+41, r1	; 0x29
     916:	1a c0       	rjmp	.+52     	; 0x94c <__stack+0x4d>
  } else {
    _rxLength = _rxDlc;
     918:	9a a7       	std	Y+42, r25	; 0x2a
     91a:	89 a7       	std	Y+41, r24	; 0x29
     91c:	1a 59       	subi	r17, 0x9A	; 154
     91e:	6e 01       	movw	r12, r28
     920:	ed e2       	ldi	r30, 0x2D	; 45
     922:	ce 0e       	add	r12, r30
     924:	d1 1c       	adc	r13, r1

    for (int i = 0; i < _rxLength; i++) {
     926:	e1 2c       	mov	r14, r1
     928:	f1 2c       	mov	r15, r1
     92a:	89 a5       	ldd	r24, Y+41	; 0x29
     92c:	9a a5       	ldd	r25, Y+42	; 0x2a
     92e:	e8 16       	cp	r14, r24
     930:	f9 06       	cpc	r15, r25
     932:	64 f4       	brge	.+24     	; 0x94c <__stack+0x4d>
      _rxData[i] = readRegister(REG_RXBnD0(n) + i);
     934:	61 2f       	mov	r22, r17
     936:	ce 01       	movw	r24, r28
     938:	0e 94 80 03 	call	0x700	; 0x700 <_ZN12MCP2515Class12readRegisterEh>
     93c:	f6 01       	movw	r30, r12
     93e:	81 93       	st	Z+, r24
     940:	6f 01       	movw	r12, r30
  if (_rxRtr) {
    _rxLength = 0;
  } else {
    _rxLength = _rxDlc;

    for (int i = 0; i < _rxLength; i++) {
     942:	ff ef       	ldi	r31, 0xFF	; 255
     944:	ef 1a       	sub	r14, r31
     946:	ff 0a       	sbc	r15, r31
     948:	1f 5f       	subi	r17, 0xFF	; 255
     94a:	ef cf       	rjmp	.-34     	; 0x92a <__stack+0x2b>
      _rxData[i] = readRegister(REG_RXBnD0(n) + i);
    }
  }

  modifyRegister(REG_CANINTF, FLAG_RXnIF(n), 0x00);
     94c:	41 e0       	ldi	r20, 0x01	; 1
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	01 c0       	rjmp	.+2      	; 0x954 <__stack+0x55>
     952:	44 0f       	add	r20, r20
     954:	0a 95       	dec	r16
     956:	ea f7       	brpl	.-6      	; 0x952 <__stack+0x53>
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	6c e2       	ldi	r22, 0x2C	; 44
     95c:	ce 01       	movw	r24, r28
     95e:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN12MCP2515Class14modifyRegisterEhhh>

  return _rxDlc;
     962:	8f a1       	ldd	r24, Y+39	; 0x27
     964:	98 a5       	ldd	r25, Y+40	; 0x28
}
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	df 90       	pop	r13
     974:	cf 90       	pop	r12
     976:	bf 90       	pop	r11
     978:	af 90       	pop	r10
     97a:	9f 90       	pop	r9
     97c:	08 95       	ret

0000097e <_ZN12MCP2515Class13writeRegisterEhh>:
  digitalWrite(_csPin, HIGH);
  SPI.endTransaction();
}

void MCP2515Class::writeRegister(uint8_t address, uint8_t value)
{
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	ec 01       	movw	r28, r24
     988:	06 2f       	mov	r16, r22
     98a:	14 2f       	mov	r17, r20
  SPI.beginTransaction(_spiSettings);
     98c:	8d a9       	ldd	r24, Y+53	; 0x35
     98e:	9e a9       	ldd	r25, Y+54	; 0x36
     990:	0e 94 14 03 	call	0x628	; 0x628 <_ZN8SPIClass16beginTransactionE11SPISettings>
  digitalWrite(_csPin, LOW);
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	8f a9       	ldd	r24, Y+55	; 0x37
     998:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <digitalWrite>
  SPI.transfer(0x02);
     99c:	82 e0       	ldi	r24, 0x02	; 2
     99e:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN8SPIClass8transferEh>
  SPI.transfer(address);
     9a2:	80 2f       	mov	r24, r16
     9a4:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN8SPIClass8transferEh>
  SPI.transfer(value);
     9a8:	81 2f       	mov	r24, r17
     9aa:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN8SPIClass8transferEh>
  digitalWrite(_csPin, HIGH);
     9ae:	61 e0       	ldi	r22, 0x01	; 1
     9b0:	8f a9       	ldd	r24, Y+55	; 0x37
     9b2:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <digitalWrite>
  SPI.endTransaction();
}
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	1f 91       	pop	r17
     9bc:	0f 91       	pop	r16
  digitalWrite(_csPin, LOW);
  SPI.transfer(0x02);
  SPI.transfer(address);
  SPI.transfer(value);
  digitalWrite(_csPin, HIGH);
  SPI.endTransaction();
     9be:	0c 94 35 03 	jmp	0x66a	; 0x66a <_ZN8SPIClass14endTransactionEv>

000009c2 <_ZN12MCP2515Class6filterEii>:
#endif
  }
}

int MCP2515Class::filter(int id, int mask)
{
     9c2:	cf 92       	push	r12
     9c4:	df 92       	push	r13
     9c6:	ef 92       	push	r14
     9c8:	ff 92       	push	r15
     9ca:	0f 93       	push	r16
     9cc:	1f 93       	push	r17
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	ec 01       	movw	r28, r24
     9d4:	7b 01       	movw	r14, r22
     9d6:	8a 01       	movw	r16, r20
  id &= 0x7ff;
  mask &= 0x7ff;

  // config mode
  writeRegister(REG_CANCTRL, 0x80);
     9d8:	40 e8       	ldi	r20, 0x80	; 128
     9da:	6f e0       	ldi	r22, 0x0F	; 15
     9dc:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x80) {
     9e0:	6f e0       	ldi	r22, 0x0F	; 15
     9e2:	ce 01       	movw	r24, r28
     9e4:	0e 94 80 03 	call	0x700	; 0x700 <_ZN12MCP2515Class12readRegisterEh>
     9e8:	80 38       	cpi	r24, 0x80	; 128
     9ea:	09 f0       	breq	.+2      	; 0x9ee <_ZN12MCP2515Class6filterEii+0x2c>
     9ec:	7d c0       	rjmp	.+250    	; 0xae8 <_ZN12MCP2515Class6filterEii+0x126>
  }
}

int MCP2515Class::filter(int id, int mask)
{
  id &= 0x7ff;
     9ee:	87 e0       	ldi	r24, 0x07	; 7
     9f0:	f8 22       	and	r15, r24
  mask &= 0x7ff;
     9f2:	17 70       	andi	r17, 0x07	; 7
    return 0;
  }

  for (int n = 0; n < 2; n++) {
    // standard only
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM0);
     9f4:	40 e2       	ldi	r20, 0x20	; 32
     9f6:	60 e6       	ldi	r22, 0x60	; 96
     9f8:	ce 01       	movw	r24, r28
     9fa:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM0);
     9fe:	40 e2       	ldi	r20, 0x20	; 32
     a00:	60 e6       	ldi	r22, 0x60	; 96
     a02:	ce 01       	movw	r24, r28
     a04:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>

    writeRegister(REG_RXMnSIDH(n), mask >> 3);
     a08:	68 01       	movw	r12, r16
     a0a:	83 e0       	ldi	r24, 0x03	; 3
     a0c:	d5 94       	asr	r13
     a0e:	c7 94       	ror	r12
     a10:	8a 95       	dec	r24
     a12:	e1 f7       	brne	.-8      	; 0xa0c <_ZN12MCP2515Class6filterEii+0x4a>
     a14:	4c 2d       	mov	r20, r12
     a16:	60 e2       	ldi	r22, 0x20	; 32
     a18:	ce 01       	movw	r24, r28
     a1a:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnSIDL(n), mask << 5);
     a1e:	02 95       	swap	r16
     a20:	00 0f       	add	r16, r16
     a22:	00 7e       	andi	r16, 0xE0	; 224
     a24:	40 2f       	mov	r20, r16
     a26:	61 e2       	ldi	r22, 0x21	; 33
     a28:	ce 01       	movw	r24, r28
     a2a:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID8(n), 0);
     a2e:	40 e0       	ldi	r20, 0x00	; 0
     a30:	62 e2       	ldi	r22, 0x22	; 34
     a32:	ce 01       	movw	r24, r28
     a34:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID0(n), 0);
     a38:	40 e0       	ldi	r20, 0x00	; 0
     a3a:	63 e2       	ldi	r22, 0x23	; 35
     a3c:	ce 01       	movw	r24, r28
     a3e:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    return 0;
  }

  for (int n = 0; n < 2; n++) {
    // standard only
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM0);
     a42:	40 e2       	ldi	r20, 0x20	; 32
     a44:	60 e7       	ldi	r22, 0x70	; 112
     a46:	ce 01       	movw	r24, r28
     a48:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM0);
     a4c:	40 e2       	ldi	r20, 0x20	; 32
     a4e:	60 e7       	ldi	r22, 0x70	; 112
     a50:	ce 01       	movw	r24, r28
     a52:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>

    writeRegister(REG_RXMnSIDH(n), mask >> 3);
     a56:	4c 2d       	mov	r20, r12
     a58:	64 e2       	ldi	r22, 0x24	; 36
     a5a:	ce 01       	movw	r24, r28
     a5c:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnSIDL(n), mask << 5);
     a60:	40 2f       	mov	r20, r16
     a62:	65 e2       	ldi	r22, 0x25	; 37
     a64:	ce 01       	movw	r24, r28
     a66:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID8(n), 0);
     a6a:	40 e0       	ldi	r20, 0x00	; 0
     a6c:	66 e2       	ldi	r22, 0x26	; 38
     a6e:	ce 01       	movw	r24, r28
     a70:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID0(n), 0);
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	67 e2       	ldi	r22, 0x27	; 39
     a78:	ce 01       	movw	r24, r28
     a7a:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
  }

  for (int n = 0; n < 6; n++) {
    writeRegister(REG_RXFnSIDH(n), id >> 3);
     a7e:	a7 01       	movw	r20, r14
     a80:	93 e0       	ldi	r25, 0x03	; 3
     a82:	55 95       	asr	r21
     a84:	47 95       	ror	r20
     a86:	9a 95       	dec	r25
     a88:	e1 f7       	brne	.-8      	; 0xa82 <_ZN12MCP2515Class6filterEii+0xc0>
     a8a:	04 2f       	mov	r16, r20
    writeRegister(REG_RXFnSIDL(n), id << 5);
     a8c:	e2 94       	swap	r14
     a8e:	ee 0c       	add	r14, r14
     a90:	20 ee       	ldi	r18, 0xE0	; 224
     a92:	e2 22       	and	r14, r18
     a94:	10 e0       	ldi	r17, 0x00	; 0
    writeRegister(REG_RXMnEID8(n), 0);
    writeRegister(REG_RXMnEID0(n), 0);
  }

  for (int n = 0; n < 6; n++) {
    writeRegister(REG_RXFnSIDH(n), id >> 3);
     a96:	40 2f       	mov	r20, r16
     a98:	61 2f       	mov	r22, r17
     a9a:	ce 01       	movw	r24, r28
     a9c:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXFnSIDL(n), id << 5);
     aa0:	61 e0       	ldi	r22, 0x01	; 1
     aa2:	61 0f       	add	r22, r17
     aa4:	4e 2d       	mov	r20, r14
     aa6:	ce 01       	movw	r24, r28
     aa8:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXFnEID8(n), 0);
     aac:	62 e0       	ldi	r22, 0x02	; 2
     aae:	61 0f       	add	r22, r17
     ab0:	40 e0       	ldi	r20, 0x00	; 0
     ab2:	ce 01       	movw	r24, r28
     ab4:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXFnEID0(n), 0);
     ab8:	63 e0       	ldi	r22, 0x03	; 3
     aba:	61 0f       	add	r22, r17
     abc:	40 e0       	ldi	r20, 0x00	; 0
     abe:	ce 01       	movw	r24, r28
     ac0:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
     ac4:	1c 5f       	subi	r17, 0xFC	; 252
    writeRegister(REG_RXMnSIDL(n), mask << 5);
    writeRegister(REG_RXMnEID8(n), 0);
    writeRegister(REG_RXMnEID0(n), 0);
  }

  for (int n = 0; n < 6; n++) {
     ac6:	18 31       	cpi	r17, 0x18	; 24
     ac8:	31 f7       	brne	.-52     	; 0xa96 <_ZN12MCP2515Class6filterEii+0xd4>
    writeRegister(REG_RXFnEID8(n), 0);
    writeRegister(REG_RXFnEID0(n), 0);
  }

  // normal mode
  writeRegister(REG_CANCTRL, 0x00);
     aca:	40 e0       	ldi	r20, 0x00	; 0
     acc:	6f e0       	ldi	r22, 0x0F	; 15
     ace:	ce 01       	movw	r24, r28
     ad0:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x00) {
     ad4:	6f e0       	ldi	r22, 0x0F	; 15
     ad6:	ce 01       	movw	r24, r28
     ad8:	0e 94 80 03 	call	0x700	; 0x700 <_ZN12MCP2515Class12readRegisterEh>
  mask &= 0x7ff;

  // config mode
  writeRegister(REG_CANCTRL, 0x80);
  if (readRegister(REG_CANCTRL) != 0x80) {
    return 0;
     adc:	21 e0       	ldi	r18, 0x01	; 1
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	81 11       	cpse	r24, r1
     ae2:	20 e0       	ldi	r18, 0x00	; 0
     ae4:	82 2f       	mov	r24, r18
     ae6:	02 c0       	rjmp	.+4      	; 0xaec <_ZN12MCP2515Class6filterEii+0x12a>
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	90 e0       	ldi	r25, 0x00	; 0
  if (readRegister(REG_CANCTRL) != 0x00) {
    return 0;
  }

  return 1;
}
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	cf 90       	pop	r12
     afc:	08 95       	ret

00000afe <_ZN12MCP2515Class14filterExtendedEll>:

int MCP2515Class::filterExtended(long id, long mask)
{
     afe:	4f 92       	push	r4
     b00:	5f 92       	push	r5
     b02:	6f 92       	push	r6
     b04:	7f 92       	push	r7
     b06:	8f 92       	push	r8
     b08:	9f 92       	push	r9
     b0a:	af 92       	push	r10
     b0c:	bf 92       	push	r11
     b0e:	cf 92       	push	r12
     b10:	df 92       	push	r13
     b12:	ef 92       	push	r14
     b14:	ff 92       	push	r15
     b16:	0f 93       	push	r16
     b18:	1f 93       	push	r17
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	00 d0       	rcall	.+0      	; 0xb20 <_ZN12MCP2515Class14filterExtendedEll+0x22>
     b20:	00 d0       	rcall	.+0      	; 0xb22 <_ZN12MCP2515Class14filterExtendedEll+0x24>
     b22:	00 d0       	rcall	.+0      	; 0xb24 <_ZN12MCP2515Class14filterExtendedEll+0x26>
     b24:	cd b7       	in	r28, 0x3d	; 61
     b26:	de b7       	in	r29, 0x3e	; 62
     b28:	9e 83       	std	Y+6, r25	; 0x06
     b2a:	8d 83       	std	Y+5, r24	; 0x05
     b2c:	4a 01       	movw	r8, r20
     b2e:	5b 01       	movw	r10, r22
     b30:	68 01       	movw	r12, r16
     b32:	79 01       	movw	r14, r18
  id &= 0x1FFFFFFF;
  mask &= 0x1FFFFFFF;

  // config mode
  writeRegister(REG_CANCTRL, 0x80);
     b34:	40 e8       	ldi	r20, 0x80	; 128
     b36:	6f e0       	ldi	r22, 0x0F	; 15
     b38:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x80) {
     b3c:	6f e0       	ldi	r22, 0x0F	; 15
     b3e:	8d 81       	ldd	r24, Y+5	; 0x05
     b40:	9e 81       	ldd	r25, Y+6	; 0x06
     b42:	0e 94 80 03 	call	0x700	; 0x700 <_ZN12MCP2515Class12readRegisterEh>
     b46:	80 38       	cpi	r24, 0x80	; 128
     b48:	09 f0       	breq	.+2      	; 0xb4c <_ZN12MCP2515Class14filterExtendedEll+0x4e>
     b4a:	be c0       	rjmp	.+380    	; 0xcc8 <_ZN12MCP2515Class14filterExtendedEll+0x1ca>
}

int MCP2515Class::filterExtended(long id, long mask)
{
  id &= 0x1FFFFFFF;
  mask &= 0x1FFFFFFF;
     b4c:	8f e1       	ldi	r24, 0x1F	; 31
     b4e:	f8 22       	and	r15, r24
  for (int n = 0; n < 2; n++) {
    // extended only
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM1);
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM1);

    writeRegister(REG_RXMnSIDH(n), mask >> 21);
     b50:	d7 01       	movw	r26, r14
     b52:	c6 01       	movw	r24, r12
     b54:	25 e1       	ldi	r18, 0x15	; 21
     b56:	b5 95       	asr	r27
     b58:	a7 95       	ror	r26
     b5a:	97 95       	ror	r25
     b5c:	87 95       	ror	r24
     b5e:	2a 95       	dec	r18
     b60:	d1 f7       	brne	.-12     	; 0xb56 <_ZN12MCP2515Class14filterExtendedEll+0x58>
     b62:	89 83       	std	Y+1, r24	; 0x01
     b64:	9a 83       	std	Y+2, r25	; 0x02
     b66:	ab 83       	std	Y+3, r26	; 0x03
     b68:	bc 83       	std	Y+4, r27	; 0x04
    writeRegister(REG_RXMnSIDL(n), (((mask >> 18) & 0x03) << 5) | FLAG_EXIDE | ((mask >> 16) & 0x03));
     b6a:	d7 01       	movw	r26, r14
     b6c:	c6 01       	movw	r24, r12
     b6e:	3d e0       	ldi	r19, 0x0D	; 13
     b70:	b6 95       	lsr	r27
     b72:	a7 95       	ror	r26
     b74:	97 95       	ror	r25
     b76:	87 95       	ror	r24
     b78:	3a 95       	dec	r19
     b7a:	d1 f7       	brne	.-12     	; 0xb70 <_ZN12MCP2515Class14filterExtendedEll+0x72>
     b7c:	80 76       	andi	r24, 0x60	; 96
     b7e:	99 27       	eor	r25, r25
     b80:	aa 27       	eor	r26, r26
     b82:	bb 27       	eor	r27, r27
     b84:	1e 2d       	mov	r17, r14
     b86:	13 70       	andi	r17, 0x03	; 3
     b88:	18 60       	ori	r17, 0x08	; 8
     b8a:	18 2b       	or	r17, r24
    writeRegister(REG_RXMnEID8(n), (mask >> 8) & 0xff);
     b8c:	4d 2c       	mov	r4, r13
     b8e:	5e 2c       	mov	r5, r14
     b90:	6f 2c       	mov	r6, r15
     b92:	77 24       	eor	r7, r7
     b94:	67 fc       	sbrc	r6, 7
     b96:	7a 94       	dec	r7
    return 0;
  }

  for (int n = 0; n < 2; n++) {
    // extended only
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM1);
     b98:	40 e4       	ldi	r20, 0x40	; 64
     b9a:	60 e6       	ldi	r22, 0x60	; 96
     b9c:	8d 81       	ldd	r24, Y+5	; 0x05
     b9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ba0:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM1);
     ba4:	40 e4       	ldi	r20, 0x40	; 64
     ba6:	60 e6       	ldi	r22, 0x60	; 96
     ba8:	8d 81       	ldd	r24, Y+5	; 0x05
     baa:	9e 81       	ldd	r25, Y+6	; 0x06
     bac:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>

    writeRegister(REG_RXMnSIDH(n), mask >> 21);
     bb0:	49 81       	ldd	r20, Y+1	; 0x01
     bb2:	60 e2       	ldi	r22, 0x20	; 32
     bb4:	8d 81       	ldd	r24, Y+5	; 0x05
     bb6:	9e 81       	ldd	r25, Y+6	; 0x06
     bb8:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnSIDL(n), (((mask >> 18) & 0x03) << 5) | FLAG_EXIDE | ((mask >> 16) & 0x03));
     bbc:	41 2f       	mov	r20, r17
     bbe:	61 e2       	ldi	r22, 0x21	; 33
     bc0:	8d 81       	ldd	r24, Y+5	; 0x05
     bc2:	9e 81       	ldd	r25, Y+6	; 0x06
     bc4:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID8(n), (mask >> 8) & 0xff);
     bc8:	44 2d       	mov	r20, r4
     bca:	62 e2       	ldi	r22, 0x22	; 34
     bcc:	8d 81       	ldd	r24, Y+5	; 0x05
     bce:	9e 81       	ldd	r25, Y+6	; 0x06
     bd0:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID0(n), mask & 0xff);
     bd4:	4c 2d       	mov	r20, r12
     bd6:	63 e2       	ldi	r22, 0x23	; 35
     bd8:	8d 81       	ldd	r24, Y+5	; 0x05
     bda:	9e 81       	ldd	r25, Y+6	; 0x06
     bdc:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    return 0;
  }

  for (int n = 0; n < 2; n++) {
    // extended only
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM1);
     be0:	40 e4       	ldi	r20, 0x40	; 64
     be2:	60 e7       	ldi	r22, 0x70	; 112
     be4:	8d 81       	ldd	r24, Y+5	; 0x05
     be6:	9e 81       	ldd	r25, Y+6	; 0x06
     be8:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM1);
     bec:	40 e4       	ldi	r20, 0x40	; 64
     bee:	60 e7       	ldi	r22, 0x70	; 112
     bf0:	8d 81       	ldd	r24, Y+5	; 0x05
     bf2:	9e 81       	ldd	r25, Y+6	; 0x06
     bf4:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>

    writeRegister(REG_RXMnSIDH(n), mask >> 21);
     bf8:	49 81       	ldd	r20, Y+1	; 0x01
     bfa:	64 e2       	ldi	r22, 0x24	; 36
     bfc:	8d 81       	ldd	r24, Y+5	; 0x05
     bfe:	9e 81       	ldd	r25, Y+6	; 0x06
     c00:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnSIDL(n), (((mask >> 18) & 0x03) << 5) | FLAG_EXIDE | ((mask >> 16) & 0x03));
     c04:	41 2f       	mov	r20, r17
     c06:	65 e2       	ldi	r22, 0x25	; 37
     c08:	8d 81       	ldd	r24, Y+5	; 0x05
     c0a:	9e 81       	ldd	r25, Y+6	; 0x06
     c0c:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID8(n), (mask >> 8) & 0xff);
     c10:	44 2d       	mov	r20, r4
     c12:	66 e2       	ldi	r22, 0x26	; 38
     c14:	8d 81       	ldd	r24, Y+5	; 0x05
     c16:	9e 81       	ldd	r25, Y+6	; 0x06
     c18:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID0(n), mask & 0xff);
     c1c:	4c 2d       	mov	r20, r12
     c1e:	67 e2       	ldi	r22, 0x27	; 39
     c20:	8d 81       	ldd	r24, Y+5	; 0x05
     c22:	9e 81       	ldd	r25, Y+6	; 0x06
     c24:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
  return 1;
}

int MCP2515Class::filterExtended(long id, long mask)
{
  id &= 0x1FFFFFFF;
     c28:	9f e1       	ldi	r25, 0x1F	; 31
     c2a:	b9 22       	and	r11, r25
    writeRegister(REG_RXMnEID8(n), (mask >> 8) & 0xff);
    writeRegister(REG_RXMnEID0(n), mask & 0xff);
  }

  for (int n = 0; n < 6; n++) {
    writeRegister(REG_RXFnSIDH(n), id >> 21);
     c2c:	d5 01       	movw	r26, r10
     c2e:	c4 01       	movw	r24, r8
     c30:	55 e1       	ldi	r21, 0x15	; 21
     c32:	b5 95       	asr	r27
     c34:	a7 95       	ror	r26
     c36:	97 95       	ror	r25
     c38:	87 95       	ror	r24
     c3a:	5a 95       	dec	r21
     c3c:	d1 f7       	brne	.-12     	; 0xc32 <_ZN12MCP2515Class14filterExtendedEll+0x134>
     c3e:	e8 2e       	mov	r14, r24
    writeRegister(REG_RXFnSIDL(n), (((id >> 18) & 0x03) << 5) | FLAG_EXIDE | ((id >> 16) & 0x03));
     c40:	8a 2d       	mov	r24, r10
     c42:	83 70       	andi	r24, 0x03	; 3
     c44:	28 2f       	mov	r18, r24
     c46:	28 60       	ori	r18, 0x08	; 8
     c48:	d5 01       	movw	r26, r10
     c4a:	c4 01       	movw	r24, r8
     c4c:	6d e0       	ldi	r22, 0x0D	; 13
     c4e:	b6 95       	lsr	r27
     c50:	a7 95       	ror	r26
     c52:	97 95       	ror	r25
     c54:	87 95       	ror	r24
     c56:	6a 95       	dec	r22
     c58:	d1 f7       	brne	.-12     	; 0xc4e <_ZN12MCP2515Class14filterExtendedEll+0x150>
     c5a:	80 76       	andi	r24, 0x60	; 96
     c5c:	99 27       	eor	r25, r25
     c5e:	aa 27       	eor	r26, r26
     c60:	bb 27       	eor	r27, r27
     c62:	f2 2e       	mov	r15, r18
     c64:	f8 2a       	or	r15, r24
    writeRegister(REG_RXFnEID8(n), (id >> 8) & 0xff);
     c66:	d9 2c       	mov	r13, r9
     c68:	10 e0       	ldi	r17, 0x00	; 0
    writeRegister(REG_RXMnEID8(n), (mask >> 8) & 0xff);
    writeRegister(REG_RXMnEID0(n), mask & 0xff);
  }

  for (int n = 0; n < 6; n++) {
    writeRegister(REG_RXFnSIDH(n), id >> 21);
     c6a:	4e 2d       	mov	r20, r14
     c6c:	61 2f       	mov	r22, r17
     c6e:	8d 81       	ldd	r24, Y+5	; 0x05
     c70:	9e 81       	ldd	r25, Y+6	; 0x06
     c72:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXFnSIDL(n), (((id >> 18) & 0x03) << 5) | FLAG_EXIDE | ((id >> 16) & 0x03));
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	61 0f       	add	r22, r17
     c7a:	4f 2d       	mov	r20, r15
     c7c:	8d 81       	ldd	r24, Y+5	; 0x05
     c7e:	9e 81       	ldd	r25, Y+6	; 0x06
     c80:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXFnEID8(n), (id >> 8) & 0xff);
     c84:	62 e0       	ldi	r22, 0x02	; 2
     c86:	61 0f       	add	r22, r17
     c88:	4d 2d       	mov	r20, r13
     c8a:	8d 81       	ldd	r24, Y+5	; 0x05
     c8c:	9e 81       	ldd	r25, Y+6	; 0x06
     c8e:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXFnEID0(n), id & 0xff);
     c92:	63 e0       	ldi	r22, 0x03	; 3
     c94:	61 0f       	add	r22, r17
     c96:	48 2d       	mov	r20, r8
     c98:	8d 81       	ldd	r24, Y+5	; 0x05
     c9a:	9e 81       	ldd	r25, Y+6	; 0x06
     c9c:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
     ca0:	1c 5f       	subi	r17, 0xFC	; 252
    writeRegister(REG_RXMnSIDL(n), (((mask >> 18) & 0x03) << 5) | FLAG_EXIDE | ((mask >> 16) & 0x03));
    writeRegister(REG_RXMnEID8(n), (mask >> 8) & 0xff);
    writeRegister(REG_RXMnEID0(n), mask & 0xff);
  }

  for (int n = 0; n < 6; n++) {
     ca2:	18 31       	cpi	r17, 0x18	; 24
     ca4:	11 f7       	brne	.-60     	; 0xc6a <_ZN12MCP2515Class14filterExtendedEll+0x16c>
    writeRegister(REG_RXFnEID8(n), (id >> 8) & 0xff);
    writeRegister(REG_RXFnEID0(n), id & 0xff);
  }

  // normal mode
  writeRegister(REG_CANCTRL, 0x00);
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	6f e0       	ldi	r22, 0x0F	; 15
     caa:	8d 81       	ldd	r24, Y+5	; 0x05
     cac:	9e 81       	ldd	r25, Y+6	; 0x06
     cae:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x00) {
     cb2:	6f e0       	ldi	r22, 0x0F	; 15
     cb4:	8d 81       	ldd	r24, Y+5	; 0x05
     cb6:	9e 81       	ldd	r25, Y+6	; 0x06
     cb8:	0e 94 80 03 	call	0x700	; 0x700 <_ZN12MCP2515Class12readRegisterEh>
  mask &= 0x1FFFFFFF;

  // config mode
  writeRegister(REG_CANCTRL, 0x80);
  if (readRegister(REG_CANCTRL) != 0x80) {
    return 0;
     cbc:	21 e0       	ldi	r18, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	81 11       	cpse	r24, r1
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	82 2f       	mov	r24, r18
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <_ZN12MCP2515Class14filterExtendedEll+0x1ce>
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
  if (readRegister(REG_CANCTRL) != 0x00) {
    return 0;
  }

  return 1;
}
     ccc:	26 96       	adiw	r28, 0x06	; 6
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	de bf       	out	0x3e, r29	; 62
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	cd bf       	out	0x3d, r28	; 61
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	df 90       	pop	r13
     ce6:	cf 90       	pop	r12
     ce8:	bf 90       	pop	r11
     cea:	af 90       	pop	r10
     cec:	9f 90       	pop	r9
     cee:	8f 90       	pop	r8
     cf0:	7f 90       	pop	r7
     cf2:	6f 90       	pop	r6
     cf4:	5f 90       	pop	r5
     cf6:	4f 90       	pop	r4
     cf8:	08 95       	ret

00000cfa <_ZN12MCP2515Class7observeEv>:

int MCP2515Class::observe()
{
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	ec 01       	movw	r28, r24
  writeRegister(REG_CANCTRL, 0x80);
     d00:	40 e8       	ldi	r20, 0x80	; 128
     d02:	6f e0       	ldi	r22, 0x0F	; 15
     d04:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x80) {
     d08:	6f e0       	ldi	r22, 0x0F	; 15
     d0a:	ce 01       	movw	r24, r28
     d0c:	0e 94 80 03 	call	0x700	; 0x700 <_ZN12MCP2515Class12readRegisterEh>
     d10:	21 e0       	ldi	r18, 0x01	; 1
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	80 38       	cpi	r24, 0x80	; 128
     d16:	11 f0       	breq	.+4      	; 0xd1c <_ZN12MCP2515Class7observeEv+0x22>
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
  }

  return 1;
}
     d1c:	c9 01       	movw	r24, r18
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	08 95       	ret

00000d24 <_ZN12MCP2515Class8loopbackEv>:

int MCP2515Class::loopback()
{
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	ec 01       	movw	r28, r24
  writeRegister(REG_CANCTRL, 0x40);
     d2a:	40 e4       	ldi	r20, 0x40	; 64
     d2c:	6f e0       	ldi	r22, 0x0F	; 15
     d2e:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x40) {
     d32:	6f e0       	ldi	r22, 0x0F	; 15
     d34:	ce 01       	movw	r24, r28
     d36:	0e 94 80 03 	call	0x700	; 0x700 <_ZN12MCP2515Class12readRegisterEh>
     d3a:	21 e0       	ldi	r18, 0x01	; 1
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	80 34       	cpi	r24, 0x40	; 64
     d40:	11 f0       	breq	.+4      	; 0xd46 <_ZN12MCP2515Class8loopbackEv+0x22>
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
  }

  return 1;
}
     d46:	c9 01       	movw	r24, r18
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	08 95       	ret

00000d4e <_ZN12MCP2515Class5sleepEv>:

int MCP2515Class::sleep()
{
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	ec 01       	movw	r28, r24
  writeRegister(REG_CANCTRL, 0x01);
     d54:	41 e0       	ldi	r20, 0x01	; 1
     d56:	6f e0       	ldi	r22, 0x0F	; 15
     d58:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x01) {
     d5c:	6f e0       	ldi	r22, 0x0F	; 15
     d5e:	ce 01       	movw	r24, r28
     d60:	0e 94 80 03 	call	0x700	; 0x700 <_ZN12MCP2515Class12readRegisterEh>
     d64:	21 e0       	ldi	r18, 0x01	; 1
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 30       	cpi	r24, 0x01	; 1
     d6a:	11 f0       	breq	.+4      	; 0xd70 <_ZN12MCP2515Class5sleepEv+0x22>
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
  }

  return 1;
}
     d70:	c9 01       	movw	r24, r18
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	08 95       	ret

00000d78 <_ZN12MCP2515Class6wakeupEv>:

int MCP2515Class::wakeup()
{
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	ec 01       	movw	r28, r24
  writeRegister(REG_CANCTRL, 0x00);
     d7e:	40 e0       	ldi	r20, 0x00	; 0
     d80:	6f e0       	ldi	r22, 0x0F	; 15
     d82:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x00) {
     d86:	6f e0       	ldi	r22, 0x0F	; 15
     d88:	ce 01       	movw	r24, r28
     d8a:	0e 94 80 03 	call	0x700	; 0x700 <_ZN12MCP2515Class12readRegisterEh>
     d8e:	21 e0       	ldi	r18, 0x01	; 1
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	88 23       	and	r24, r24
     d94:	11 f0       	breq	.+4      	; 0xd9a <_ZN12MCP2515Class6wakeupEv+0x22>
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
  }

  return 1;
}
     d9a:	c9 01       	movw	r24, r18
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	08 95       	ret

00000da2 <_ZN12MCP2515Class5beginEl.part.3.constprop.6>:

MCP2515Class::~MCP2515Class()
{
}

int MCP2515Class::begin(long baudRate)
     da2:	8f 92       	push	r8
     da4:	9f 92       	push	r9
     da6:	af 92       	push	r10
     da8:	bf 92       	push	r11
     daa:	cf 92       	push	r12
     dac:	df 92       	push	r13
     dae:	ef 92       	push	r14
     db0:	ff 92       	push	r15
     db2:	0f 93       	push	r16
     db4:	1f 93       	push	r17
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	c8 50       	subi	r28, 0x08	; 8
     dc0:	d1 40       	sbci	r29, 0x01	; 1
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	cd bf       	out	0x3d, r28	; 61
    { (long)16E6,   (long)50E3, { 0x07, 0xfa, 0x87 } },
    { (long)16E6,   (long)40E3, { 0x07, 0xff, 0x87 } },
    { (long)16E6,   (long)20E3, { 0x0f, 0xff, 0x87 } },
    { (long)16E6,   (long)10E3, { 0x1f, 0xff, 0x87 } },
    { (long)16E6,    (long)5E3, { 0x3f, 0xff, 0x87 } },
  };
     dcc:	28 e0       	ldi	r18, 0x08	; 8
     dce:	31 e0       	ldi	r19, 0x01	; 1
     dd0:	e8 e1       	ldi	r30, 0x18	; 24
     dd2:	f1 e0       	ldi	r31, 0x01	; 1
     dd4:	de 01       	movw	r26, r28
     dd6:	11 96       	adiw	r26, 0x01	; 1
     dd8:	01 90       	ld	r0, Z+
     dda:	0d 92       	st	X+, r0
     ddc:	21 50       	subi	r18, 0x01	; 1
     dde:	30 40       	sbci	r19, 0x00	; 0
     de0:	d9 f7       	brne	.-10     	; 0xdd8 <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x36>

  const uint8_t* cnf = NULL;

  for (unsigned int i = 0; i < (sizeof(CNF_MAPPER) / sizeof(CNF_MAPPER[0])); i++) {
    if (CNF_MAPPER[i].clockFrequency == _clockFrequency && CNF_MAPPER[i].baudRate == baudRate) {
     de2:	fc 01       	movw	r30, r24
     de4:	c3 ac       	ldd	r12, Z+59	; 0x3b
     de6:	d4 ac       	ldd	r13, Z+60	; 0x3c
     de8:	e5 ac       	ldd	r14, Z+61	; 0x3d
     dea:	f6 ac       	ldd	r15, Z+62	; 0x3e
     dec:	fe 01       	movw	r30, r28
     dee:	31 96       	adiw	r30, 0x01	; 1
    { (long)16E6,    (long)5E3, { 0x3f, 0xff, 0x87 } },
  };

  const uint8_t* cnf = NULL;

  for (unsigned int i = 0; i < (sizeof(CNF_MAPPER) / sizeof(CNF_MAPPER[0])); i++) {
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
    if (CNF_MAPPER[i].clockFrequency == _clockFrequency && CNF_MAPPER[i].baudRate == baudRate) {
     df4:	80 80       	ld	r8, Z
     df6:	91 80       	ldd	r9, Z+1	; 0x01
     df8:	a2 80       	ldd	r10, Z+2	; 0x02
     dfa:	b3 80       	ldd	r11, Z+3	; 0x03
     dfc:	8c 14       	cp	r8, r12
     dfe:	9d 04       	cpc	r9, r13
     e00:	ae 04       	cpc	r10, r14
     e02:	bf 04       	cpc	r11, r15
     e04:	09 f0       	breq	.+2      	; 0xe08 <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x66>
     e06:	54 c0       	rjmp	.+168    	; 0xeb0 <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x10e>
     e08:	84 80       	ldd	r8, Z+4	; 0x04
     e0a:	95 80       	ldd	r9, Z+5	; 0x05
     e0c:	a6 80       	ldd	r10, Z+6	; 0x06
     e0e:	b7 80       	ldd	r11, Z+7	; 0x07
     e10:	84 16       	cp	r8, r20
     e12:	95 06       	cpc	r9, r21
     e14:	a6 06       	cpc	r10, r22
     e16:	b7 06       	cpc	r11, r23
     e18:	09 f0       	breq	.+2      	; 0xe1c <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x7a>
     e1a:	4a c0       	rjmp	.+148    	; 0xeb0 <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x10e>
     e1c:	8c 01       	movw	r16, r24
      cnf = CNF_MAPPER[i].cnf;
     e1e:	8b e0       	ldi	r24, 0x0B	; 11
     e20:	82 9f       	mul	r24, r18
     e22:	70 01       	movw	r14, r0
     e24:	83 9f       	mul	r24, r19
     e26:	f0 0c       	add	r15, r0
     e28:	11 24       	eor	r1, r1
     e2a:	f8 e0       	ldi	r31, 0x08	; 8
     e2c:	ef 0e       	add	r14, r31
     e2e:	f1 1c       	adc	r15, r1
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	8c 0f       	add	r24, r28
     e36:	9d 1f       	adc	r25, r29
     e38:	e8 0e       	add	r14, r24
     e3a:	f9 1e       	adc	r15, r25

  if (cnf == NULL) {
    return 0;
  }

  writeRegister(REG_CNF1, cnf[0]);
     e3c:	f7 01       	movw	r30, r14
     e3e:	40 81       	ld	r20, Z
     e40:	6a e2       	ldi	r22, 0x2A	; 42
     e42:	c8 01       	movw	r24, r16
     e44:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
  writeRegister(REG_CNF2, cnf[1]);
     e48:	f7 01       	movw	r30, r14
     e4a:	41 81       	ldd	r20, Z+1	; 0x01
     e4c:	69 e2       	ldi	r22, 0x29	; 41
     e4e:	c8 01       	movw	r24, r16
     e50:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
  writeRegister(REG_CNF3, cnf[2]);
     e54:	f7 01       	movw	r30, r14
     e56:	42 81       	ldd	r20, Z+2	; 0x02
     e58:	68 e2       	ldi	r22, 0x28	; 40
     e5a:	c8 01       	movw	r24, r16
     e5c:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>

  writeRegister(REG_CANINTE, FLAG_RXnIE(1) | FLAG_RXnIE(0));
     e60:	43 e0       	ldi	r20, 0x03	; 3
     e62:	6b e2       	ldi	r22, 0x2B	; 43
     e64:	c8 01       	movw	r24, r16
     e66:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
  writeRegister(REG_BFPCTRL, 0x00);
     e6a:	40 e0       	ldi	r20, 0x00	; 0
     e6c:	6c e0       	ldi	r22, 0x0C	; 12
     e6e:	c8 01       	movw	r24, r16
     e70:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
  writeRegister(REG_TXRTSCTRL, 0x00);
     e74:	40 e0       	ldi	r20, 0x00	; 0
     e76:	6d e0       	ldi	r22, 0x0D	; 13
     e78:	c8 01       	movw	r24, r16
     e7a:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
  writeRegister(REG_RXBnCTRL(0), FLAG_RXM1 | FLAG_RXM0);
     e7e:	40 e6       	ldi	r20, 0x60	; 96
     e80:	60 e6       	ldi	r22, 0x60	; 96
     e82:	c8 01       	movw	r24, r16
     e84:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
  writeRegister(REG_RXBnCTRL(1), FLAG_RXM1 | FLAG_RXM0);
     e88:	40 e6       	ldi	r20, 0x60	; 96
     e8a:	60 e7       	ldi	r22, 0x70	; 112
     e8c:	c8 01       	movw	r24, r16
     e8e:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>

  writeRegister(REG_CANCTRL, 0x00);
     e92:	40 e0       	ldi	r20, 0x00	; 0
     e94:	6f e0       	ldi	r22, 0x0F	; 15
     e96:	c8 01       	movw	r24, r16
     e98:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x00) {
     e9c:	6f e0       	ldi	r22, 0x0F	; 15
     e9e:	c8 01       	movw	r24, r16
     ea0:	0e 94 80 03 	call	0x700	; 0x700 <_ZN12MCP2515Class12readRegisterEh>
      break;
    }
  }

  if (cnf == NULL) {
    return 0;
     ea4:	21 e0       	ldi	r18, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	81 11       	cpse	r24, r1
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	82 2f       	mov	r24, r18
     eae:	09 c0       	rjmp	.+18     	; 0xec2 <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x120>
    { (long)16E6,    (long)5E3, { 0x3f, 0xff, 0x87 } },
  };

  const uint8_t* cnf = NULL;

  for (unsigned int i = 0; i < (sizeof(CNF_MAPPER) / sizeof(CNF_MAPPER[0])); i++) {
     eb0:	2f 5f       	subi	r18, 0xFF	; 255
     eb2:	3f 4f       	sbci	r19, 0xFF	; 255
     eb4:	3b 96       	adiw	r30, 0x0b	; 11
     eb6:	28 31       	cpi	r18, 0x18	; 24
     eb8:	31 05       	cpc	r19, r1
     eba:	09 f0       	breq	.+2      	; 0xebe <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x11c>
     ebc:	9b cf       	rjmp	.-202    	; 0xdf4 <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x52>
      break;
    }
  }

  if (cnf == NULL) {
    return 0;
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	90 e0       	ldi	r25, 0x00	; 0
  if (readRegister(REG_CANCTRL) != 0x00) {
    return 0;
  }

  return 1;
}
     ec2:	c8 5f       	subi	r28, 0xF8	; 248
     ec4:	de 4f       	sbci	r29, 0xFE	; 254
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	1f 91       	pop	r17
     ed6:	0f 91       	pop	r16
     ed8:	ff 90       	pop	r15
     eda:	ef 90       	pop	r14
     edc:	df 90       	pop	r13
     ede:	cf 90       	pop	r12
     ee0:	bf 90       	pop	r11
     ee2:	af 90       	pop	r10
     ee4:	9f 90       	pop	r9
     ee6:	8f 90       	pop	r8
     ee8:	08 95       	ret

00000eea <_GLOBAL__sub_I__ZN12MCP2515ClassC2Ev>:
void MCP2515Class::onInterrupt()
{
  CAN.handleInterrupt();
}

MCP2515Class CAN;
     eea:	8e ed       	ldi	r24, 0xDE	; 222
     eec:	93 e0       	ldi	r25, 0x03	; 3
     eee:	0c 94 46 03 	jmp	0x68c	; 0x68c <_ZN12MCP2515ClassC1Ev>

00000ef2 <_GLOBAL__sub_D__ZN12MCP2515ClassC2Ev>:
     ef2:	8e ed       	ldi	r24, 0xDE	; 222
     ef4:	93 e0       	ldi	r25, 0x03	; 3
     ef6:	0c 94 03 03 	jmp	0x606	; 0x606 <_ZN12MCP2515ClassD1Ev>

00000efa <_ZN12MCP2515Class5beginEl>:
MCP2515Class::~MCP2515Class()
{
}

int MCP2515Class::begin(long baudRate)
{
     efa:	cf 92       	push	r12
     efc:	df 92       	push	r13
     efe:	ef 92       	push	r14
     f00:	ff 92       	push	r15
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	ec 01       	movw	r28, r24
     f08:	6a 01       	movw	r12, r20
     f0a:	7b 01       	movw	r14, r22
  CANControllerClass::begin(baudRate);
     f0c:	0e 94 ed 01 	call	0x3da	; 0x3da <_ZN18CANControllerClass5beginEl>

  pinMode(_csPin, OUTPUT);
     f10:	61 e0       	ldi	r22, 0x01	; 1
     f12:	8f a9       	ldd	r24, Y+55	; 0x37
     f14:	0e 94 c6 0c 	call	0x198c	; 0x198c <pinMode>

  // start SPI
  SPI.begin();
     f18:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <_ZN8SPIClass5beginEv>

  reset();
     f1c:	ce 01       	movw	r24, r28
     f1e:	0e 94 66 03 	call	0x6cc	; 0x6cc <_ZN12MCP2515Class5resetEv>

  writeRegister(REG_CANCTRL, 0x80);
     f22:	40 e8       	ldi	r20, 0x80	; 128
     f24:	6f e0       	ldi	r22, 0x0F	; 15
     f26:	ce 01       	movw	r24, r28
     f28:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x80) {
     f2c:	6f e0       	ldi	r22, 0x0F	; 15
     f2e:	ce 01       	movw	r24, r28
     f30:	0e 94 80 03 	call	0x700	; 0x700 <_ZN12MCP2515Class12readRegisterEh>
     f34:	80 38       	cpi	r24, 0x80	; 128
     f36:	59 f4       	brne	.+22     	; 0xf4e <_ZN12MCP2515Class5beginEl+0x54>
     f38:	b7 01       	movw	r22, r14
     f3a:	a6 01       	movw	r20, r12
     f3c:	ce 01       	movw	r24, r28
  if (readRegister(REG_CANCTRL) != 0x00) {
    return 0;
  }

  return 1;
}
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	df 90       	pop	r13
     f48:	cf 90       	pop	r12
     f4a:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <_ZN12MCP2515Class5beginEl.part.3.constprop.6>
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	ff 90       	pop	r15
     f58:	ef 90       	pop	r14
     f5a:	df 90       	pop	r13
     f5c:	cf 90       	pop	r12
     f5e:	08 95       	ret

00000f60 <_ZN12MCP2515Class3endEv>:

void MCP2515Class::end()
{
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	ec 01       	movw	r28, r24
  SPI.end();
     f66:	0e 94 07 09 	call	0x120e	; 0x120e <_ZN8SPIClass3endEv>

  CANControllerClass::end();
     f6a:	ce 01       	movw	r24, r28
}
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28

void MCP2515Class::end()
{
  SPI.end();

  CANControllerClass::end();
     f70:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <_ZN18CANControllerClass3endEv>

00000f74 <_ZN12MCP2515Class9endPacketEv>:
}

int MCP2515Class::endPacket()
{
     f74:	ef 92       	push	r14
     f76:	ff 92       	push	r15
     f78:	0f 93       	push	r16
     f7a:	1f 93       	push	r17
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	ec 01       	movw	r28, r24
  if (!CANControllerClass::endPacket()) {
     f82:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN18CANControllerClass9endPacketEv>
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	09 f4       	brne	.+2      	; 0xf8c <_ZN12MCP2515Class9endPacketEv+0x18>
     f8a:	b4 c0       	rjmp	.+360    	; 0x10f4 <_ZN12MCP2515Class9endPacketEv+0x180>
    return 0;
  }

  int n = 0;

  if (_txExtended) {
     f8c:	8b 89       	ldd	r24, Y+19	; 0x13
     f8e:	4f 85       	ldd	r20, Y+15	; 0x0f
     f90:	58 89       	ldd	r21, Y+16	; 0x10
     f92:	69 89       	ldd	r22, Y+17	; 0x11
     f94:	7a 89       	ldd	r23, Y+18	; 0x12
     f96:	88 23       	and	r24, r24
     f98:	b9 f1       	breq	.+110    	; 0x1008 <_ZN12MCP2515Class9endPacketEv+0x94>
    writeRegister(REG_TXBnSIDH(n), _txId >> 21);
     f9a:	95 e1       	ldi	r25, 0x15	; 21
     f9c:	75 95       	asr	r23
     f9e:	67 95       	ror	r22
     fa0:	57 95       	ror	r21
     fa2:	47 95       	ror	r20
     fa4:	9a 95       	dec	r25
     fa6:	d1 f7       	brne	.-12     	; 0xf9c <_ZN12MCP2515Class9endPacketEv+0x28>
     fa8:	61 e3       	ldi	r22, 0x31	; 49
     faa:	ce 01       	movw	r24, r28
     fac:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_TXBnSIDL(n), (((_txId >> 18) & 0x07) << 5) | FLAG_EXIDE | ((_txId >> 16) & 0x03));
     fb0:	8f 85       	ldd	r24, Y+15	; 0x0f
     fb2:	98 89       	ldd	r25, Y+16	; 0x10
     fb4:	a9 89       	ldd	r26, Y+17	; 0x11
     fb6:	ba 89       	ldd	r27, Y+18	; 0x12
     fb8:	ac 01       	movw	r20, r24
     fba:	bd 01       	movw	r22, r26
     fbc:	22 e1       	ldi	r18, 0x12	; 18
     fbe:	75 95       	asr	r23
     fc0:	67 95       	ror	r22
     fc2:	57 95       	ror	r21
     fc4:	47 95       	ror	r20
     fc6:	2a 95       	dec	r18
     fc8:	d1 f7       	brne	.-12     	; 0xfbe <_ZN12MCP2515Class9endPacketEv+0x4a>
     fca:	35 e0       	ldi	r19, 0x05	; 5
     fcc:	44 0f       	add	r20, r20
     fce:	55 1f       	adc	r21, r21
     fd0:	66 1f       	adc	r22, r22
     fd2:	77 1f       	adc	r23, r23
     fd4:	3a 95       	dec	r19
     fd6:	d1 f7       	brne	.-12     	; 0xfcc <_ZN12MCP2515Class9endPacketEv+0x58>
     fd8:	8a 2f       	mov	r24, r26
     fda:	83 70       	andi	r24, 0x03	; 3
     fdc:	48 2b       	or	r20, r24
     fde:	48 60       	ori	r20, 0x08	; 8
     fe0:	62 e3       	ldi	r22, 0x32	; 50
     fe2:	ce 01       	movw	r24, r28
     fe4:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_TXBnEID8(n), (_txId >> 8) & 0xff);
     fe8:	4f 85       	ldd	r20, Y+15	; 0x0f
     fea:	58 89       	ldd	r21, Y+16	; 0x10
     fec:	69 89       	ldd	r22, Y+17	; 0x11
     fee:	7a 89       	ldd	r23, Y+18	; 0x12
     ff0:	45 2f       	mov	r20, r21
     ff2:	56 2f       	mov	r21, r22
     ff4:	67 2f       	mov	r22, r23
     ff6:	77 27       	eor	r23, r23
     ff8:	67 fd       	sbrc	r22, 7
     ffa:	7a 95       	dec	r23
     ffc:	63 e3       	ldi	r22, 0x33	; 51
     ffe:	ce 01       	movw	r24, r28
    1000:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_TXBnEID0(n), _txId & 0xff);
    1004:	4f 85       	ldd	r20, Y+15	; 0x0f
    1006:	19 c0       	rjmp	.+50     	; 0x103a <_ZN12MCP2515Class9endPacketEv+0xc6>
  } else {
    writeRegister(REG_TXBnSIDH(n), _txId >> 3);
    1008:	83 e0       	ldi	r24, 0x03	; 3
    100a:	75 95       	asr	r23
    100c:	67 95       	ror	r22
    100e:	57 95       	ror	r21
    1010:	47 95       	ror	r20
    1012:	8a 95       	dec	r24
    1014:	d1 f7       	brne	.-12     	; 0x100a <_ZN12MCP2515Class9endPacketEv+0x96>
    1016:	61 e3       	ldi	r22, 0x31	; 49
    1018:	ce 01       	movw	r24, r28
    101a:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_TXBnSIDL(n), _txId << 5);
    101e:	4f 85       	ldd	r20, Y+15	; 0x0f
    1020:	42 95       	swap	r20
    1022:	44 0f       	add	r20, r20
    1024:	40 7e       	andi	r20, 0xE0	; 224
    1026:	62 e3       	ldi	r22, 0x32	; 50
    1028:	ce 01       	movw	r24, r28
    102a:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_TXBnEID8(n), 0x00);
    102e:	40 e0       	ldi	r20, 0x00	; 0
    1030:	63 e3       	ldi	r22, 0x33	; 51
    1032:	ce 01       	movw	r24, r28
    1034:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_TXBnEID0(n), 0x00);
    1038:	40 e0       	ldi	r20, 0x00	; 0
    103a:	64 e3       	ldi	r22, 0x34	; 52
    103c:	ce 01       	movw	r24, r28
    103e:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
  }

  if (_txRtr) {
    1042:	8c 89       	ldd	r24, Y+20	; 0x14
    writeRegister(REG_TXBnDLC(n), 0x40 | _txLength);
    1044:	4f 89       	ldd	r20, Y+23	; 0x17
    writeRegister(REG_TXBnSIDL(n), _txId << 5);
    writeRegister(REG_TXBnEID8(n), 0x00);
    writeRegister(REG_TXBnEID0(n), 0x00);
  }

  if (_txRtr) {
    1046:	88 23       	and	r24, r24
    1048:	31 f0       	breq	.+12     	; 0x1056 <_ZN12MCP2515Class9endPacketEv+0xe2>
    writeRegister(REG_TXBnDLC(n), 0x40 | _txLength);
    104a:	40 64       	ori	r20, 0x40	; 64
    104c:	65 e3       	ldi	r22, 0x35	; 53
    104e:	ce 01       	movw	r24, r28
    1050:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    1054:	1a c0       	rjmp	.+52     	; 0x108a <_ZN12MCP2515Class9endPacketEv+0x116>
  } else {
    writeRegister(REG_TXBnDLC(n), _txLength);
    1056:	65 e3       	ldi	r22, 0x35	; 53
    1058:	ce 01       	movw	r24, r28
    105a:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
    105e:	7e 01       	movw	r14, r28
    1060:	89 e1       	ldi	r24, 0x19	; 25
    1062:	e8 0e       	add	r14, r24
    1064:	f1 1c       	adc	r15, r1

    for (int i = 0; i < _txLength; i++) {
    1066:	00 e0       	ldi	r16, 0x00	; 0
    1068:	10 e0       	ldi	r17, 0x00	; 0
    106a:	8f 89       	ldd	r24, Y+23	; 0x17
    106c:	98 8d       	ldd	r25, Y+24	; 0x18
    106e:	08 17       	cp	r16, r24
    1070:	19 07       	cpc	r17, r25
    1072:	5c f4       	brge	.+22     	; 0x108a <_ZN12MCP2515Class9endPacketEv+0x116>
      writeRegister(REG_TXBnD0(n) + i, _txData[i]);
    1074:	f7 01       	movw	r30, r14
    1076:	41 91       	ld	r20, Z+
    1078:	7f 01       	movw	r14, r30
    107a:	66 e3       	ldi	r22, 0x36	; 54
    107c:	60 0f       	add	r22, r16
    107e:	ce 01       	movw	r24, r28
    1080:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>
  if (_txRtr) {
    writeRegister(REG_TXBnDLC(n), 0x40 | _txLength);
  } else {
    writeRegister(REG_TXBnDLC(n), _txLength);

    for (int i = 0; i < _txLength; i++) {
    1084:	0f 5f       	subi	r16, 0xFF	; 255
    1086:	1f 4f       	sbci	r17, 0xFF	; 255
    1088:	f0 cf       	rjmp	.-32     	; 0x106a <_ZN12MCP2515Class9endPacketEv+0xf6>
      writeRegister(REG_TXBnD0(n) + i, _txData[i]);
    }
  }

  writeRegister(REG_TXBnCTRL(n), 0x08);
    108a:	48 e0       	ldi	r20, 0x08	; 8
    108c:	60 e3       	ldi	r22, 0x30	; 48
    108e:	ce 01       	movw	r24, r28
    1090:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN12MCP2515Class13writeRegisterEhh>

  bool aborted = false;
    1094:	10 e0       	ldi	r17, 0x00	; 0

  while (readRegister(REG_TXBnCTRL(n)) & 0x08) {
    1096:	60 e3       	ldi	r22, 0x30	; 48
    1098:	ce 01       	movw	r24, r28
    109a:	0e 94 80 03 	call	0x700	; 0x700 <_ZN12MCP2515Class12readRegisterEh>
    109e:	83 ff       	sbrs	r24, 3
    10a0:	10 c0       	rjmp	.+32     	; 0x10c2 <_ZN12MCP2515Class9endPacketEv+0x14e>
    if (readRegister(REG_TXBnCTRL(n)) & 0x10) {
    10a2:	60 e3       	ldi	r22, 0x30	; 48
    10a4:	ce 01       	movw	r24, r28
    10a6:	0e 94 80 03 	call	0x700	; 0x700 <_ZN12MCP2515Class12readRegisterEh>
    10aa:	84 ff       	sbrs	r24, 4
    10ac:	07 c0       	rjmp	.+14     	; 0x10bc <_ZN12MCP2515Class9endPacketEv+0x148>
      // abort
      aborted = true;

      modifyRegister(REG_CANCTRL, 0x10, 0x10);
    10ae:	20 e1       	ldi	r18, 0x10	; 16
    10b0:	40 e1       	ldi	r20, 0x10	; 16
    10b2:	6f e0       	ldi	r22, 0x0F	; 15
    10b4:	ce 01       	movw	r24, r28
    10b6:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN12MCP2515Class14modifyRegisterEhhh>
  bool aborted = false;

  while (readRegister(REG_TXBnCTRL(n)) & 0x08) {
    if (readRegister(REG_TXBnCTRL(n)) & 0x10) {
      // abort
      aborted = true;
    10ba:	11 e0       	ldi	r17, 0x01	; 1

      modifyRegister(REG_CANCTRL, 0x10, 0x10);
    }

    yield();
    10bc:	0e 94 1e 0b 	call	0x163c	; 0x163c <yield>
    10c0:	ea cf       	rjmp	.-44     	; 0x1096 <_ZN12MCP2515Class9endPacketEv+0x122>
  }

  if (aborted) {
    10c2:	11 23       	and	r17, r17
    10c4:	31 f0       	breq	.+12     	; 0x10d2 <_ZN12MCP2515Class9endPacketEv+0x15e>
    // clear abort command
    modifyRegister(REG_CANCTRL, 0x10, 0x00);
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	40 e1       	ldi	r20, 0x10	; 16
    10ca:	6f e0       	ldi	r22, 0x0F	; 15
    10cc:	ce 01       	movw	r24, r28
    10ce:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN12MCP2515Class14modifyRegisterEhhh>
  }

  modifyRegister(REG_CANINTF, FLAG_TXnIF(n), 0x00);
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	44 e0       	ldi	r20, 0x04	; 4
    10d6:	6c e2       	ldi	r22, 0x2C	; 44
    10d8:	ce 01       	movw	r24, r28
    10da:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN12MCP2515Class14modifyRegisterEhhh>

  return (readRegister(REG_TXBnCTRL(n)) & 0x70) ? 0 : 1;
    10de:	60 e3       	ldi	r22, 0x30	; 48
    10e0:	ce 01       	movw	r24, r28
    10e2:	0e 94 80 03 	call	0x700	; 0x700 <_ZN12MCP2515Class12readRegisterEh>
    10e6:	80 77       	andi	r24, 0x70	; 112
    10e8:	31 e0       	ldi	r19, 0x01	; 1
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	09 f0       	breq	.+2      	; 0x10f0 <_ZN12MCP2515Class9endPacketEv+0x17c>
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	83 2f       	mov	r24, r19
    10f2:	92 2f       	mov	r25, r18
}
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	ff 90       	pop	r15
    10fe:	ef 90       	pop	r14
    1100:	08 95       	ret

00001102 <_ZN12MCP2515Class9onReceiveEPFviE>:

  return _rxDlc;
}

void MCP2515Class::onReceive(void(*callback)(int))
{
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	ec 01       	movw	r28, r24
    110c:	8b 01       	movw	r16, r22
  CANControllerClass::onReceive(callback);
    110e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_ZN18CANControllerClass9onReceiveEPFviE>

  pinMode(_intPin, INPUT);
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	89 ad       	ldd	r24, Y+57	; 0x39
    1116:	0e 94 c6 0c 	call	0x198c	; 0x198c <pinMode>
    111a:	89 ad       	ldd	r24, Y+57	; 0x39
    111c:	9a ad       	ldd	r25, Y+58	; 0x3a

  if (callback) {
    111e:	01 2b       	or	r16, r17
    1120:	11 f1       	breq	.+68     	; 0x1166 <_ZN12MCP2515Class9onReceiveEPFviE+0x64>
    SPI.usingInterrupt(digitalPinToInterrupt(_intPin));
    1122:	82 30       	cpi	r24, 0x02	; 2
    1124:	91 05       	cpc	r25, r1
    1126:	21 f0       	breq	.+8      	; 0x1130 <_ZN12MCP2515Class9onReceiveEPFviE+0x2e>
    1128:	03 97       	sbiw	r24, 0x03	; 3
    112a:	21 f0       	breq	.+8      	; 0x1134 <_ZN12MCP2515Class9onReceiveEPFviE+0x32>
    112c:	8f ef       	ldi	r24, 0xFF	; 255
    112e:	03 c0       	rjmp	.+6      	; 0x1136 <_ZN12MCP2515Class9onReceiveEPFviE+0x34>
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	01 c0       	rjmp	.+2      	; 0x1136 <_ZN12MCP2515Class9onReceiveEPFviE+0x34>
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	0e 94 1b 09 	call	0x1236	; 0x1236 <_ZN8SPIClass14usingInterruptEh>
    attachInterrupt(digitalPinToInterrupt(_intPin), MCP2515Class::onInterrupt, LOW);
    113a:	89 ad       	ldd	r24, Y+57	; 0x39
    113c:	9a ad       	ldd	r25, Y+58	; 0x3a
    113e:	82 30       	cpi	r24, 0x02	; 2
    1140:	91 05       	cpc	r25, r1
    1142:	21 f0       	breq	.+8      	; 0x114c <_ZN12MCP2515Class9onReceiveEPFviE+0x4a>
    1144:	03 97       	sbiw	r24, 0x03	; 3
    1146:	21 f0       	breq	.+8      	; 0x1150 <_ZN12MCP2515Class9onReceiveEPFviE+0x4e>
    1148:	8f ef       	ldi	r24, 0xFF	; 255
    114a:	03 c0       	rjmp	.+6      	; 0x1152 <_ZN12MCP2515Class9onReceiveEPFviE+0x50>
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	01 c0       	rjmp	.+2      	; 0x1152 <_ZN12MCP2515Class9onReceiveEPFviE+0x50>
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	66 ec       	ldi	r22, 0xC6	; 198
    1158:	73 e0       	ldi	r23, 0x03	; 3
    detachInterrupt(digitalPinToInterrupt(_intPin));
#ifdef SPI_HAS_NOTUSINGINTERRUPT
    SPI.notUsingInterrupt(digitalPinToInterrupt(_intPin));
#endif
  }
}
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16

  pinMode(_intPin, INPUT);

  if (callback) {
    SPI.usingInterrupt(digitalPinToInterrupt(_intPin));
    attachInterrupt(digitalPinToInterrupt(_intPin), MCP2515Class::onInterrupt, LOW);
    1162:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <attachInterrupt>
  } else {
    detachInterrupt(digitalPinToInterrupt(_intPin));
    1166:	82 30       	cpi	r24, 0x02	; 2
    1168:	91 05       	cpc	r25, r1
    116a:	21 f0       	breq	.+8      	; 0x1174 <_ZN12MCP2515Class9onReceiveEPFviE+0x72>
    116c:	03 97       	sbiw	r24, 0x03	; 3
    116e:	21 f0       	breq	.+8      	; 0x1178 <_ZN12MCP2515Class9onReceiveEPFviE+0x76>
    1170:	8f ef       	ldi	r24, 0xFF	; 255
    1172:	03 c0       	rjmp	.+6      	; 0x117a <_ZN12MCP2515Class9onReceiveEPFviE+0x78>
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	01 c0       	rjmp	.+2      	; 0x117a <_ZN12MCP2515Class9onReceiveEPFviE+0x78>
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	0e 94 ad 0b 	call	0x175a	; 0x175a <detachInterrupt>
#ifdef SPI_HAS_NOTUSINGINTERRUPT
    SPI.notUsingInterrupt(digitalPinToInterrupt(_intPin));
    117e:	89 ad       	ldd	r24, Y+57	; 0x39
    1180:	9a ad       	ldd	r25, Y+58	; 0x3a
    1182:	82 30       	cpi	r24, 0x02	; 2
    1184:	91 05       	cpc	r25, r1
    1186:	21 f0       	breq	.+8      	; 0x1190 <_ZN12MCP2515Class9onReceiveEPFviE+0x8e>
    1188:	03 97       	sbiw	r24, 0x03	; 3
    118a:	21 f0       	breq	.+8      	; 0x1194 <_ZN12MCP2515Class9onReceiveEPFviE+0x92>
    118c:	8f ef       	ldi	r24, 0xFF	; 255
    118e:	03 c0       	rjmp	.+6      	; 0x1196 <_ZN12MCP2515Class9onReceiveEPFviE+0x94>
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	01 c0       	rjmp	.+2      	; 0x1196 <_ZN12MCP2515Class9onReceiveEPFviE+0x94>
    1194:	81 e0       	ldi	r24, 0x01	; 1
#endif
  }
}
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	1f 91       	pop	r17
    119c:	0f 91       	pop	r16
    SPI.usingInterrupt(digitalPinToInterrupt(_intPin));
    attachInterrupt(digitalPinToInterrupt(_intPin), MCP2515Class::onInterrupt, LOW);
  } else {
    detachInterrupt(digitalPinToInterrupt(_intPin));
#ifdef SPI_HAS_NOTUSINGINTERRUPT
    SPI.notUsingInterrupt(digitalPinToInterrupt(_intPin));
    119e:	0c 94 37 09 	jmp	0x126e	; 0x126e <_ZN8SPIClass17notUsingInterruptEh>

000011a2 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    11a2:	cf 93       	push	r28
  uint8_t sreg = SREG;
    11a4:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    11a6:	f8 94       	cli
  if (!initialized) {
    11a8:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <_ZN8SPIClass11initializedE>
    11ac:	81 11       	cpse	r24, r1
    11ae:	27 c0       	rjmp	.+78     	; 0x11fe <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    11b0:	ea e9       	ldi	r30, 0x9A	; 154
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    11b6:	e6 e8       	ldi	r30, 0x86	; 134
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    11bc:	e8 2f       	mov	r30, r24
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	ee 0f       	add	r30, r30
    11c2:	ff 1f       	adc	r31, r31
    11c4:	e2 55       	subi	r30, 0x52	; 82
    11c6:	ff 4f       	sbci	r31, 0xFF	; 255
    11c8:	a5 91       	lpm	r26, Z+
    11ca:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    11cc:	ec 91       	ld	r30, X
    11ce:	e9 23       	and	r30, r25
    11d0:	21 f4       	brne	.+8      	; 0x11da <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    11d2:	61 e0       	ldi	r22, 0x01	; 1
    11d4:	8a e0       	ldi	r24, 0x0A	; 10
    11d6:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    11da:	61 e0       	ldi	r22, 0x01	; 1
    11dc:	8a e0       	ldi	r24, 0x0A	; 10
    11de:	0e 94 c6 0c 	call	0x198c	; 0x198c <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    11e2:	8c b5       	in	r24, 0x2c	; 44
    11e4:	80 61       	ori	r24, 0x10	; 16
    11e6:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    11e8:	8c b5       	in	r24, 0x2c	; 44
    11ea:	80 64       	ori	r24, 0x40	; 64
    11ec:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    11ee:	61 e0       	ldi	r22, 0x01	; 1
    11f0:	8d e0       	ldi	r24, 0x0D	; 13
    11f2:	0e 94 c6 0c 	call	0x198c	; 0x198c <pinMode>
    pinMode(MOSI, OUTPUT);
    11f6:	61 e0       	ldi	r22, 0x01	; 1
    11f8:	8b e0       	ldi	r24, 0x0B	; 11
    11fa:	0e 94 c6 0c 	call	0x198c	; 0x198c <pinMode>
  }
  initialized++; // reference count
    11fe:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <_ZN8SPIClass11initializedE>
    1202:	8f 5f       	subi	r24, 0xFF	; 255
    1204:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    1208:	cf bf       	out	0x3f, r28	; 63
}
    120a:	cf 91       	pop	r28
    120c:	08 95       	ret

0000120e <_ZN8SPIClass3endEv>:

void SPIClass::end() {
  uint8_t sreg = SREG;
    120e:	9f b7       	in	r25, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    1210:	f8 94       	cli
  // Decrease the reference counter
  if (initialized)
    1212:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <_ZN8SPIClass11initializedE>
    1216:	88 23       	and	r24, r24
    1218:	19 f0       	breq	.+6      	; 0x1220 <_ZN8SPIClass3endEv+0x12>
    initialized--;
    121a:	81 50       	subi	r24, 0x01	; 1
    121c:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <_ZN8SPIClass11initializedE>
  // If there are no more references disable SPI
  if (!initialized) {
    1220:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <_ZN8SPIClass11initializedE>
    1224:	81 11       	cpse	r24, r1
    1226:	05 c0       	rjmp	.+10     	; 0x1232 <_ZN8SPIClass3endEv+0x24>
    SPCR &= ~_BV(SPE);
    1228:	8c b5       	in	r24, 0x2c	; 44
    122a:	8f 7b       	andi	r24, 0xBF	; 191
    122c:	8c bd       	out	0x2c, r24	; 44
    interruptMode = 0;
    122e:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <_ZN8SPIClass13interruptModeE>
    #ifdef SPI_TRANSACTION_MISMATCH_LED
    inTransactionFlag = 0;
    #endif
  }
  SREG = sreg;
    1232:	9f bf       	out	0x3f, r25	; 63
    1234:	08 95       	ret

00001236 <_ZN8SPIClass14usingInterruptEh>:
#endif

void SPIClass::usingInterrupt(uint8_t interruptNumber)
{
  uint8_t mask = 0;
  uint8_t sreg = SREG;
    1236:	9f b7       	in	r25, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    1238:	f8 94       	cli
  switch (interruptNumber) {
    123a:	88 23       	and	r24, r24
    123c:	49 f0       	breq	.+18     	; 0x1250 <_ZN8SPIClass14usingInterruptEh+0x1a>
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	11 f4       	brne	.+4      	; 0x1246 <_ZN8SPIClass14usingInterruptEh+0x10>
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
  #endif
  #ifdef SPI_INT1_MASK
  case 1: mask = SPI_INT1_MASK; break;
    1242:	82 e0       	ldi	r24, 0x02	; 2
    1244:	06 c0       	rjmp	.+12     	; 0x1252 <_ZN8SPIClass14usingInterruptEh+0x1c>
  #endif
  #ifdef SPI_INT7_MASK
  case 7: mask = SPI_INT7_MASK; break;
  #endif
  default:
    interruptMode = 2;
    1246:	82 e0       	ldi	r24, 0x02	; 2
    1248:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <_ZN8SPIClass13interruptModeE>
  #endif
#endif

void SPIClass::usingInterrupt(uint8_t interruptNumber)
{
  uint8_t mask = 0;
    124c:	80 e0       	ldi	r24, 0x00	; 0
  #ifdef SPI_INT7_MASK
  case 7: mask = SPI_INT7_MASK; break;
  #endif
  default:
    interruptMode = 2;
    break;
    124e:	01 c0       	rjmp	.+2      	; 0x1252 <_ZN8SPIClass14usingInterruptEh+0x1c>
  uint8_t mask = 0;
  uint8_t sreg = SREG;
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
  switch (interruptNumber) {
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
    1250:	81 e0       	ldi	r24, 0x01	; 1
  #endif
  default:
    interruptMode = 2;
    break;
  }
  interruptMask |= mask;
    1252:	20 91 1e 04 	lds	r18, 0x041E	; 0x80041e <_ZN8SPIClass13interruptMaskE>
    1256:	82 2b       	or	r24, r18
    1258:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <_ZN8SPIClass13interruptMaskE>
  if (!interruptMode)
    125c:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <_ZN8SPIClass13interruptModeE>
    1260:	81 11       	cpse	r24, r1
    1262:	03 c0       	rjmp	.+6      	; 0x126a <_ZN8SPIClass14usingInterruptEh+0x34>
    interruptMode = 1;
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <_ZN8SPIClass13interruptModeE>
  SREG = sreg;
    126a:	9f bf       	out	0x3f, r25	; 63
    126c:	08 95       	ret

0000126e <_ZN8SPIClass17notUsingInterruptEh>:
}

void SPIClass::notUsingInterrupt(uint8_t interruptNumber)
{
  // Once in mode 2 we can't go back to 0 without a proper reference count
  if (interruptMode == 2)
    126e:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <_ZN8SPIClass13interruptModeE>
    1272:	92 30       	cpi	r25, 0x02	; 2
    1274:	b1 f0       	breq	.+44     	; 0x12a2 <_ZN8SPIClass17notUsingInterruptEh+0x34>
    return;
  uint8_t mask = 0;
  uint8_t sreg = SREG;
    1276:	2f b7       	in	r18, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    1278:	f8 94       	cli
  switch (interruptNumber) {
    127a:	88 23       	and	r24, r24
    127c:	21 f0       	breq	.+8      	; 0x1286 <_ZN8SPIClass17notUsingInterruptEh+0x18>
    127e:	81 30       	cpi	r24, 0x01	; 1
    1280:	21 f4       	brne	.+8      	; 0x128a <_ZN8SPIClass17notUsingInterruptEh+0x1c>
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
  #endif
  #ifdef SPI_INT1_MASK
  case 1: mask = SPI_INT1_MASK; break;
    1282:	82 e0       	ldi	r24, 0x02	; 2
    1284:	03 c0       	rjmp	.+6      	; 0x128c <_ZN8SPIClass17notUsingInterruptEh+0x1e>
  uint8_t mask = 0;
  uint8_t sreg = SREG;
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
  switch (interruptNumber) {
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	01 c0       	rjmp	.+2      	; 0x128c <_ZN8SPIClass17notUsingInterruptEh+0x1e>
void SPIClass::notUsingInterrupt(uint8_t interruptNumber)
{
  // Once in mode 2 we can't go back to 0 without a proper reference count
  if (interruptMode == 2)
    return;
  uint8_t mask = 0;
    128a:	80 e0       	ldi	r24, 0x00	; 0
  #endif
  default:
    break;
    // this case can't be reached
  }
  interruptMask &= ~mask;
    128c:	80 95       	com	r24
    128e:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <_ZN8SPIClass13interruptMaskE>
    1292:	89 23       	and	r24, r25
    1294:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <_ZN8SPIClass13interruptMaskE>
  if (!interruptMask)
    1298:	81 11       	cpse	r24, r1
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <_ZN8SPIClass17notUsingInterruptEh+0x32>
    interruptMode = 0;
    129c:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <_ZN8SPIClass13interruptModeE>
  SREG = sreg;
    12a0:	2f bf       	out	0x3f, r18	; 63
    12a2:	08 95       	ret

000012a4 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    12a4:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    12a6:	91 8d       	ldd	r25, Z+25	; 0x19
    12a8:	22 8d       	ldd	r18, Z+26	; 0x1a
    12aa:	89 2f       	mov	r24, r25
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	80 5c       	subi	r24, 0xC0	; 192
    12b0:	9f 4f       	sbci	r25, 0xFF	; 255
    12b2:	82 1b       	sub	r24, r18
    12b4:	91 09       	sbc	r25, r1
}
    12b6:	8f 73       	andi	r24, 0x3F	; 63
    12b8:	99 27       	eor	r25, r25
    12ba:	08 95       	ret

000012bc <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    12bc:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    12be:	91 8d       	ldd	r25, Z+25	; 0x19
    12c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    12c2:	98 17       	cp	r25, r24
    12c4:	31 f0       	breq	.+12     	; 0x12d2 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    12c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    12c8:	e8 0f       	add	r30, r24
    12ca:	f1 1d       	adc	r31, r1
    12cc:	85 8d       	ldd	r24, Z+29	; 0x1d
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    12d2:	8f ef       	ldi	r24, 0xFF	; 255
    12d4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    12d6:	08 95       	ret

000012d8 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    12d8:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    12da:	91 8d       	ldd	r25, Z+25	; 0x19
    12dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    12de:	98 17       	cp	r25, r24
    12e0:	61 f0       	breq	.+24     	; 0x12fa <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    12e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    12e4:	df 01       	movw	r26, r30
    12e6:	a8 0f       	add	r26, r24
    12e8:	b1 1d       	adc	r27, r1
    12ea:	5d 96       	adiw	r26, 0x1d	; 29
    12ec:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    12ee:	92 8d       	ldd	r25, Z+26	; 0x1a
    12f0:	9f 5f       	subi	r25, 0xFF	; 255
    12f2:	9f 73       	andi	r25, 0x3F	; 63
    12f4:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    12fa:	8f ef       	ldi	r24, 0xFF	; 255
    12fc:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    12fe:	08 95       	ret

00001300 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    1300:	fc 01       	movw	r30, r24
    1302:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
    1304:	44 8d       	ldd	r20, Z+28	; 0x1c
    1306:	25 2f       	mov	r18, r21
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	84 2f       	mov	r24, r20
    130c:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    130e:	82 1b       	sub	r24, r18
    1310:	93 0b       	sbc	r25, r19
    1312:	54 17       	cp	r21, r20
    1314:	10 f0       	brcs	.+4      	; 0x131a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1316:	cf 96       	adiw	r24, 0x3f	; 63
    1318:	08 95       	ret
  return tail - head - 1;
    131a:	01 97       	sbiw	r24, 0x01	; 1
}
    131c:	08 95       	ret

0000131e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    131e:	87 ee       	ldi	r24, 0xE7	; 231
    1320:	9a e0       	ldi	r25, 0x0A	; 10
    1322:	89 2b       	or	r24, r25
    1324:	49 f0       	breq	.+18     	; 0x1338 <_Z14serialEventRunv+0x1a>
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	89 2b       	or	r24, r25
    132c:	29 f0       	breq	.+10     	; 0x1338 <_Z14serialEventRunv+0x1a>
    132e:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <_Z17Serial0_availablev>
    1332:	81 11       	cpse	r24, r1
    1334:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1338:	08 95       	ret

0000133a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    133a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    133c:	84 8d       	ldd	r24, Z+28	; 0x1c
    133e:	df 01       	movw	r26, r30
    1340:	a8 0f       	add	r26, r24
    1342:	b1 1d       	adc	r27, r1
    1344:	a3 5a       	subi	r26, 0xA3	; 163
    1346:	bf 4f       	sbci	r27, 0xFF	; 255
    1348:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    134a:	84 8d       	ldd	r24, Z+28	; 0x1c
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	01 96       	adiw	r24, 0x01	; 1
    1350:	8f 73       	andi	r24, 0x3F	; 63
    1352:	99 27       	eor	r25, r25
    1354:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1356:	a6 89       	ldd	r26, Z+22	; 0x16
    1358:	b7 89       	ldd	r27, Z+23	; 0x17
    135a:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    135c:	a0 89       	ldd	r26, Z+16	; 0x10
    135e:	b1 89       	ldd	r27, Z+17	; 0x11
    1360:	8c 91       	ld	r24, X
    1362:	80 64       	ori	r24, 0x40	; 64
    1364:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1366:	93 8d       	ldd	r25, Z+27	; 0x1b
    1368:	84 8d       	ldd	r24, Z+28	; 0x1c
    136a:	98 13       	cpse	r25, r24
    136c:	06 c0       	rjmp	.+12     	; 0x137a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    136e:	02 88       	ldd	r0, Z+18	; 0x12
    1370:	f3 89       	ldd	r31, Z+19	; 0x13
    1372:	e0 2d       	mov	r30, r0
    1374:	80 81       	ld	r24, Z
    1376:	8f 7d       	andi	r24, 0xDF	; 223
    1378:	80 83       	st	Z, r24
    137a:	08 95       	ret

0000137c <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    137c:	ef 92       	push	r14
    137e:	ff 92       	push	r15
    1380:	0f 93       	push	r16
    1382:	1f 93       	push	r17
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
    1388:	ec 01       	movw	r28, r24
  _written = true;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    138e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1390:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1392:	98 13       	cpse	r25, r24
    1394:	05 c0       	rjmp	.+10     	; 0x13a0 <_ZN14HardwareSerial5writeEh+0x24>
    1396:	e8 89       	ldd	r30, Y+16	; 0x10
    1398:	f9 89       	ldd	r31, Y+17	; 0x11
    139a:	80 81       	ld	r24, Z
    139c:	85 fd       	sbrc	r24, 5
    139e:	24 c0       	rjmp	.+72     	; 0x13e8 <_ZN14HardwareSerial5writeEh+0x6c>
    13a0:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    13a2:	0b 8d       	ldd	r16, Y+27	; 0x1b
    13a4:	10 e0       	ldi	r17, 0x00	; 0
    13a6:	0f 5f       	subi	r16, 0xFF	; 255
    13a8:	1f 4f       	sbci	r17, 0xFF	; 255
    13aa:	0f 73       	andi	r16, 0x3F	; 63
    13ac:	11 27       	eor	r17, r17
    13ae:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    13b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13b2:	e8 12       	cpse	r14, r24
    13b4:	0c c0       	rjmp	.+24     	; 0x13ce <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	07 fc       	sbrc	r0, 7
    13ba:	fa cf       	rjmp	.-12     	; 0x13b0 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    13bc:	e8 89       	ldd	r30, Y+16	; 0x10
    13be:	f9 89       	ldd	r31, Y+17	; 0x11
    13c0:	80 81       	ld	r24, Z
    13c2:	85 ff       	sbrs	r24, 5
    13c4:	f5 cf       	rjmp	.-22     	; 0x13b0 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    13c6:	ce 01       	movw	r24, r28
    13c8:	0e 94 9d 09 	call	0x133a	; 0x133a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    13cc:	f1 cf       	rjmp	.-30     	; 0x13b0 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    13ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13d0:	fe 01       	movw	r30, r28
    13d2:	e8 0f       	add	r30, r24
    13d4:	f1 1d       	adc	r31, r1
    13d6:	e3 5a       	subi	r30, 0xA3	; 163
    13d8:	ff 4f       	sbci	r31, 0xFF	; 255
    13da:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    13dc:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    13de:	ea 89       	ldd	r30, Y+18	; 0x12
    13e0:	fb 89       	ldd	r31, Y+19	; 0x13
    13e2:	80 81       	ld	r24, Z
    13e4:	80 62       	ori	r24, 0x20	; 32
    13e6:	07 c0       	rjmp	.+14     	; 0x13f6 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    13e8:	ee 89       	ldd	r30, Y+22	; 0x16
    13ea:	ff 89       	ldd	r31, Y+23	; 0x17
    13ec:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    13ee:	e8 89       	ldd	r30, Y+16	; 0x10
    13f0:	f9 89       	ldd	r31, Y+17	; 0x11
    13f2:	80 81       	ld	r24, Z
    13f4:	80 64       	ori	r24, 0x40	; 64
    13f6:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	1f 91       	pop	r17
    1402:	0f 91       	pop	r16
    1404:	ff 90       	pop	r15
    1406:	ef 90       	pop	r14
    1408:	08 95       	ret

0000140a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
    140e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1410:	88 8d       	ldd	r24, Y+24	; 0x18
    1412:	88 23       	and	r24, r24
    1414:	c9 f0       	breq	.+50     	; 0x1448 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1416:	ea 89       	ldd	r30, Y+18	; 0x12
    1418:	fb 89       	ldd	r31, Y+19	; 0x13
    141a:	80 81       	ld	r24, Z
    141c:	85 fd       	sbrc	r24, 5
    141e:	05 c0       	rjmp	.+10     	; 0x142a <_ZN14HardwareSerial5flushEv+0x20>
    1420:	a8 89       	ldd	r26, Y+16	; 0x10
    1422:	b9 89       	ldd	r27, Y+17	; 0x11
    1424:	8c 91       	ld	r24, X
    1426:	86 fd       	sbrc	r24, 6
    1428:	0f c0       	rjmp	.+30     	; 0x1448 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	07 fc       	sbrc	r0, 7
    142e:	f5 cf       	rjmp	.-22     	; 0x141a <_ZN14HardwareSerial5flushEv+0x10>
    1430:	80 81       	ld	r24, Z
    1432:	85 ff       	sbrs	r24, 5
    1434:	f2 cf       	rjmp	.-28     	; 0x141a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1436:	a8 89       	ldd	r26, Y+16	; 0x10
    1438:	b9 89       	ldd	r27, Y+17	; 0x11
    143a:	8c 91       	ld	r24, X
    143c:	85 ff       	sbrs	r24, 5
    143e:	ed cf       	rjmp	.-38     	; 0x141a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1440:	ce 01       	movw	r24, r28
    1442:	0e 94 9d 09 	call	0x133a	; 0x133a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1446:	e7 cf       	rjmp	.-50     	; 0x1416 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	08 95       	ret

0000144e <_ZN14HardwareSerial5beginEmh>:
	begin(baud, SERIAL_8N1); 
}


void HardwareSerial::begin(unsigned long baud, byte config)
{
    144e:	cf 92       	push	r12
    1450:	df 92       	push	r13
    1452:	ef 92       	push	r14
    1454:	ff 92       	push	r15
    1456:	1f 93       	push	r17
    1458:	cf 93       	push	r28
    145a:	df 93       	push	r29
    145c:	ec 01       	movw	r28, r24
    145e:	6a 01       	movw	r12, r20
    1460:	7b 01       	movw	r14, r22
    1462:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1464:	e8 89       	ldd	r30, Y+16	; 0x10
    1466:	f9 89       	ldd	r31, Y+17	; 0x11
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    146c:	41 15       	cp	r20, r1
    146e:	51 4e       	sbci	r21, 0xE1	; 225
    1470:	61 05       	cpc	r22, r1
    1472:	71 05       	cpc	r23, r1
    1474:	b1 f0       	breq	.+44     	; 0x14a2 <_ZN14HardwareSerial5beginEmh+0x54>


void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	79 e0       	ldi	r23, 0x09	; 9
    147a:	8d e3       	ldi	r24, 0x3D	; 61
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	a7 01       	movw	r20, r14
    1480:	96 01       	movw	r18, r12
    1482:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__udivmodsi4>
    1486:	da 01       	movw	r26, r20
    1488:	c9 01       	movw	r24, r18
    148a:	01 97       	sbiw	r24, 0x01	; 1
    148c:	a1 09       	sbc	r26, r1
    148e:	b1 09       	sbc	r27, r1
    1490:	b6 95       	lsr	r27
    1492:	a7 95       	ror	r26
    1494:	97 95       	ror	r25
    1496:	87 95       	ror	r24
    1498:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    149a:	21 15       	cp	r18, r1
    149c:	80 e1       	ldi	r24, 0x10	; 16
    149e:	38 07       	cpc	r19, r24
    14a0:	a8 f0       	brcs	.+42     	; 0x14cc <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    14a2:	e8 89       	ldd	r30, Y+16	; 0x10
    14a4:	f9 89       	ldd	r31, Y+17	; 0x11
    14a6:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    14a8:	60 e8       	ldi	r22, 0x80	; 128
    14aa:	74 e8       	ldi	r23, 0x84	; 132
    14ac:	8e e1       	ldi	r24, 0x1E	; 30
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	a7 01       	movw	r20, r14
    14b2:	96 01       	movw	r18, r12
    14b4:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__udivmodsi4>
    14b8:	da 01       	movw	r26, r20
    14ba:	c9 01       	movw	r24, r18
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	a1 09       	sbc	r26, r1
    14c0:	b1 09       	sbc	r27, r1
    14c2:	b6 95       	lsr	r27
    14c4:	a7 95       	ror	r26
    14c6:	97 95       	ror	r25
    14c8:	87 95       	ror	r24
    14ca:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    14cc:	ec 85       	ldd	r30, Y+12	; 0x0c
    14ce:	fd 85       	ldd	r31, Y+13	; 0x0d
    14d0:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    14d2:	ee 85       	ldd	r30, Y+14	; 0x0e
    14d4:	ff 85       	ldd	r31, Y+15	; 0x0f
    14d6:	20 83       	st	Z, r18

  _written = false;
    14d8:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    14da:	ec 89       	ldd	r30, Y+20	; 0x14
    14dc:	fd 89       	ldd	r31, Y+21	; 0x15
    14de:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    14e0:	ea 89       	ldd	r30, Y+18	; 0x12
    14e2:	fb 89       	ldd	r31, Y+19	; 0x13
    14e4:	80 81       	ld	r24, Z
    14e6:	80 61       	ori	r24, 0x10	; 16
    14e8:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    14ea:	ea 89       	ldd	r30, Y+18	; 0x12
    14ec:	fb 89       	ldd	r31, Y+19	; 0x13
    14ee:	80 81       	ld	r24, Z
    14f0:	88 60       	ori	r24, 0x08	; 8
    14f2:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    14f4:	ea 89       	ldd	r30, Y+18	; 0x12
    14f6:	fb 89       	ldd	r31, Y+19	; 0x13
    14f8:	80 81       	ld	r24, Z
    14fa:	80 68       	ori	r24, 0x80	; 128
    14fc:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    14fe:	ea 89       	ldd	r30, Y+18	; 0x12
    1500:	fb 89       	ldd	r31, Y+19	; 0x13
    1502:	80 81       	ld	r24, Z
    1504:	8f 7d       	andi	r24, 0xDF	; 223
    1506:	80 83       	st	Z, r24
}
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	1f 91       	pop	r17
    150e:	ff 90       	pop	r15
    1510:	ef 90       	pop	r14
    1512:	df 90       	pop	r13
    1514:	cf 90       	pop	r12
    1516:	08 95       	ret

00001518 <_ZN14HardwareSerial5beginEm>:

// Public Methods //////////////////////////////////////////////////////////////
//selbst erstellt da inline Methoden irgendwie nicht immer funktionieren
void HardwareSerial::begin(unsigned long baud) 
{ 
	begin(baud, SERIAL_8N1); 
    1518:	26 e0       	ldi	r18, 0x06	; 6
    151a:	0c 94 27 0a 	jmp	0x144e	; 0x144e <_ZN14HardwareSerial5beginEmh>

0000151e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    151e:	1f 92       	push	r1
    1520:	0f 92       	push	r0
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	0f 92       	push	r0
    1526:	11 24       	eor	r1, r1
    1528:	2f 93       	push	r18
    152a:	8f 93       	push	r24
    152c:	9f 93       	push	r25
    152e:	ef 93       	push	r30
    1530:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1532:	e0 91 31 04 	lds	r30, 0x0431	; 0x800431 <Serial+0x10>
    1536:	f0 91 32 04 	lds	r31, 0x0432	; 0x800432 <Serial+0x11>
    153a:	80 81       	ld	r24, Z
    153c:	e0 91 37 04 	lds	r30, 0x0437	; 0x800437 <Serial+0x16>
    1540:	f0 91 38 04 	lds	r31, 0x0438	; 0x800438 <Serial+0x17>
    1544:	82 fd       	sbrc	r24, 2
    1546:	12 c0       	rjmp	.+36     	; 0x156c <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1548:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    154a:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <Serial+0x19>
    154e:	8f 5f       	subi	r24, 0xFF	; 255
    1550:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1552:	20 91 3b 04 	lds	r18, 0x043B	; 0x80043b <Serial+0x1a>
    1556:	82 17       	cp	r24, r18
    1558:	51 f0       	breq	.+20     	; 0x156e <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    155a:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <Serial+0x19>
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	ef 5d       	subi	r30, 0xDF	; 223
    1562:	fb 4f       	sbci	r31, 0xFB	; 251
    1564:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1566:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <Serial+0x19>
    156a:	01 c0       	rjmp	.+2      	; 0x156e <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    156c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    156e:	ff 91       	pop	r31
    1570:	ef 91       	pop	r30
    1572:	9f 91       	pop	r25
    1574:	8f 91       	pop	r24
    1576:	2f 91       	pop	r18
    1578:	0f 90       	pop	r0
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	0f 90       	pop	r0
    157e:	1f 90       	pop	r1
    1580:	18 95       	reti

00001582 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1582:	1f 92       	push	r1
    1584:	0f 92       	push	r0
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	0f 92       	push	r0
    158a:	11 24       	eor	r1, r1
    158c:	2f 93       	push	r18
    158e:	3f 93       	push	r19
    1590:	4f 93       	push	r20
    1592:	5f 93       	push	r21
    1594:	6f 93       	push	r22
    1596:	7f 93       	push	r23
    1598:	8f 93       	push	r24
    159a:	9f 93       	push	r25
    159c:	af 93       	push	r26
    159e:	bf 93       	push	r27
    15a0:	ef 93       	push	r30
    15a2:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    15a4:	81 e2       	ldi	r24, 0x21	; 33
    15a6:	94 e0       	ldi	r25, 0x04	; 4
    15a8:	0e 94 9d 09 	call	0x133a	; 0x133a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    15ac:	ff 91       	pop	r31
    15ae:	ef 91       	pop	r30
    15b0:	bf 91       	pop	r27
    15b2:	af 91       	pop	r26
    15b4:	9f 91       	pop	r25
    15b6:	8f 91       	pop	r24
    15b8:	7f 91       	pop	r23
    15ba:	6f 91       	pop	r22
    15bc:	5f 91       	pop	r21
    15be:	4f 91       	pop	r20
    15c0:	3f 91       	pop	r19
    15c2:	2f 91       	pop	r18
    15c4:	0f 90       	pop	r0
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	0f 90       	pop	r0
    15ca:	1f 90       	pop	r1
    15cc:	18 95       	reti

000015ce <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    15ce:	81 e2       	ldi	r24, 0x21	; 33
    15d0:	94 e0       	ldi	r25, 0x04	; 4
    15d2:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_ZN14HardwareSerial9availableEv>
    15d6:	21 e0       	ldi	r18, 0x01	; 1
    15d8:	89 2b       	or	r24, r25
    15da:	09 f4       	brne	.+2      	; 0x15de <_Z17Serial0_availablev+0x10>
    15dc:	20 e0       	ldi	r18, 0x00	; 0
}
    15de:	82 2f       	mov	r24, r18
    15e0:	08 95       	ret

000015e2 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    15e2:	e1 e2       	ldi	r30, 0x21	; 33
    15e4:	f4 e0       	ldi	r31, 0x04	; 4
    15e6:	13 82       	std	Z+3, r1	; 0x03
    15e8:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    15ea:	88 ee       	ldi	r24, 0xE8	; 232
    15ec:	93 e0       	ldi	r25, 0x03	; 3
    15ee:	a0 e0       	ldi	r26, 0x00	; 0
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	84 83       	std	Z+4, r24	; 0x04
    15f4:	95 83       	std	Z+5, r25	; 0x05
    15f6:	a6 83       	std	Z+6, r26	; 0x06
    15f8:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    15fa:	8d eb       	ldi	r24, 0xBD	; 189
    15fc:	93 e0       	ldi	r25, 0x03	; 3
    15fe:	91 83       	std	Z+1, r25	; 0x01
    1600:	80 83       	st	Z, r24
    1602:	85 ec       	ldi	r24, 0xC5	; 197
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	95 87       	std	Z+13, r25	; 0x0d
    1608:	84 87       	std	Z+12, r24	; 0x0c
    160a:	84 ec       	ldi	r24, 0xC4	; 196
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	97 87       	std	Z+15, r25	; 0x0f
    1610:	86 87       	std	Z+14, r24	; 0x0e
    1612:	80 ec       	ldi	r24, 0xC0	; 192
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	91 8b       	std	Z+17, r25	; 0x11
    1618:	80 8b       	std	Z+16, r24	; 0x10
    161a:	81 ec       	ldi	r24, 0xC1	; 193
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	93 8b       	std	Z+19, r25	; 0x13
    1620:	82 8b       	std	Z+18, r24	; 0x12
    1622:	82 ec       	ldi	r24, 0xC2	; 194
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	95 8b       	std	Z+21, r25	; 0x15
    1628:	84 8b       	std	Z+20, r24	; 0x14
    162a:	86 ec       	ldi	r24, 0xC6	; 198
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	97 8b       	std	Z+23, r25	; 0x17
    1630:	86 8b       	std	Z+22, r24	; 0x16
    1632:	11 8e       	std	Z+25, r1	; 0x19
    1634:	12 8e       	std	Z+26, r1	; 0x1a
    1636:	13 8e       	std	Z+27, r1	; 0x1b
    1638:	14 8e       	std	Z+28, r1	; 0x1c
    163a:	08 95       	ret

0000163c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    163c:	08 95       	ret

0000163e <initVariant>:
    163e:	08 95       	ret

00001640 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1640:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <init>

	initVariant();
    1644:	0e 94 1f 0b 	call	0x163e	; 0x163e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1648:	0e 94 c2 00 	call	0x184	; 0x184 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    164c:	cf e8       	ldi	r28, 0x8F	; 143
    164e:	d9 e0       	ldi	r29, 0x09	; 9
#endif
	
	setup();
    
	for (;;) {
		loop();
    1650:	0e 94 89 00 	call	0x112	; 0x112 <loop>
		if (serialEventRun) serialEventRun();
    1654:	20 97       	sbiw	r28, 0x00	; 0
    1656:	e1 f3       	breq	.-8      	; 0x1650 <main+0x10>
    1658:	0e 94 8f 09 	call	0x131e	; 0x131e <_Z14serialEventRunv>
    165c:	f9 cf       	rjmp	.-14     	; 0x1650 <main+0x10>

0000165e <_ZdlPv>:
    165e:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <free>

00001662 <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
    1662:	cf 92       	push	r12
    1664:	df 92       	push	r13
    1666:	ef 92       	push	r14
    1668:	ff 92       	push	r15
    166a:	0f 93       	push	r16
    166c:	1f 93       	push	r17
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	6c 01       	movw	r12, r24
    1674:	7a 01       	movw	r14, r20
    1676:	8b 01       	movw	r16, r22
    1678:	c0 e0       	ldi	r28, 0x00	; 0
    167a:	d0 e0       	ldi	r29, 0x00	; 0
    167c:	ce 15       	cp	r28, r14
    167e:	df 05       	cpc	r29, r15
    1680:	81 f0       	breq	.+32     	; 0x16a2 <_ZN5Print5writeEPKhj+0x40>
    1682:	d8 01       	movw	r26, r16
    1684:	6d 91       	ld	r22, X+
    1686:	8d 01       	movw	r16, r26
    1688:	d6 01       	movw	r26, r12
    168a:	ed 91       	ld	r30, X+
    168c:	fc 91       	ld	r31, X
    168e:	01 90       	ld	r0, Z+
    1690:	f0 81       	ld	r31, Z
    1692:	e0 2d       	mov	r30, r0
    1694:	c6 01       	movw	r24, r12
    1696:	09 95       	icall
    1698:	89 2b       	or	r24, r25
    169a:	11 f0       	breq	.+4      	; 0x16a0 <_ZN5Print5writeEPKhj+0x3e>
    169c:	21 96       	adiw	r28, 0x01	; 1
    169e:	ee cf       	rjmp	.-36     	; 0x167c <_ZN5Print5writeEPKhj+0x1a>
    16a0:	7e 01       	movw	r14, r28
    16a2:	c7 01       	movw	r24, r14
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	1f 91       	pop	r17
    16aa:	0f 91       	pop	r16
    16ac:	ff 90       	pop	r15
    16ae:	ef 90       	pop	r14
    16b0:	df 90       	pop	r13
    16b2:	cf 90       	pop	r12
    16b4:	08 95       	ret

000016b6 <_ZN5Print5writeEPKc>:
    16b6:	61 15       	cp	r22, r1
    16b8:	71 05       	cpc	r23, r1
    16ba:	79 f0       	breq	.+30     	; 0x16da <_ZN5Print5writeEPKc+0x24>
    16bc:	fb 01       	movw	r30, r22
    16be:	01 90       	ld	r0, Z+
    16c0:	00 20       	and	r0, r0
    16c2:	e9 f7       	brne	.-6      	; 0x16be <_ZN5Print5writeEPKc+0x8>
    16c4:	31 97       	sbiw	r30, 0x01	; 1
    16c6:	af 01       	movw	r20, r30
    16c8:	46 1b       	sub	r20, r22
    16ca:	57 0b       	sbc	r21, r23
    16cc:	dc 01       	movw	r26, r24
    16ce:	ed 91       	ld	r30, X+
    16d0:	fc 91       	ld	r31, X
    16d2:	02 80       	ldd	r0, Z+2	; 0x02
    16d4:	f3 81       	ldd	r31, Z+3	; 0x03
    16d6:	e0 2d       	mov	r30, r0
    16d8:	09 94       	ijmp
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	08 95       	ret

000016e0 <_ZN5Print7printlnEv>:
    16e0:	6b ec       	ldi	r22, 0xCB	; 203
    16e2:	73 e0       	ldi	r23, 0x03	; 3
    16e4:	0c 94 5b 0b 	jmp	0x16b6	; 0x16b6 <_ZN5Print5writeEPKc>

000016e8 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    16e8:	0f 93       	push	r16
    16ea:	1f 93       	push	r17
    16ec:	cf 93       	push	r28
    16ee:	df 93       	push	r29
    16f0:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    16f2:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZN5Print5writeEPKc>
    16f6:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    16f8:	ce 01       	movw	r24, r28
    16fa:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <_ZN5Print7printlnEv>
  return n;
}
    16fe:	80 0f       	add	r24, r16
    1700:	91 1f       	adc	r25, r17
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	1f 91       	pop	r17
    1708:	0f 91       	pop	r16
    170a:	08 95       	ret

0000170c <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    170c:	fc 01       	movw	r30, r24
    170e:	44 83       	std	Z+4, r20	; 0x04
    1710:	55 83       	std	Z+5, r21	; 0x05
    1712:	66 83       	std	Z+6, r22	; 0x06
    1714:	77 83       	std	Z+7, r23	; 0x07
    1716:	08 95       	ret

00001718 <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
    1718:	08 95       	ret

0000171a <attachInterrupt>:
#endif
};
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    171a:	82 30       	cpi	r24, 0x02	; 2
    171c:	e8 f4       	brcc	.+58     	; 0x1758 <attachInterrupt+0x3e>
    intFunc[interruptNum] = userFunc;
    171e:	e8 2f       	mov	r30, r24
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	ee 0f       	add	r30, r30
    1724:	ff 1f       	adc	r31, r31
    1726:	ec 5e       	subi	r30, 0xEC	; 236
    1728:	fe 4f       	sbci	r31, 0xFE	; 254
    172a:	71 83       	std	Z+1, r23	; 0x01
    172c:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	41 f0       	breq	.+16     	; 0x1742 <attachInterrupt+0x28>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    1732:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1736:	8c 7f       	andi	r24, 0xFC	; 252
    1738:	48 2b       	or	r20, r24
    173a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
      EIMSK |= (1 << INT0);
    173e:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    1740:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    1742:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1746:	83 7f       	andi	r24, 0xF3	; 243
    1748:	44 0f       	add	r20, r20
    174a:	55 1f       	adc	r21, r21
    174c:	44 0f       	add	r20, r20
    174e:	55 1f       	adc	r21, r21
    1750:	48 2b       	or	r20, r24
    1752:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
      EIMSK |= (1 << INT1);
    1756:	e9 9a       	sbi	0x1d, 1	; 29
    1758:	08 95       	ret

0000175a <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    175a:	82 30       	cpi	r24, 0x02	; 2
    175c:	78 f4       	brcc	.+30     	; 0x177c <detachInterrupt+0x22>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    175e:	81 30       	cpi	r24, 0x01	; 1
    1760:	11 f0       	breq	.+4      	; 0x1766 <detachInterrupt+0xc>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    1762:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
    1764:	01 c0       	rjmp	.+2      	; 0x1768 <detachInterrupt+0xe>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    1766:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    1768:	e8 2f       	mov	r30, r24
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	ee 0f       	add	r30, r30
    176e:	ff 1f       	adc	r31, r31
    1770:	ec 5e       	subi	r30, 0xEC	; 236
    1772:	fe 4f       	sbci	r31, 0xFE	; 254
    1774:	8c e8       	ldi	r24, 0x8C	; 140
    1776:	9b e0       	ldi	r25, 0x0B	; 11
    1778:	91 83       	std	Z+1, r25	; 0x01
    177a:	80 83       	st	Z, r24
    177c:	08 95       	ret

0000177e <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    177e:	1f 92       	push	r1
    1780:	0f 92       	push	r0
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	0f 92       	push	r0
    1786:	11 24       	eor	r1, r1
    1788:	2f 93       	push	r18
    178a:	3f 93       	push	r19
    178c:	4f 93       	push	r20
    178e:	5f 93       	push	r21
    1790:	6f 93       	push	r22
    1792:	7f 93       	push	r23
    1794:	8f 93       	push	r24
    1796:	9f 93       	push	r25
    1798:	af 93       	push	r26
    179a:	bf 93       	push	r27
    179c:	ef 93       	push	r30
    179e:	ff 93       	push	r31
    17a0:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <intFunc>
    17a4:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <intFunc+0x1>
    17a8:	09 95       	icall
    17aa:	ff 91       	pop	r31
    17ac:	ef 91       	pop	r30
    17ae:	bf 91       	pop	r27
    17b0:	af 91       	pop	r26
    17b2:	9f 91       	pop	r25
    17b4:	8f 91       	pop	r24
    17b6:	7f 91       	pop	r23
    17b8:	6f 91       	pop	r22
    17ba:	5f 91       	pop	r21
    17bc:	4f 91       	pop	r20
    17be:	3f 91       	pop	r19
    17c0:	2f 91       	pop	r18
    17c2:	0f 90       	pop	r0
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	0f 90       	pop	r0
    17c8:	1f 90       	pop	r1
    17ca:	18 95       	reti

000017cc <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    17cc:	1f 92       	push	r1
    17ce:	0f 92       	push	r0
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	0f 92       	push	r0
    17d4:	11 24       	eor	r1, r1
    17d6:	2f 93       	push	r18
    17d8:	3f 93       	push	r19
    17da:	4f 93       	push	r20
    17dc:	5f 93       	push	r21
    17de:	6f 93       	push	r22
    17e0:	7f 93       	push	r23
    17e2:	8f 93       	push	r24
    17e4:	9f 93       	push	r25
    17e6:	af 93       	push	r26
    17e8:	bf 93       	push	r27
    17ea:	ef 93       	push	r30
    17ec:	ff 93       	push	r31
    17ee:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <intFunc+0x2>
    17f2:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <intFunc+0x3>
    17f6:	09 95       	icall
    17f8:	ff 91       	pop	r31
    17fa:	ef 91       	pop	r30
    17fc:	bf 91       	pop	r27
    17fe:	af 91       	pop	r26
    1800:	9f 91       	pop	r25
    1802:	8f 91       	pop	r24
    1804:	7f 91       	pop	r23
    1806:	6f 91       	pop	r22
    1808:	5f 91       	pop	r21
    180a:	4f 91       	pop	r20
    180c:	3f 91       	pop	r19
    180e:	2f 91       	pop	r18
    1810:	0f 90       	pop	r0
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	0f 90       	pop	r0
    1816:	1f 90       	pop	r1
    1818:	18 95       	reti

0000181a <__vector_16>:
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    181a:	1f 92       	push	r1
    181c:	0f 92       	push	r0
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	0f 92       	push	r0
    1822:	11 24       	eor	r1, r1
    1824:	2f 93       	push	r18
    1826:	3f 93       	push	r19
    1828:	8f 93       	push	r24
    182a:	9f 93       	push	r25
    182c:	af 93       	push	r26
    182e:	bf 93       	push	r27
    1830:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <timer0_millis>
    1834:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <timer0_millis+0x1>
    1838:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <timer0_millis+0x2>
    183c:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <timer0_millis+0x3>
    1840:	30 91 be 04 	lds	r19, 0x04BE	; 0x8004be <timer0_fract>
    1844:	23 e0       	ldi	r18, 0x03	; 3
    1846:	23 0f       	add	r18, r19
    1848:	2d 37       	cpi	r18, 0x7D	; 125
    184a:	20 f4       	brcc	.+8      	; 0x1854 <__vector_16+0x3a>
    184c:	01 96       	adiw	r24, 0x01	; 1
    184e:	a1 1d       	adc	r26, r1
    1850:	b1 1d       	adc	r27, r1
    1852:	05 c0       	rjmp	.+10     	; 0x185e <__vector_16+0x44>
    1854:	26 e8       	ldi	r18, 0x86	; 134
    1856:	23 0f       	add	r18, r19
    1858:	02 96       	adiw	r24, 0x02	; 2
    185a:	a1 1d       	adc	r26, r1
    185c:	b1 1d       	adc	r27, r1
    185e:	20 93 be 04 	sts	0x04BE, r18	; 0x8004be <timer0_fract>
    1862:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <timer0_millis>
    1866:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <timer0_millis+0x1>
    186a:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <timer0_millis+0x2>
    186e:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <timer0_millis+0x3>
    1872:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <timer0_overflow_count>
    1876:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <timer0_overflow_count+0x1>
    187a:	a0 91 c5 04 	lds	r26, 0x04C5	; 0x8004c5 <timer0_overflow_count+0x2>
    187e:	b0 91 c6 04 	lds	r27, 0x04C6	; 0x8004c6 <timer0_overflow_count+0x3>
    1882:	01 96       	adiw	r24, 0x01	; 1
    1884:	a1 1d       	adc	r26, r1
    1886:	b1 1d       	adc	r27, r1
    1888:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <timer0_overflow_count>
    188c:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <timer0_overflow_count+0x1>
    1890:	a0 93 c5 04 	sts	0x04C5, r26	; 0x8004c5 <timer0_overflow_count+0x2>
    1894:	b0 93 c6 04 	sts	0x04C6, r27	; 0x8004c6 <timer0_overflow_count+0x3>
    1898:	bf 91       	pop	r27
    189a:	af 91       	pop	r26
    189c:	9f 91       	pop	r25
    189e:	8f 91       	pop	r24
    18a0:	3f 91       	pop	r19
    18a2:	2f 91       	pop	r18
    18a4:	0f 90       	pop	r0
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	0f 90       	pop	r0
    18aa:	1f 90       	pop	r1
    18ac:	18 95       	reti

000018ae <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    18ae:	82 30       	cpi	r24, 0x02	; 2
    18b0:	91 05       	cpc	r25, r1
    18b2:	38 f0       	brcs	.+14     	; 0x18c2 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    18bc:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	f1 f7       	brne	.-4      	; 0x18be <delayMicroseconds+0x10>
    18c2:	08 95       	ret

000018c4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    18c4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    18c6:	84 b5       	in	r24, 0x24	; 36
    18c8:	82 60       	ori	r24, 0x02	; 2
    18ca:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    18cc:	84 b5       	in	r24, 0x24	; 36
    18ce:	81 60       	ori	r24, 0x01	; 1
    18d0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    18d2:	85 b5       	in	r24, 0x25	; 37
    18d4:	82 60       	ori	r24, 0x02	; 2
    18d6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    18d8:	85 b5       	in	r24, 0x25	; 37
    18da:	81 60       	ori	r24, 0x01	; 1
    18dc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    18de:	ee e6       	ldi	r30, 0x6E	; 110
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	81 60       	ori	r24, 0x01	; 1
    18e6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    18e8:	e1 e8       	ldi	r30, 0x81	; 129
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    18ee:	80 81       	ld	r24, Z
    18f0:	82 60       	ori	r24, 0x02	; 2
    18f2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    18f4:	80 81       	ld	r24, Z
    18f6:	81 60       	ori	r24, 0x01	; 1
    18f8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    18fa:	e0 e8       	ldi	r30, 0x80	; 128
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	81 60       	ori	r24, 0x01	; 1
    1902:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1904:	e1 eb       	ldi	r30, 0xB1	; 177
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	84 60       	ori	r24, 0x04	; 4
    190c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    190e:	e0 eb       	ldi	r30, 0xB0	; 176
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	81 60       	ori	r24, 0x01	; 1
    1916:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1918:	ea e7       	ldi	r30, 0x7A	; 122
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	84 60       	ori	r24, 0x04	; 4
    1920:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1922:	80 81       	ld	r24, Z
    1924:	82 60       	ori	r24, 0x02	; 2
    1926:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1928:	80 81       	ld	r24, Z
    192a:	81 60       	ori	r24, 0x01	; 1
    192c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    192e:	80 81       	ld	r24, Z
    1930:	80 68       	ori	r24, 0x80	; 128
    1932:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1934:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1938:	08 95       	ret

0000193a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    193a:	83 30       	cpi	r24, 0x03	; 3
    193c:	81 f0       	breq	.+32     	; 0x195e <turnOffPWM+0x24>
    193e:	28 f4       	brcc	.+10     	; 0x194a <turnOffPWM+0x10>
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	99 f0       	breq	.+38     	; 0x196a <turnOffPWM+0x30>
    1944:	82 30       	cpi	r24, 0x02	; 2
    1946:	a1 f0       	breq	.+40     	; 0x1970 <turnOffPWM+0x36>
    1948:	08 95       	ret
    194a:	87 30       	cpi	r24, 0x07	; 7
    194c:	a9 f0       	breq	.+42     	; 0x1978 <turnOffPWM+0x3e>
    194e:	88 30       	cpi	r24, 0x08	; 8
    1950:	b9 f0       	breq	.+46     	; 0x1980 <turnOffPWM+0x46>
    1952:	84 30       	cpi	r24, 0x04	; 4
    1954:	d1 f4       	brne	.+52     	; 0x198a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1956:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    195a:	8f 7d       	andi	r24, 0xDF	; 223
    195c:	03 c0       	rjmp	.+6      	; 0x1964 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    195e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1962:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1964:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1968:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    196a:	84 b5       	in	r24, 0x24	; 36
    196c:	8f 77       	andi	r24, 0x7F	; 127
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1970:	84 b5       	in	r24, 0x24	; 36
    1972:	8f 7d       	andi	r24, 0xDF	; 223
    1974:	84 bd       	out	0x24, r24	; 36
    1976:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1978:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    197c:	8f 77       	andi	r24, 0x7F	; 127
    197e:	03 c0       	rjmp	.+6      	; 0x1986 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1980:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1984:	8f 7d       	andi	r24, 0xDF	; 223
    1986:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    198a:	08 95       	ret

0000198c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    198c:	cf 93       	push	r28
    198e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	fc 01       	movw	r30, r24
    1994:	e4 58       	subi	r30, 0x84	; 132
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    199a:	fc 01       	movw	r30, r24
    199c:	e0 57       	subi	r30, 0x70	; 112
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    19a2:	88 23       	and	r24, r24
    19a4:	61 f1       	breq	.+88     	; 0x19fe <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	fc 01       	movw	r30, r24
    19ae:	e2 55       	subi	r30, 0x52	; 82
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	c5 91       	lpm	r28, Z+
    19b4:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    19b6:	fc 01       	movw	r30, r24
    19b8:	ec 55       	subi	r30, 0x5C	; 92
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	a5 91       	lpm	r26, Z+
    19be:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    19c0:	61 11       	cpse	r22, r1
    19c2:	09 c0       	rjmp	.+18     	; 0x19d6 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    19c4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    19c6:	f8 94       	cli
		*reg &= ~bit;
    19c8:	88 81       	ld	r24, Y
    19ca:	20 95       	com	r18
    19cc:	82 23       	and	r24, r18
    19ce:	88 83       	st	Y, r24
		*out &= ~bit;
    19d0:	ec 91       	ld	r30, X
    19d2:	2e 23       	and	r18, r30
    19d4:	0b c0       	rjmp	.+22     	; 0x19ec <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    19d6:	62 30       	cpi	r22, 0x02	; 2
    19d8:	61 f4       	brne	.+24     	; 0x19f2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    19da:	9f b7       	in	r25, 0x3f	; 63
                cli();
    19dc:	f8 94       	cli
		*reg &= ~bit;
    19de:	88 81       	ld	r24, Y
    19e0:	32 2f       	mov	r19, r18
    19e2:	30 95       	com	r19
    19e4:	83 23       	and	r24, r19
    19e6:	88 83       	st	Y, r24
		*out |= bit;
    19e8:	ec 91       	ld	r30, X
    19ea:	2e 2b       	or	r18, r30
    19ec:	2c 93       	st	X, r18
		SREG = oldSREG;
    19ee:	9f bf       	out	0x3f, r25	; 63
    19f0:	06 c0       	rjmp	.+12     	; 0x19fe <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    19f2:	8f b7       	in	r24, 0x3f	; 63
                cli();
    19f4:	f8 94       	cli
		*reg |= bit;
    19f6:	e8 81       	ld	r30, Y
    19f8:	2e 2b       	or	r18, r30
    19fa:	28 83       	st	Y, r18
		SREG = oldSREG;
    19fc:	8f bf       	out	0x3f, r24	; 63
	}
}
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	08 95       	ret

00001a04 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1a04:	1f 93       	push	r17
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	f9 01       	movw	r30, r18
    1a10:	e8 59       	subi	r30, 0x98	; 152
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1a16:	f9 01       	movw	r30, r18
    1a18:	e4 58       	subi	r30, 0x84	; 132
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1a1e:	f9 01       	movw	r30, r18
    1a20:	e0 57       	subi	r30, 0x70	; 112
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1a26:	cc 23       	and	r28, r28
    1a28:	c1 f0       	breq	.+48     	; 0x1a5a <digitalWrite+0x56>
    1a2a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1a2c:	81 11       	cpse	r24, r1
    1a2e:	0e 94 9d 0c 	call	0x193a	; 0x193a <turnOffPWM>

	out = portOutputRegister(port);
    1a32:	ec 2f       	mov	r30, r28
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	ee 0f       	add	r30, r30
    1a38:	ff 1f       	adc	r31, r31
    1a3a:	ec 55       	subi	r30, 0x5C	; 92
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	a5 91       	lpm	r26, Z+
    1a40:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1a42:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1a44:	f8 94       	cli

	if (val == LOW) {
    1a46:	11 11       	cpse	r17, r1
    1a48:	04 c0       	rjmp	.+8      	; 0x1a52 <digitalWrite+0x4e>
		*out &= ~bit;
    1a4a:	8c 91       	ld	r24, X
    1a4c:	d0 95       	com	r29
    1a4e:	d8 23       	and	r29, r24
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1a52:	ec 91       	ld	r30, X
    1a54:	de 2b       	or	r29, r30
    1a56:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1a58:	9f bf       	out	0x3f, r25	; 63
}
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	1f 91       	pop	r17
    1a60:	08 95       	ret

00001a62 <__udivmodsi4>:
    1a62:	a1 e2       	ldi	r26, 0x21	; 33
    1a64:	1a 2e       	mov	r1, r26
    1a66:	aa 1b       	sub	r26, r26
    1a68:	bb 1b       	sub	r27, r27
    1a6a:	fd 01       	movw	r30, r26
    1a6c:	0d c0       	rjmp	.+26     	; 0x1a88 <__udivmodsi4_ep>

00001a6e <__udivmodsi4_loop>:
    1a6e:	aa 1f       	adc	r26, r26
    1a70:	bb 1f       	adc	r27, r27
    1a72:	ee 1f       	adc	r30, r30
    1a74:	ff 1f       	adc	r31, r31
    1a76:	a2 17       	cp	r26, r18
    1a78:	b3 07       	cpc	r27, r19
    1a7a:	e4 07       	cpc	r30, r20
    1a7c:	f5 07       	cpc	r31, r21
    1a7e:	20 f0       	brcs	.+8      	; 0x1a88 <__udivmodsi4_ep>
    1a80:	a2 1b       	sub	r26, r18
    1a82:	b3 0b       	sbc	r27, r19
    1a84:	e4 0b       	sbc	r30, r20
    1a86:	f5 0b       	sbc	r31, r21

00001a88 <__udivmodsi4_ep>:
    1a88:	66 1f       	adc	r22, r22
    1a8a:	77 1f       	adc	r23, r23
    1a8c:	88 1f       	adc	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	1a 94       	dec	r1
    1a92:	69 f7       	brne	.-38     	; 0x1a6e <__udivmodsi4_loop>
    1a94:	60 95       	com	r22
    1a96:	70 95       	com	r23
    1a98:	80 95       	com	r24
    1a9a:	90 95       	com	r25
    1a9c:	9b 01       	movw	r18, r22
    1a9e:	ac 01       	movw	r20, r24
    1aa0:	bd 01       	movw	r22, r26
    1aa2:	cf 01       	movw	r24, r30
    1aa4:	08 95       	ret

00001aa6 <__tablejump2__>:
    1aa6:	ee 0f       	add	r30, r30
    1aa8:	ff 1f       	adc	r31, r31
    1aaa:	05 90       	lpm	r0, Z+
    1aac:	f4 91       	lpm	r31, Z
    1aae:	e0 2d       	mov	r30, r0
    1ab0:	09 94       	ijmp

00001ab2 <malloc>:
    1ab2:	0f 93       	push	r16
    1ab4:	1f 93       	push	r17
    1ab6:	cf 93       	push	r28
    1ab8:	df 93       	push	r29
    1aba:	82 30       	cpi	r24, 0x02	; 2
    1abc:	91 05       	cpc	r25, r1
    1abe:	10 f4       	brcc	.+4      	; 0x1ac4 <malloc+0x12>
    1ac0:	82 e0       	ldi	r24, 0x02	; 2
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	e0 91 c9 04 	lds	r30, 0x04C9	; 0x8004c9 <__flp>
    1ac8:	f0 91 ca 04 	lds	r31, 0x04CA	; 0x8004ca <__flp+0x1>
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	a0 e0       	ldi	r26, 0x00	; 0
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	30 97       	sbiw	r30, 0x00	; 0
    1ad6:	19 f1       	breq	.+70     	; 0x1b1e <malloc+0x6c>
    1ad8:	40 81       	ld	r20, Z
    1ada:	51 81       	ldd	r21, Z+1	; 0x01
    1adc:	02 81       	ldd	r16, Z+2	; 0x02
    1ade:	13 81       	ldd	r17, Z+3	; 0x03
    1ae0:	48 17       	cp	r20, r24
    1ae2:	59 07       	cpc	r21, r25
    1ae4:	c8 f0       	brcs	.+50     	; 0x1b18 <malloc+0x66>
    1ae6:	84 17       	cp	r24, r20
    1ae8:	95 07       	cpc	r25, r21
    1aea:	69 f4       	brne	.+26     	; 0x1b06 <malloc+0x54>
    1aec:	10 97       	sbiw	r26, 0x00	; 0
    1aee:	31 f0       	breq	.+12     	; 0x1afc <malloc+0x4a>
    1af0:	12 96       	adiw	r26, 0x02	; 2
    1af2:	0c 93       	st	X, r16
    1af4:	12 97       	sbiw	r26, 0x02	; 2
    1af6:	13 96       	adiw	r26, 0x03	; 3
    1af8:	1c 93       	st	X, r17
    1afa:	27 c0       	rjmp	.+78     	; 0x1b4a <malloc+0x98>
    1afc:	00 93 c9 04 	sts	0x04C9, r16	; 0x8004c9 <__flp>
    1b00:	10 93 ca 04 	sts	0x04CA, r17	; 0x8004ca <__flp+0x1>
    1b04:	22 c0       	rjmp	.+68     	; 0x1b4a <malloc+0x98>
    1b06:	21 15       	cp	r18, r1
    1b08:	31 05       	cpc	r19, r1
    1b0a:	19 f0       	breq	.+6      	; 0x1b12 <malloc+0x60>
    1b0c:	42 17       	cp	r20, r18
    1b0e:	53 07       	cpc	r21, r19
    1b10:	18 f4       	brcc	.+6      	; 0x1b18 <malloc+0x66>
    1b12:	9a 01       	movw	r18, r20
    1b14:	bd 01       	movw	r22, r26
    1b16:	ef 01       	movw	r28, r30
    1b18:	df 01       	movw	r26, r30
    1b1a:	f8 01       	movw	r30, r16
    1b1c:	db cf       	rjmp	.-74     	; 0x1ad4 <malloc+0x22>
    1b1e:	21 15       	cp	r18, r1
    1b20:	31 05       	cpc	r19, r1
    1b22:	f9 f0       	breq	.+62     	; 0x1b62 <malloc+0xb0>
    1b24:	28 1b       	sub	r18, r24
    1b26:	39 0b       	sbc	r19, r25
    1b28:	24 30       	cpi	r18, 0x04	; 4
    1b2a:	31 05       	cpc	r19, r1
    1b2c:	80 f4       	brcc	.+32     	; 0x1b4e <malloc+0x9c>
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	9b 81       	ldd	r25, Y+3	; 0x03
    1b32:	61 15       	cp	r22, r1
    1b34:	71 05       	cpc	r23, r1
    1b36:	21 f0       	breq	.+8      	; 0x1b40 <malloc+0x8e>
    1b38:	fb 01       	movw	r30, r22
    1b3a:	93 83       	std	Z+3, r25	; 0x03
    1b3c:	82 83       	std	Z+2, r24	; 0x02
    1b3e:	04 c0       	rjmp	.+8      	; 0x1b48 <malloc+0x96>
    1b40:	90 93 ca 04 	sts	0x04CA, r25	; 0x8004ca <__flp+0x1>
    1b44:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <__flp>
    1b48:	fe 01       	movw	r30, r28
    1b4a:	32 96       	adiw	r30, 0x02	; 2
    1b4c:	44 c0       	rjmp	.+136    	; 0x1bd6 <malloc+0x124>
    1b4e:	fe 01       	movw	r30, r28
    1b50:	e2 0f       	add	r30, r18
    1b52:	f3 1f       	adc	r31, r19
    1b54:	81 93       	st	Z+, r24
    1b56:	91 93       	st	Z+, r25
    1b58:	22 50       	subi	r18, 0x02	; 2
    1b5a:	31 09       	sbc	r19, r1
    1b5c:	39 83       	std	Y+1, r19	; 0x01
    1b5e:	28 83       	st	Y, r18
    1b60:	3a c0       	rjmp	.+116    	; 0x1bd6 <malloc+0x124>
    1b62:	20 91 c7 04 	lds	r18, 0x04C7	; 0x8004c7 <__brkval>
    1b66:	30 91 c8 04 	lds	r19, 0x04C8	; 0x8004c8 <__brkval+0x1>
    1b6a:	23 2b       	or	r18, r19
    1b6c:	41 f4       	brne	.+16     	; 0x1b7e <malloc+0xcc>
    1b6e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1b72:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1b76:	30 93 c8 04 	sts	0x04C8, r19	; 0x8004c8 <__brkval+0x1>
    1b7a:	20 93 c7 04 	sts	0x04C7, r18	; 0x8004c7 <__brkval>
    1b7e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1b82:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1b86:	21 15       	cp	r18, r1
    1b88:	31 05       	cpc	r19, r1
    1b8a:	41 f4       	brne	.+16     	; 0x1b9c <malloc+0xea>
    1b8c:	2d b7       	in	r18, 0x3d	; 61
    1b8e:	3e b7       	in	r19, 0x3e	; 62
    1b90:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1b94:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1b98:	24 1b       	sub	r18, r20
    1b9a:	35 0b       	sbc	r19, r21
    1b9c:	e0 91 c7 04 	lds	r30, 0x04C7	; 0x8004c7 <__brkval>
    1ba0:	f0 91 c8 04 	lds	r31, 0x04C8	; 0x8004c8 <__brkval+0x1>
    1ba4:	e2 17       	cp	r30, r18
    1ba6:	f3 07       	cpc	r31, r19
    1ba8:	a0 f4       	brcc	.+40     	; 0x1bd2 <malloc+0x120>
    1baa:	2e 1b       	sub	r18, r30
    1bac:	3f 0b       	sbc	r19, r31
    1bae:	28 17       	cp	r18, r24
    1bb0:	39 07       	cpc	r19, r25
    1bb2:	78 f0       	brcs	.+30     	; 0x1bd2 <malloc+0x120>
    1bb4:	ac 01       	movw	r20, r24
    1bb6:	4e 5f       	subi	r20, 0xFE	; 254
    1bb8:	5f 4f       	sbci	r21, 0xFF	; 255
    1bba:	24 17       	cp	r18, r20
    1bbc:	35 07       	cpc	r19, r21
    1bbe:	48 f0       	brcs	.+18     	; 0x1bd2 <malloc+0x120>
    1bc0:	4e 0f       	add	r20, r30
    1bc2:	5f 1f       	adc	r21, r31
    1bc4:	50 93 c8 04 	sts	0x04C8, r21	; 0x8004c8 <__brkval+0x1>
    1bc8:	40 93 c7 04 	sts	0x04C7, r20	; 0x8004c7 <__brkval>
    1bcc:	81 93       	st	Z+, r24
    1bce:	91 93       	st	Z+, r25
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <malloc+0x124>
    1bd2:	e0 e0       	ldi	r30, 0x00	; 0
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	cf 01       	movw	r24, r30
    1bd8:	df 91       	pop	r29
    1bda:	cf 91       	pop	r28
    1bdc:	1f 91       	pop	r17
    1bde:	0f 91       	pop	r16
    1be0:	08 95       	ret

00001be2 <free>:
    1be2:	cf 93       	push	r28
    1be4:	df 93       	push	r29
    1be6:	00 97       	sbiw	r24, 0x00	; 0
    1be8:	09 f4       	brne	.+2      	; 0x1bec <free+0xa>
    1bea:	81 c0       	rjmp	.+258    	; 0x1cee <free+0x10c>
    1bec:	fc 01       	movw	r30, r24
    1bee:	32 97       	sbiw	r30, 0x02	; 2
    1bf0:	13 82       	std	Z+3, r1	; 0x03
    1bf2:	12 82       	std	Z+2, r1	; 0x02
    1bf4:	a0 91 c9 04 	lds	r26, 0x04C9	; 0x8004c9 <__flp>
    1bf8:	b0 91 ca 04 	lds	r27, 0x04CA	; 0x8004ca <__flp+0x1>
    1bfc:	10 97       	sbiw	r26, 0x00	; 0
    1bfe:	81 f4       	brne	.+32     	; 0x1c20 <free+0x3e>
    1c00:	20 81       	ld	r18, Z
    1c02:	31 81       	ldd	r19, Z+1	; 0x01
    1c04:	82 0f       	add	r24, r18
    1c06:	93 1f       	adc	r25, r19
    1c08:	20 91 c7 04 	lds	r18, 0x04C7	; 0x8004c7 <__brkval>
    1c0c:	30 91 c8 04 	lds	r19, 0x04C8	; 0x8004c8 <__brkval+0x1>
    1c10:	28 17       	cp	r18, r24
    1c12:	39 07       	cpc	r19, r25
    1c14:	51 f5       	brne	.+84     	; 0x1c6a <free+0x88>
    1c16:	f0 93 c8 04 	sts	0x04C8, r31	; 0x8004c8 <__brkval+0x1>
    1c1a:	e0 93 c7 04 	sts	0x04C7, r30	; 0x8004c7 <__brkval>
    1c1e:	67 c0       	rjmp	.+206    	; 0x1cee <free+0x10c>
    1c20:	ed 01       	movw	r28, r26
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	ce 17       	cp	r28, r30
    1c28:	df 07       	cpc	r29, r31
    1c2a:	40 f4       	brcc	.+16     	; 0x1c3c <free+0x5a>
    1c2c:	4a 81       	ldd	r20, Y+2	; 0x02
    1c2e:	5b 81       	ldd	r21, Y+3	; 0x03
    1c30:	9e 01       	movw	r18, r28
    1c32:	41 15       	cp	r20, r1
    1c34:	51 05       	cpc	r21, r1
    1c36:	f1 f0       	breq	.+60     	; 0x1c74 <free+0x92>
    1c38:	ea 01       	movw	r28, r20
    1c3a:	f5 cf       	rjmp	.-22     	; 0x1c26 <free+0x44>
    1c3c:	d3 83       	std	Z+3, r29	; 0x03
    1c3e:	c2 83       	std	Z+2, r28	; 0x02
    1c40:	40 81       	ld	r20, Z
    1c42:	51 81       	ldd	r21, Z+1	; 0x01
    1c44:	84 0f       	add	r24, r20
    1c46:	95 1f       	adc	r25, r21
    1c48:	c8 17       	cp	r28, r24
    1c4a:	d9 07       	cpc	r29, r25
    1c4c:	59 f4       	brne	.+22     	; 0x1c64 <free+0x82>
    1c4e:	88 81       	ld	r24, Y
    1c50:	99 81       	ldd	r25, Y+1	; 0x01
    1c52:	84 0f       	add	r24, r20
    1c54:	95 1f       	adc	r25, r21
    1c56:	02 96       	adiw	r24, 0x02	; 2
    1c58:	91 83       	std	Z+1, r25	; 0x01
    1c5a:	80 83       	st	Z, r24
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c60:	93 83       	std	Z+3, r25	; 0x03
    1c62:	82 83       	std	Z+2, r24	; 0x02
    1c64:	21 15       	cp	r18, r1
    1c66:	31 05       	cpc	r19, r1
    1c68:	29 f4       	brne	.+10     	; 0x1c74 <free+0x92>
    1c6a:	f0 93 ca 04 	sts	0x04CA, r31	; 0x8004ca <__flp+0x1>
    1c6e:	e0 93 c9 04 	sts	0x04C9, r30	; 0x8004c9 <__flp>
    1c72:	3d c0       	rjmp	.+122    	; 0x1cee <free+0x10c>
    1c74:	e9 01       	movw	r28, r18
    1c76:	fb 83       	std	Y+3, r31	; 0x03
    1c78:	ea 83       	std	Y+2, r30	; 0x02
    1c7a:	49 91       	ld	r20, Y+
    1c7c:	59 91       	ld	r21, Y+
    1c7e:	c4 0f       	add	r28, r20
    1c80:	d5 1f       	adc	r29, r21
    1c82:	ec 17       	cp	r30, r28
    1c84:	fd 07       	cpc	r31, r29
    1c86:	61 f4       	brne	.+24     	; 0x1ca0 <free+0xbe>
    1c88:	80 81       	ld	r24, Z
    1c8a:	91 81       	ldd	r25, Z+1	; 0x01
    1c8c:	84 0f       	add	r24, r20
    1c8e:	95 1f       	adc	r25, r21
    1c90:	02 96       	adiw	r24, 0x02	; 2
    1c92:	e9 01       	movw	r28, r18
    1c94:	99 83       	std	Y+1, r25	; 0x01
    1c96:	88 83       	st	Y, r24
    1c98:	82 81       	ldd	r24, Z+2	; 0x02
    1c9a:	93 81       	ldd	r25, Z+3	; 0x03
    1c9c:	9b 83       	std	Y+3, r25	; 0x03
    1c9e:	8a 83       	std	Y+2, r24	; 0x02
    1ca0:	e0 e0       	ldi	r30, 0x00	; 0
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	12 96       	adiw	r26, 0x02	; 2
    1ca6:	8d 91       	ld	r24, X+
    1ca8:	9c 91       	ld	r25, X
    1caa:	13 97       	sbiw	r26, 0x03	; 3
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	19 f0       	breq	.+6      	; 0x1cb6 <free+0xd4>
    1cb0:	fd 01       	movw	r30, r26
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	f7 cf       	rjmp	.-18     	; 0x1ca4 <free+0xc2>
    1cb6:	8d 91       	ld	r24, X+
    1cb8:	9c 91       	ld	r25, X
    1cba:	11 97       	sbiw	r26, 0x01	; 1
    1cbc:	9d 01       	movw	r18, r26
    1cbe:	2e 5f       	subi	r18, 0xFE	; 254
    1cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc2:	82 0f       	add	r24, r18
    1cc4:	93 1f       	adc	r25, r19
    1cc6:	20 91 c7 04 	lds	r18, 0x04C7	; 0x8004c7 <__brkval>
    1cca:	30 91 c8 04 	lds	r19, 0x04C8	; 0x8004c8 <__brkval+0x1>
    1cce:	28 17       	cp	r18, r24
    1cd0:	39 07       	cpc	r19, r25
    1cd2:	69 f4       	brne	.+26     	; 0x1cee <free+0x10c>
    1cd4:	30 97       	sbiw	r30, 0x00	; 0
    1cd6:	29 f4       	brne	.+10     	; 0x1ce2 <free+0x100>
    1cd8:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <__flp+0x1>
    1cdc:	10 92 c9 04 	sts	0x04C9, r1	; 0x8004c9 <__flp>
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <free+0x104>
    1ce2:	13 82       	std	Z+3, r1	; 0x03
    1ce4:	12 82       	std	Z+2, r1	; 0x02
    1ce6:	b0 93 c8 04 	sts	0x04C8, r27	; 0x8004c8 <__brkval+0x1>
    1cea:	a0 93 c7 04 	sts	0x04C7, r26	; 0x8004c7 <__brkval>
    1cee:	df 91       	pop	r29
    1cf0:	cf 91       	pop	r28
    1cf2:	08 95       	ret

00001cf4 <memcpy>:
    1cf4:	fb 01       	movw	r30, r22
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <memcpy+0xa>
    1cfa:	01 90       	ld	r0, Z+
    1cfc:	0d 92       	st	X+, r0
    1cfe:	41 50       	subi	r20, 0x01	; 1
    1d00:	50 40       	sbci	r21, 0x00	; 0
    1d02:	d8 f7       	brcc	.-10     	; 0x1cfa <memcpy+0x6>
    1d04:	08 95       	ret

00001d06 <__do_global_dtors>:
    1d06:	10 e0       	ldi	r17, 0x00	; 0
    1d08:	ce e5       	ldi	r28, 0x5E	; 94
    1d0a:	d0 e0       	ldi	r29, 0x00	; 0
    1d0c:	04 c0       	rjmp	.+8      	; 0x1d16 <__do_global_dtors+0x10>
    1d0e:	fe 01       	movw	r30, r28
    1d10:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__tablejump2__>
    1d14:	21 96       	adiw	r28, 0x01	; 1
    1d16:	cf 35       	cpi	r28, 0x5F	; 95
    1d18:	d1 07       	cpc	r29, r17
    1d1a:	c9 f7       	brne	.-14     	; 0x1d0e <__do_global_dtors+0x8>
    1d1c:	f8 94       	cli

00001d1e <__stop_program>:
    1d1e:	ff cf       	rjmp	.-2      	; 0x1d1e <__stop_program>
