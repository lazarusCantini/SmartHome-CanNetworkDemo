
Hub_Muster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002da  00800100  00001cf8  00001dac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cf8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f1  008003da  008003da  00002086  2**0
                  ALLOC
  3 .eeprom       00000004  00810000  00810000  00002086  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000208a  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020bc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000005e8  00000000  00000000  000020fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000109a5  00000000  00000000  000026e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002cb7  00000000  00000000  00013089  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003597  00000000  00000000  00015d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001294  00000000  00000000  000192d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002fda  00000000  00000000  0001a56c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000061e1  00000000  00000000  0001d546  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005b0  00000000  00000000  00023727  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__dtors_end>
       4:	0c 94 ab 0b 	jmp	0x1756	; 0x1756 <__vector_1>
       8:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__vector_2>
       c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 f9 0b 	jmp	0x17f2	; 0x17f2 <__vector_16>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__vector_18>
      4c:	0c 94 ad 0a 	jmp	0x155a	; 0x155a <__vector_19>
      50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	61 07       	cpc	r22, r17
      ba:	dd 0a       	sbc	r13, r29

000000bc <__ctors_end>:
      bc:	65 07       	cpc	r22, r21

000000be <__dtors_end>:
      be:	11 24       	eor	r1, r1
      c0:	1f be       	out	0x3f, r1	; 63
      c2:	cf ef       	ldi	r28, 0xFF	; 255
      c4:	d8 e0       	ldi	r29, 0x08	; 8
      c6:	de bf       	out	0x3e, r29	; 62
      c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
      ca:	13 e0       	ldi	r17, 0x03	; 3
      cc:	a0 e0       	ldi	r26, 0x00	; 0
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	e8 ef       	ldi	r30, 0xF8	; 248
      d2:	fc e1       	ldi	r31, 0x1C	; 28
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
      d6:	05 90       	lpm	r0, Z+
      d8:	0d 92       	st	X+, r0
      da:	aa 3d       	cpi	r26, 0xDA	; 218
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_clear_bss>:
      e0:	24 e0       	ldi	r18, 0x04	; 4
      e2:	aa ed       	ldi	r26, 0xDA	; 218
      e4:	b3 e0       	ldi	r27, 0x03	; 3
      e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
      e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
      ea:	ab 3c       	cpi	r26, 0xCB	; 203
      ec:	b2 07       	cpc	r27, r18
      ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>

000000f0 <__do_global_ctors>:
      f0:	10 e0       	ldi	r17, 0x00	; 0
      f2:	ce e5       	ldi	r28, 0x5E	; 94
      f4:	d0 e0       	ldi	r29, 0x00	; 0
      f6:	04 c0       	rjmp	.+8      	; 0x100 <__do_global_ctors+0x10>
      f8:	21 97       	sbiw	r28, 0x01	; 1
      fa:	fe 01       	movw	r30, r28
      fc:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__tablejump2__>
     100:	cc 35       	cpi	r28, 0x5C	; 92
     102:	d1 07       	cpc	r29, r17
     104:	c9 f7       	brne	.-14     	; 0xf8 <__do_global_ctors+0x8>
     106:	0e 94 0c 0b 	call	0x1618	; 0x1618 <main>
     10a:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <__do_global_dtors>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <loop>:
  }


}

void loop() {
     112:	0f 93       	push	r16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     114:	2f ef       	ldi	r18, 0xFF	; 255
     116:	87 ea       	ldi	r24, 0xA7	; 167
     118:	91 e6       	ldi	r25, 0x61	; 97
     11a:	21 50       	subi	r18, 0x01	; 1
     11c:	80 40       	sbci	r24, 0x00	; 0
     11e:	90 40       	sbci	r25, 0x00	; 0
     120:	e1 f7       	brne	.-8      	; 0x11a <loop+0x8>
     122:	00 c0       	rjmp	.+0      	; 0x124 <loop+0x12>
     124:	00 00       	nop
  // put your main code here, to run repeatedly:
	_delay_ms(2000);
	  CAN.beginExtendedPacket(ID_01_Keller_1_Bastelkeller_Licht);
     126:	00 e0       	ldi	r16, 0x00	; 0
     128:	2f ef       	ldi	r18, 0xFF	; 255
     12a:	3f ef       	ldi	r19, 0xFF	; 255
     12c:	40 e0       	ldi	r20, 0x00	; 0
     12e:	50 eb       	ldi	r21, 0xB0	; 176
     130:	64 e2       	ldi	r22, 0x24	; 36
     132:	73 e0       	ldi	r23, 0x03	; 3
     134:	8e ed       	ldi	r24, 0xDE	; 222
     136:	93 e0       	ldi	r25, 0x03	; 3
     138:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN18CANControllerClass19beginExtendedPacketElib>
	  CAN.write(Kommando_Licht_toggle);
     13c:	63 e0       	ldi	r22, 0x03	; 3
     13e:	8e ed       	ldi	r24, 0xDE	; 222
     140:	93 e0       	ldi	r25, 0x03	; 3
     142:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_ZN18CANControllerClass5writeEh>
	/*  CAN.write('w');
	  CAN.write('o');
	  CAN.write('r');
	  CAN.write('l');
	  CAN.write('d');*/
	  CAN.endPacket();
     146:	8e ed       	ldi	r24, 0xDE	; 222
     148:	93 e0       	ldi	r25, 0x03	; 3
     14a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN12MCP2515Class9endPacketEv>

	  Serial.println("done");
     14e:	60 e2       	ldi	r22, 0x20	; 32
     150:	72 e0       	ldi	r23, 0x02	; 2
     152:	81 e2       	ldi	r24, 0x21	; 33
     154:	94 e0       	ldi	r25, 0x04	; 4
}
     156:	0f 91       	pop	r16
	  CAN.write('r');
	  CAN.write('l');
	  CAN.write('d');*/
	  CAN.endPacket();

	  Serial.println("done");
     158:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <_ZN5Print7printlnEPKc>

0000015c <setup>:
uint32_t EEPROM_UID_KELLER_HUB EEMEM = UID_KELLER_HUB;

uint32_t CAN_Buffer[20];
bool CAN_Message_detected = false;

void setup() {
     15c:	0f 93       	push	r16
     15e:	1f 93       	push	r17
  // put your setup code here, to run once:
  pinMode(4, OUTPUT);  //VCC für den Can Baustein zur Verfügung stellen
     160:	61 e0       	ldi	r22, 0x01	; 1
     162:	84 e0       	ldi	r24, 0x04	; 4
     164:	0e 94 b2 0c 	call	0x1964	; 0x1964 <pinMode>
  digitalWrite(4, HIGH);
     168:	61 e0       	ldi	r22, 0x01	; 1
     16a:	84 e0       	ldi	r24, 0x04	; 4
     16c:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <digitalWrite>
  Serial.begin(9600);
     170:	40 e8       	ldi	r20, 0x80	; 128
     172:	55 e2       	ldi	r21, 0x25	; 37
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	70 e0       	ldi	r23, 0x00	; 0
     178:	81 e2       	ldi	r24, 0x21	; 33
     17a:	94 e0       	ldi	r25, 0x04	; 4
     17c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_ZN14HardwareSerial5beginEm>
  while(!Serial);
  Serial.println("Can Hub");
     180:	65 e2       	ldi	r22, 0x25	; 37
     182:	72 e0       	ldi	r23, 0x02	; 2
     184:	81 e2       	ldi	r24, 0x21	; 33
     186:	94 e0       	ldi	r25, 0x04	; 4
     188:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <_ZN5Print7printlnEPKc>
  
  
  if (!CAN.begin(500E3))
     18c:	40 e2       	ldi	r20, 0x20	; 32
     18e:	51 ea       	ldi	r21, 0xA1	; 161
     190:	67 e0       	ldi	r22, 0x07	; 7
     192:	70 e0       	ldi	r23, 0x00	; 0
     194:	8e ed       	ldi	r24, 0xDE	; 222
     196:	93 e0       	ldi	r25, 0x03	; 3
     198:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZN12MCP2515Class5beginEl>
     19c:	89 2b       	or	r24, r25
     19e:	39 f4       	brne	.+14     	; 0x1ae <setup+0x52>
  {
	  Serial.println("Starting Can failed.");
     1a0:	6d e2       	ldi	r22, 0x2D	; 45
     1a2:	72 e0       	ldi	r23, 0x02	; 2
     1a4:	81 e2       	ldi	r24, 0x21	; 33
     1a6:	94 e0       	ldi	r25, 0x04	; 4
     1a8:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <_ZN5Print7printlnEPKc>
     1ac:	ff cf       	rjmp	.-2      	; 0x1ac <setup+0x50>
	  while (1);
  }
  Serial.println("Es wird auf eine Can Nachricht gewartet...");
     1ae:	62 e4       	ldi	r22, 0x42	; 66
     1b0:	72 e0       	ldi	r23, 0x02	; 2
     1b2:	81 e2       	ldi	r24, 0x21	; 33
     1b4:	94 e0       	ldi	r25, 0x04	; 4
     1b6:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <_ZN5Print7printlnEPKc>
  
  //Testweise wird der Filter mal auf den Node eingestellt
  CAN.filterExtended(UID_NODE, UID_MASK_ZERO);
     1ba:	0f ef       	ldi	r16, 0xFF	; 255
     1bc:	1f ef       	ldi	r17, 0xFF	; 255
     1be:	2f ef       	ldi	r18, 0xFF	; 255
     1c0:	33 e0       	ldi	r19, 0x03	; 3
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 ec       	ldi	r21, 0xC0	; 192
     1c6:	62 e9       	ldi	r22, 0x92	; 146
     1c8:	70 e0       	ldi	r23, 0x00	; 0
     1ca:	8e ed       	ldi	r24, 0xDE	; 222
     1cc:	93 e0       	ldi	r25, 0x03	; 3
     1ce:	0e 94 6b 05 	call	0xad6	; 0xad6 <_ZN12MCP2515Class14filterExtendedEll>
  
  while(CAN.parsePacket() == 0)
     1d2:	8e ed       	ldi	r24, 0xDE	; 222
     1d4:	93 e0       	ldi	r25, 0x03	; 3
     1d6:	0e 94 de 03 	call	0x7bc	; 0x7bc <_ZN12MCP2515Class11parsePacketEv>
     1da:	89 2b       	or	r24, r25
     1dc:	d1 f3       	breq	.-12     	; 0x1d2 <setup+0x76>
  {
	  //Endlosschleife bis eine CAN Nachricht gefunden wurde
  }
  Serial.println("Es wurde eine CAN Nachricht empfangen.");
     1de:	6d e6       	ldi	r22, 0x6D	; 109
     1e0:	72 e0       	ldi	r23, 0x02	; 2
     1e2:	81 e2       	ldi	r24, 0x21	; 33
     1e4:	94 e0       	ldi	r25, 0x04	; 4
     1e6:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <_ZN5Print7printlnEPKc>
  if (CAN.available())
     1ea:	8e ed       	ldi	r24, 0xDE	; 222
     1ec:	93 e0       	ldi	r25, 0x03	; 3
     1ee:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN18CANControllerClass9availableEv>
     1f2:	89 2b       	or	r24, r25
     1f4:	91 f1       	breq	.+100    	; 0x25a <setup+0xfe>
  {
	  Serial.println("Can Message wurde empfangen");
     1f6:	64 e9       	ldi	r22, 0x94	; 148
     1f8:	72 e0       	ldi	r23, 0x02	; 2
     1fa:	81 e2       	ldi	r24, 0x21	; 33
     1fc:	94 e0       	ldi	r25, 0x04	; 4
     1fe:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <_ZN5Print7printlnEPKc>
	  if ((CAN.packetId()== UID_NODE) && (CAN.read() == Kommando_Get_HUB_ID) )
     202:	8e ed       	ldi	r24, 0xDE	; 222
     204:	93 e0       	ldi	r25, 0x03	; 3
     206:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN18CANControllerClass8packetIdEv>
     20a:	61 15       	cp	r22, r1
     20c:	70 4c       	sbci	r23, 0xC0	; 192
     20e:	82 49       	sbci	r24, 0x92	; 146
     210:	91 05       	cpc	r25, r1
     212:	09 f0       	breq	.+2      	; 0x216 <setup+0xba>
     214:	a6 c0       	rjmp	.+332    	; 0x362 <setup+0x206>
     216:	8e ed       	ldi	r24, 0xDE	; 222
     218:	93 e0       	ldi	r25, 0x03	; 3
     21a:	0e 94 13 02 	call	0x426	; 0x426 <_ZN18CANControllerClass4readEv>
     21e:	01 97       	sbiw	r24, 0x01	; 1
     220:	09 f0       	breq	.+2      	; 0x224 <setup+0xc8>
     222:	9f c0       	rjmp	.+318    	; 0x362 <setup+0x206>
	  {
		  Serial.println("Es wurde die HUB ID angefordert.");
     224:	6c ec       	ldi	r22, 0xCC	; 204
     226:	72 e0       	ldi	r23, 0x02	; 2
     228:	81 e2       	ldi	r24, 0x21	; 33
     22a:	94 e0       	ldi	r25, 0x04	; 4
     22c:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <_ZN5Print7printlnEPKc>
		  //Die Antwort senden (Aktuell noch Hardgecodete ID zurück senden)
		  CAN.beginExtendedPacket(UID_KELLER_HUB);
     230:	00 e0       	ldi	r16, 0x00	; 0
     232:	2f ef       	ldi	r18, 0xFF	; 255
     234:	3f ef       	ldi	r19, 0xFF	; 255
     236:	40 e0       	ldi	r20, 0x00	; 0
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	60 e9       	ldi	r22, 0x90	; 144
     23c:	70 e0       	ldi	r23, 0x00	; 0
     23e:	8e ed       	ldi	r24, 0xDE	; 222
     240:	93 e0       	ldi	r25, 0x03	; 3
     242:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN18CANControllerClass19beginExtendedPacketElib>
		  CAN.write(UID_KELLER_HUB);
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	8e ed       	ldi	r24, 0xDE	; 222
     24a:	93 e0       	ldi	r25, 0x03	; 3
     24c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_ZN18CANControllerClass5writeEh>
		  CAN.endPacket();
     250:	8e ed       	ldi	r24, 0xDE	; 222
     252:	93 e0       	ldi	r25, 0x03	; 3
     254:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN12MCP2515Class9endPacketEv>
     258:	06 c0       	rjmp	.+12     	; 0x266 <setup+0x10a>
		  Serial.println("Entweder unbekannte ID, oder unbekanntes Kommando.");
	  }
  } 
  else
  {
	Serial.println("Da ist was falsch gelaufen.");  
     25a:	60 eb       	ldi	r22, 0xB0	; 176
     25c:	72 e0       	ldi	r23, 0x02	; 2
     25e:	81 e2       	ldi	r24, 0x21	; 33
     260:	94 e0       	ldi	r25, 0x04	; 4
     262:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <_ZN5Print7printlnEPKc>
  }
  
  
  while(CAN.parsePacket() == 0)
     266:	8e ed       	ldi	r24, 0xDE	; 222
     268:	93 e0       	ldi	r25, 0x03	; 3
     26a:	0e 94 de 03 	call	0x7bc	; 0x7bc <_ZN12MCP2515Class11parsePacketEv>
     26e:	89 2b       	or	r24, r25
     270:	d1 f3       	breq	.-12     	; 0x266 <setup+0x10a>
  {
	  //Endlosschleife bis eine CAN Nachricht gefunden wurde
  }
  Serial.println("Es wurde eine CAN Nachricht empfangen.");
     272:	6d e6       	ldi	r22, 0x6D	; 109
     274:	72 e0       	ldi	r23, 0x02	; 2
     276:	81 e2       	ldi	r24, 0x21	; 33
     278:	94 e0       	ldi	r25, 0x04	; 4
     27a:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <_ZN5Print7printlnEPKc>
  if (CAN.available())
     27e:	8e ed       	ldi	r24, 0xDE	; 222
     280:	93 e0       	ldi	r25, 0x03	; 3
     282:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN18CANControllerClass9availableEv>
     286:	89 2b       	or	r24, r25
     288:	09 f4       	brne	.+2      	; 0x28c <setup+0x130>
     28a:	68 c0       	rjmp	.+208    	; 0x35c <setup+0x200>
  {
	  Serial.println("Can Message wurde empfangen");
     28c:	64 e9       	ldi	r22, 0x94	; 148
     28e:	72 e0       	ldi	r23, 0x02	; 2
     290:	81 e2       	ldi	r24, 0x21	; 33
     292:	94 e0       	ldi	r25, 0x04	; 4
     294:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <_ZN5Print7printlnEPKc>
	  if ((CAN.packetId()== UID_NODE) && (CAN.read() == Kommando_Get_ID_LIST_FROM_HUB) )
     298:	8e ed       	ldi	r24, 0xDE	; 222
     29a:	93 e0       	ldi	r25, 0x03	; 3
     29c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN18CANControllerClass8packetIdEv>
     2a0:	61 15       	cp	r22, r1
     2a2:	70 4c       	sbci	r23, 0xC0	; 192
     2a4:	82 49       	sbci	r24, 0x92	; 146
     2a6:	91 05       	cpc	r25, r1
     2a8:	09 f0       	breq	.+2      	; 0x2ac <setup+0x150>
     2aa:	5e c0       	rjmp	.+188    	; 0x368 <setup+0x20c>
     2ac:	8e ed       	ldi	r24, 0xDE	; 222
     2ae:	93 e0       	ldi	r25, 0x03	; 3
     2b0:	0e 94 13 02 	call	0x426	; 0x426 <_ZN18CANControllerClass4readEv>
     2b4:	02 97       	sbiw	r24, 0x02	; 2
     2b6:	09 f0       	breq	.+2      	; 0x2ba <setup+0x15e>
     2b8:	57 c0       	rjmp	.+174    	; 0x368 <setup+0x20c>
	  {
		  Serial.println("Es wurde die ID Liste auf die gelauscht wird angefordert");
     2ba:	60 e2       	ldi	r22, 0x20	; 32
     2bc:	73 e0       	ldi	r23, 0x03	; 3
     2be:	81 e2       	ldi	r24, 0x21	; 33
     2c0:	94 e0       	ldi	r25, 0x04	; 4
     2c2:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <_ZN5Print7printlnEPKc>
		  //Die Antwort senden (Aktuell noch Hardgecodete ID zurück senden)
		  CAN.beginExtendedPacket(UID_KELLER_HUB);
     2c6:	00 e0       	ldi	r16, 0x00	; 0
     2c8:	2f ef       	ldi	r18, 0xFF	; 255
     2ca:	3f ef       	ldi	r19, 0xFF	; 255
     2cc:	40 e0       	ldi	r20, 0x00	; 0
     2ce:	50 e0       	ldi	r21, 0x00	; 0
     2d0:	60 e9       	ldi	r22, 0x90	; 144
     2d2:	70 e0       	ldi	r23, 0x00	; 0
     2d4:	8e ed       	ldi	r24, 0xDE	; 222
     2d6:	93 e0       	ldi	r25, 0x03	; 3
     2d8:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN18CANControllerClass19beginExtendedPacketElib>
		  CAN.write(Zeiger_auf_UID_01_Keller_1_Bastelkeller_Lichtschalter, 4);
     2dc:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <Zeiger_auf_UID_01_Keller_1_Bastelkeller_Lichtschalter>
     2e0:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <Zeiger_auf_UID_01_Keller_1_Bastelkeller_Lichtschalter+0x1>
     2e4:	44 e0       	ldi	r20, 0x04	; 4
     2e6:	50 e0       	ldi	r21, 0x00	; 0
     2e8:	8e ed       	ldi	r24, 0xDE	; 222
     2ea:	93 e0       	ldi	r25, 0x03	; 3
     2ec:	0e 94 56 02 	call	0x4ac	; 0x4ac <_ZN18CANControllerClass5writeEPKhj>
		  CAN.endPacket();
     2f0:	8e ed       	ldi	r24, 0xDE	; 222
     2f2:	93 e0       	ldi	r25, 0x03	; 3
     2f4:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN12MCP2515Class9endPacketEv>
		  
		  CAN.beginExtendedPacket(UID_KELLER_HUB);
     2f8:	2f ef       	ldi	r18, 0xFF	; 255
     2fa:	3f ef       	ldi	r19, 0xFF	; 255
     2fc:	40 e0       	ldi	r20, 0x00	; 0
     2fe:	50 e0       	ldi	r21, 0x00	; 0
     300:	60 e9       	ldi	r22, 0x90	; 144
     302:	70 e0       	ldi	r23, 0x00	; 0
     304:	8e ed       	ldi	r24, 0xDE	; 222
     306:	93 e0       	ldi	r25, 0x03	; 3
     308:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN18CANControllerClass19beginExtendedPacketElib>
		  CAN.write(Zeiger_auf_UID_01_Keller_1_Bastelkeller_Licht, 4);
     30c:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <Zeiger_auf_UID_01_Keller_1_Bastelkeller_Licht>
     310:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <Zeiger_auf_UID_01_Keller_1_Bastelkeller_Licht+0x1>
     314:	44 e0       	ldi	r20, 0x04	; 4
     316:	50 e0       	ldi	r21, 0x00	; 0
     318:	8e ed       	ldi	r24, 0xDE	; 222
     31a:	93 e0       	ldi	r25, 0x03	; 3
     31c:	0e 94 56 02 	call	0x4ac	; 0x4ac <_ZN18CANControllerClass5writeEPKhj>
		  CAN.endPacket();
     320:	8e ed       	ldi	r24, 0xDE	; 222
     322:	93 e0       	ldi	r25, 0x03	; 3
     324:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN12MCP2515Class9endPacketEv>
		  
		  CAN.beginExtendedPacket(UID_KELLER_HUB);
     328:	2f ef       	ldi	r18, 0xFF	; 255
     32a:	3f ef       	ldi	r19, 0xFF	; 255
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	50 e0       	ldi	r21, 0x00	; 0
     330:	60 e9       	ldi	r22, 0x90	; 144
     332:	70 e0       	ldi	r23, 0x00	; 0
     334:	8e ed       	ldi	r24, 0xDE	; 222
     336:	93 e0       	ldi	r25, 0x03	; 3
     338:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN18CANControllerClass19beginExtendedPacketElib>
		  CAN.write(Zeiger_auf_UID_Liste_EndeIndikator, 4);
     33c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <Zeiger_auf_UID_Liste_EndeIndikator>
     340:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <Zeiger_auf_UID_Liste_EndeIndikator+0x1>
     344:	44 e0       	ldi	r20, 0x04	; 4
     346:	50 e0       	ldi	r21, 0x00	; 0
     348:	8e ed       	ldi	r24, 0xDE	; 222
     34a:	93 e0       	ldi	r25, 0x03	; 3
     34c:	0e 94 56 02 	call	0x4ac	; 0x4ac <_ZN18CANControllerClass5writeEPKhj>
		  CAN.endPacket();		  
     350:	8e ed       	ldi	r24, 0xDE	; 222
     352:	93 e0       	ldi	r25, 0x03	; 3
  {
	  Serial.println("Da ist was falsch gelaufen.");
  }


}
     354:	1f 91       	pop	r17
     356:	0f 91       	pop	r16
		  CAN.write(Zeiger_auf_UID_01_Keller_1_Bastelkeller_Licht, 4);
		  CAN.endPacket();
		  
		  CAN.beginExtendedPacket(UID_KELLER_HUB);
		  CAN.write(Zeiger_auf_UID_Liste_EndeIndikator, 4);
		  CAN.endPacket();		  
     358:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <_ZN12MCP2515Class9endPacketEv>
		  Serial.println("Entweder unbekannte ID, oder unbekanntes Kommando.");
	  }
  }
  else
  {
	  Serial.println("Da ist was falsch gelaufen.");
     35c:	60 eb       	ldi	r22, 0xB0	; 176
     35e:	72 e0       	ldi	r23, 0x02	; 2
     360:	05 c0       	rjmp	.+10     	; 0x36c <setup+0x210>
		  CAN.write(UID_KELLER_HUB);
		  CAN.endPacket();
	  } 
	  else
	  {
		  Serial.println("Entweder unbekannte ID, oder unbekanntes Kommando.");
     362:	6d ee       	ldi	r22, 0xED	; 237
     364:	72 e0       	ldi	r23, 0x02	; 2
     366:	7b cf       	rjmp	.-266    	; 0x25e <setup+0x102>
		  CAN.endPacket();		  
		  
	  }
	  else
	  {
		  Serial.println("Entweder unbekannte ID, oder unbekanntes Kommando.");
     368:	6d ee       	ldi	r22, 0xED	; 237
     36a:	72 e0       	ldi	r23, 0x02	; 2
     36c:	81 e2       	ldi	r24, 0x21	; 33
     36e:	94 e0       	ldi	r25, 0x04	; 4
  {
	  Serial.println("Da ist was falsch gelaufen.");
  }


}
     370:	1f 91       	pop	r17
     372:	0f 91       	pop	r16
		  CAN.endPacket();		  
		  
	  }
	  else
	  {
		  Serial.println("Entweder unbekannte ID, oder unbekanntes Kommando.");
     374:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <_ZN5Print7printlnEPKc>

00000378 <_ZN5Print17availableForWriteEv>:
  _txLength = 0;

  memset(_txData, 0x00, sizeof(_txData));

  return 1;
}
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	08 95       	ret

0000037e <_ZN18CANControllerClass6filterEi>:
     37e:	dc 01       	movw	r26, r24
     380:	ed 91       	ld	r30, X+
     382:	fc 91       	ld	r31, X
     384:	02 8c       	ldd	r0, Z+26	; 0x1a
     386:	f3 8d       	ldd	r31, Z+27	; 0x1b
     388:	e0 2d       	mov	r30, r0
     38a:	4f ef       	ldi	r20, 0xFF	; 255
     38c:	57 e0       	ldi	r21, 0x07	; 7
     38e:	09 94       	ijmp

00000390 <_ZN18CANControllerClass14filterExtendedEl>:
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	dc 01       	movw	r26, r24
     396:	ed 91       	ld	r30, X+
     398:	fc 91       	ld	r31, X
     39a:	06 8c       	ldd	r0, Z+30	; 0x1e
     39c:	f7 8d       	ldd	r31, Z+31	; 0x1f
     39e:	e0 2d       	mov	r30, r0
     3a0:	0f ef       	ldi	r16, 0xFF	; 255
     3a2:	1f ef       	ldi	r17, 0xFF	; 255
     3a4:	2f ef       	ldi	r18, 0xFF	; 255
     3a6:	3f e1       	ldi	r19, 0x1F	; 31
     3a8:	09 95       	icall
     3aa:	1f 91       	pop	r17
     3ac:	0f 91       	pop	r16
     3ae:	08 95       	ret

000003b0 <_ZN18CANControllerClassD1Ev>:
     3b0:	08 95       	ret

000003b2 <_ZN18CANControllerClass5beginEl>:
     3b2:	fc 01       	movw	r30, r24
     3b4:	16 86       	std	Z+14, r1	; 0x0e
     3b6:	8f ef       	ldi	r24, 0xFF	; 255
     3b8:	9f ef       	ldi	r25, 0xFF	; 255
     3ba:	dc 01       	movw	r26, r24
     3bc:	87 87       	std	Z+15, r24	; 0x0f
     3be:	90 8b       	std	Z+16, r25	; 0x10
     3c0:	a1 8b       	std	Z+17, r26	; 0x11
     3c2:	b2 8b       	std	Z+18, r27	; 0x12
     3c4:	14 8a       	std	Z+20, r1	; 0x14
     3c6:	16 8a       	std	Z+22, r1	; 0x16
     3c8:	15 8a       	std	Z+21, r1	; 0x15
     3ca:	10 8e       	std	Z+24, r1	; 0x18
     3cc:	17 8a       	std	Z+23, r1	; 0x17
     3ce:	81 a3       	std	Z+33, r24	; 0x21
     3d0:	92 a3       	std	Z+34, r25	; 0x22
     3d2:	a3 a3       	std	Z+35, r26	; 0x23
     3d4:	b4 a3       	std	Z+36, r27	; 0x24
     3d6:	16 a2       	std	Z+38, r1	; 0x26
     3d8:	10 a6       	std	Z+40, r1	; 0x28
     3da:	17 a2       	std	Z+39, r1	; 0x27
     3dc:	12 a6       	std	Z+42, r1	; 0x2a
     3de:	11 a6       	std	Z+41, r1	; 0x29
     3e0:	14 a6       	std	Z+44, r1	; 0x2c
     3e2:	13 a6       	std	Z+43, r1	; 0x2b
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	08 95       	ret

000003ea <_ZN18CANControllerClass5writeEh>:
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	1f 92       	push	r1
     3f0:	cd b7       	in	r28, 0x3d	; 61
     3f2:	de b7       	in	r29, 0x3e	; 62
     3f4:	69 83       	std	Y+1, r22	; 0x01
     3f6:	dc 01       	movw	r26, r24
     3f8:	ed 91       	ld	r30, X+
     3fa:	fc 91       	ld	r31, X
     3fc:	02 80       	ldd	r0, Z+2	; 0x02
     3fe:	f3 81       	ldd	r31, Z+3	; 0x03
     400:	e0 2d       	mov	r30, r0
     402:	41 e0       	ldi	r20, 0x01	; 1
     404:	50 e0       	ldi	r21, 0x00	; 0
     406:	be 01       	movw	r22, r28
     408:	6f 5f       	subi	r22, 0xFF	; 255
     40a:	7f 4f       	sbci	r23, 0xFF	; 255
     40c:	09 95       	icall
     40e:	0f 90       	pop	r0
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	08 95       	ret

00000416 <_ZN18CANControllerClass9availableEv>:
     416:	fc 01       	movw	r30, r24
     418:	81 a5       	ldd	r24, Z+41	; 0x29
     41a:	92 a5       	ldd	r25, Z+42	; 0x2a
     41c:	23 a5       	ldd	r18, Z+43	; 0x2b
     41e:	34 a5       	ldd	r19, Z+44	; 0x2c
     420:	82 1b       	sub	r24, r18
     422:	93 0b       	sbc	r25, r19
     424:	08 95       	ret

00000426 <_ZN18CANControllerClass4readEv>:
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	ec 01       	movw	r28, r24
     42c:	e8 81       	ld	r30, Y
     42e:	f9 81       	ldd	r31, Y+1	; 0x01
     430:	00 84       	ldd	r0, Z+8	; 0x08
     432:	f1 85       	ldd	r31, Z+9	; 0x09
     434:	e0 2d       	mov	r30, r0
     436:	09 95       	icall
     438:	89 2b       	or	r24, r25
     43a:	61 f0       	breq	.+24     	; 0x454 <_ZN18CANControllerClass4readEv+0x2e>
     43c:	8b a5       	ldd	r24, Y+43	; 0x2b
     43e:	9c a5       	ldd	r25, Y+44	; 0x2c
     440:	9c 01       	movw	r18, r24
     442:	2f 5f       	subi	r18, 0xFF	; 255
     444:	3f 4f       	sbci	r19, 0xFF	; 255
     446:	3c a7       	std	Y+44, r19	; 0x2c
     448:	2b a7       	std	Y+43, r18	; 0x2b
     44a:	c8 0f       	add	r28, r24
     44c:	d9 1f       	adc	r29, r25
     44e:	8d a5       	ldd	r24, Y+45	; 0x2d
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	02 c0       	rjmp	.+4      	; 0x458 <_ZN18CANControllerClass4readEv+0x32>
     454:	8f ef       	ldi	r24, 0xFF	; 255
     456:	9f ef       	ldi	r25, 0xFF	; 255
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret

0000045e <_ZN18CANControllerClass4peekEv>:
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	ec 01       	movw	r28, r24
     464:	e8 81       	ld	r30, Y
     466:	f9 81       	ldd	r31, Y+1	; 0x01
     468:	00 84       	ldd	r0, Z+8	; 0x08
     46a:	f1 85       	ldd	r31, Z+9	; 0x09
     46c:	e0 2d       	mov	r30, r0
     46e:	09 95       	icall
     470:	89 2b       	or	r24, r25
     472:	39 f0       	breq	.+14     	; 0x482 <_ZN18CANControllerClass4peekEv+0x24>
     474:	8b a5       	ldd	r24, Y+43	; 0x2b
     476:	9c a5       	ldd	r25, Y+44	; 0x2c
     478:	c8 0f       	add	r28, r24
     47a:	d9 1f       	adc	r29, r25
     47c:	8d a5       	ldd	r24, Y+45	; 0x2d
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	02 c0       	rjmp	.+4      	; 0x486 <_ZN18CANControllerClass4peekEv+0x28>
     482:	8f ef       	ldi	r24, 0xFF	; 255
     484:	9f ef       	ldi	r25, 0xFF	; 255
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	08 95       	ret

0000048c <_ZN18CANControllerClass3endEv>:
     48c:	08 95       	ret

0000048e <_ZN18CANControllerClass9onReceiveEPFviE>:
     48e:	fc 01       	movw	r30, r24
     490:	75 87       	std	Z+13, r23	; 0x0d
     492:	64 87       	std	Z+12, r22	; 0x0c
     494:	08 95       	ret

00000496 <_ZN18CANControllerClass6filterEii>:
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	08 95       	ret

0000049c <_ZN18CANControllerClass14filterExtendedEll>:
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	08 95       	ret

000004a2 <_ZN18CANControllerClass11parsePacketEv>:
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	08 95       	ret

000004a8 <_ZN18CANControllerClassD0Ev>:
     4a8:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <_ZdlPv>

000004ac <_ZN18CANControllerClass5writeEPKhj>:
     4ac:	0f 93       	push	r16
     4ae:	1f 93       	push	r17
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	fc 01       	movw	r30, r24
     4b6:	26 85       	ldd	r18, Z+14	; 0x0e
     4b8:	22 23       	and	r18, r18
     4ba:	e1 f0       	breq	.+56     	; 0x4f4 <_ZN18CANControllerClass5writeEPKhj+0x48>
     4bc:	27 89       	ldd	r18, Z+23	; 0x17
     4be:	30 8d       	ldd	r19, Z+24	; 0x18
     4c0:	e8 e0       	ldi	r30, 0x08	; 8
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	e2 1b       	sub	r30, r18
     4c6:	f3 0b       	sbc	r31, r19
     4c8:	ea 01       	movw	r28, r20
     4ca:	e4 17       	cp	r30, r20
     4cc:	f5 07       	cpc	r31, r21
     4ce:	08 f4       	brcc	.+2      	; 0x4d2 <_ZN18CANControllerClass5writeEPKhj+0x26>
     4d0:	ef 01       	movw	r28, r30
     4d2:	8c 01       	movw	r16, r24
     4d4:	c9 01       	movw	r24, r18
     4d6:	49 96       	adiw	r24, 0x19	; 25
     4d8:	ae 01       	movw	r20, r28
     4da:	80 0f       	add	r24, r16
     4dc:	91 1f       	adc	r25, r17
     4de:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <memcpy>
     4e2:	f8 01       	movw	r30, r16
     4e4:	87 89       	ldd	r24, Z+23	; 0x17
     4e6:	90 8d       	ldd	r25, Z+24	; 0x18
     4e8:	8c 0f       	add	r24, r28
     4ea:	9d 1f       	adc	r25, r29
     4ec:	90 8f       	std	Z+24, r25	; 0x18
     4ee:	87 8b       	std	Z+23, r24	; 0x17
     4f0:	ce 01       	movw	r24, r28
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <_ZN18CANControllerClass5writeEPKhj+0x4c>
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	08 95       	ret

00000502 <_ZN18CANControllerClass9endPacketEv>:
     502:	fc 01       	movw	r30, r24
     504:	86 85       	ldd	r24, Z+14	; 0x0e
     506:	88 23       	and	r24, r24
     508:	41 f0       	breq	.+16     	; 0x51a <_ZN18CANControllerClass9endPacketEv+0x18>
     50a:	16 86       	std	Z+14, r1	; 0x0e
     50c:	85 89       	ldd	r24, Z+21	; 0x15
     50e:	96 89       	ldd	r25, Z+22	; 0x16
     510:	97 fd       	sbrc	r25, 7
     512:	06 c0       	rjmp	.+12     	; 0x520 <_ZN18CANControllerClass9endPacketEv+0x1e>
     514:	90 8f       	std	Z+24, r25	; 0x18
     516:	87 8b       	std	Z+23, r24	; 0x17
     518:	03 c0       	rjmp	.+6      	; 0x520 <_ZN18CANControllerClass9endPacketEv+0x1e>
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	08 95       	ret
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	08 95       	ret

00000526 <_ZN18CANControllerClassC1Ev>:
     526:	fc 01       	movw	r30, r24
     528:	13 82       	std	Z+3, r1	; 0x03
     52a:	12 82       	std	Z+2, r1	; 0x02
     52c:	88 ee       	ldi	r24, 0xE8	; 232
     52e:	93 e0       	ldi	r25, 0x03	; 3
     530:	a0 e0       	ldi	r26, 0x00	; 0
     532:	b0 e0       	ldi	r27, 0x00	; 0
     534:	84 83       	std	Z+4, r24	; 0x04
     536:	95 83       	std	Z+5, r25	; 0x05
     538:	a6 83       	std	Z+6, r26	; 0x06
     53a:	b7 83       	std	Z+7, r27	; 0x07
     53c:	8d e5       	ldi	r24, 0x5D	; 93
     53e:	93 e0       	ldi	r25, 0x03	; 3
     540:	91 83       	std	Z+1, r25	; 0x01
     542:	80 83       	st	Z, r24
     544:	15 86       	std	Z+13, r1	; 0x0d
     546:	14 86       	std	Z+12, r1	; 0x0c
     548:	16 86       	std	Z+14, r1	; 0x0e
     54a:	8f ef       	ldi	r24, 0xFF	; 255
     54c:	9f ef       	ldi	r25, 0xFF	; 255
     54e:	dc 01       	movw	r26, r24
     550:	87 87       	std	Z+15, r24	; 0x0f
     552:	90 8b       	std	Z+16, r25	; 0x10
     554:	a1 8b       	std	Z+17, r26	; 0x11
     556:	b2 8b       	std	Z+18, r27	; 0x12
     558:	21 e0       	ldi	r18, 0x01	; 1
     55a:	23 8b       	std	Z+19, r18	; 0x13
     55c:	14 8a       	std	Z+20, r1	; 0x14
     55e:	16 8a       	std	Z+22, r1	; 0x16
     560:	15 8a       	std	Z+21, r1	; 0x15
     562:	10 8e       	std	Z+24, r1	; 0x18
     564:	17 8a       	std	Z+23, r1	; 0x17
     566:	81 a3       	std	Z+33, r24	; 0x21
     568:	92 a3       	std	Z+34, r25	; 0x22
     56a:	a3 a3       	std	Z+35, r26	; 0x23
     56c:	b4 a3       	std	Z+36, r27	; 0x24
     56e:	15 a2       	std	Z+37, r1	; 0x25
     570:	16 a2       	std	Z+38, r1	; 0x26
     572:	10 a6       	std	Z+40, r1	; 0x28
     574:	17 a2       	std	Z+39, r1	; 0x27
     576:	12 a6       	std	Z+42, r1	; 0x2a
     578:	11 a6       	std	Z+41, r1	; 0x29
     57a:	14 a6       	std	Z+44, r1	; 0x2c
     57c:	13 a6       	std	Z+43, r1	; 0x2b
     57e:	40 e0       	ldi	r20, 0x00	; 0
     580:	50 e0       	ldi	r21, 0x00	; 0
     582:	ba 01       	movw	r22, r20
     584:	cf 01       	movw	r24, r30
     586:	0c 94 72 0b 	jmp	0x16e4	; 0x16e4 <_ZN6Stream10setTimeoutEm>

0000058a <_ZN18CANControllerClass19beginExtendedPacketElib>:

int CANControllerClass::beginExtendedPacket(long id, int dlc, bool rtr)
{
     58a:	0f 93       	push	r16
     58c:	fc 01       	movw	r30, r24
  if (id < 0 || id > 0x1FFFFFFF) {
     58e:	41 15       	cp	r20, r1
     590:	51 05       	cpc	r21, r1
     592:	61 05       	cpc	r22, r1
     594:	80 e2       	ldi	r24, 0x20	; 32
     596:	78 07       	cpc	r23, r24
     598:	c0 f4       	brcc	.+48     	; 0x5ca <_ZN18CANControllerClass19beginExtendedPacketElib+0x40>
    return 0;
  }

  if (dlc > 8) {
     59a:	29 30       	cpi	r18, 0x09	; 9
     59c:	31 05       	cpc	r19, r1
     59e:	ac f4       	brge	.+42     	; 0x5ca <_ZN18CANControllerClass19beginExtendedPacketElib+0x40>
    return 0;
  }

  _packetBegun = true;
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	86 87       	std	Z+14, r24	; 0x0e
  _txId = id;
     5a4:	47 87       	std	Z+15, r20	; 0x0f
     5a6:	50 8b       	std	Z+16, r21	; 0x10
     5a8:	61 8b       	std	Z+17, r22	; 0x11
     5aa:	72 8b       	std	Z+18, r23	; 0x12
  _txExtended = true;
     5ac:	83 8b       	std	Z+19, r24	; 0x13
  _txRtr = rtr;
     5ae:	04 8b       	std	Z+20, r16	; 0x14
  _txDlc = dlc;
     5b0:	36 8b       	std	Z+22, r19	; 0x16
     5b2:	25 8b       	std	Z+21, r18	; 0x15
  _txLength = 0;
     5b4:	10 8e       	std	Z+24, r1	; 0x18
     5b6:	17 8a       	std	Z+23, r1	; 0x17

  memset(_txData, 0x00, sizeof(_txData));
     5b8:	79 96       	adiw	r30, 0x19	; 25
     5ba:	88 e0       	ldi	r24, 0x08	; 8
     5bc:	df 01       	movw	r26, r30
     5be:	1d 92       	st	X+, r1
     5c0:	8a 95       	dec	r24
     5c2:	e9 f7       	brne	.-6      	; 0x5be <_ZN18CANControllerClass19beginExtendedPacketElib+0x34>

  return 1;
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <_ZN18CANControllerClass19beginExtendedPacketElib+0x44>
}

int CANControllerClass::beginExtendedPacket(long id, int dlc, bool rtr)
{
  if (id < 0 || id > 0x1FFFFFFF) {
    return 0;
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
  _txLength = 0;

  memset(_txData, 0x00, sizeof(_txData));

  return 1;
}
     5ce:	0f 91       	pop	r16
     5d0:	08 95       	ret

000005d2 <_ZN18CANControllerClass8packetIdEv>:
  return 0;
}

long CANControllerClass::packetId()
{
  return _rxId;
     5d2:	fc 01       	movw	r30, r24
     5d4:	61 a1       	ldd	r22, Z+33	; 0x21
     5d6:	72 a1       	ldd	r23, Z+34	; 0x22
     5d8:	83 a1       	ldd	r24, Z+35	; 0x23
     5da:	94 a1       	ldd	r25, Z+36	; 0x24
}
     5dc:	08 95       	ret

000005de <_ZN12MCP2515ClassD1Ev>:
    if (b < 16) {
      out.print('0');
    }
    out.println(b, HEX);
  }
}
     5de:	2d e8       	ldi	r18, 0x8D	; 141
     5e0:	33 e0       	ldi	r19, 0x03	; 3
     5e2:	fc 01       	movw	r30, r24
     5e4:	31 83       	std	Z+1, r19	; 0x01
     5e6:	20 83       	st	Z, r18
     5e8:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <_ZN18CANControllerClassD1Ev>

000005ec <_ZN12MCP2515ClassD0Ev>:
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	ec 01       	movw	r28, r24
     5f2:	0e 94 ef 02 	call	0x5de	; 0x5de <_ZN12MCP2515ClassD1Ev>
     5f6:	ce 01       	movw	r24, r28
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <_ZdlPv>

00000600 <_ZN8SPIClass16beginTransactionE11SPISettings>:
     600:	20 91 1f 04 	lds	r18, 0x041F	; 0x80041f <_ZN8SPIClass13interruptModeE>
     604:	22 23       	and	r18, r18
     606:	99 f0       	breq	.+38     	; 0x62e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     608:	4f b7       	in	r20, 0x3f	; 63
     60a:	f8 94       	cli
     60c:	20 91 1f 04 	lds	r18, 0x041F	; 0x80041f <_ZN8SPIClass13interruptModeE>
     610:	21 30       	cpi	r18, 0x01	; 1
     612:	59 f4       	brne	.+22     	; 0x62a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
     614:	2d b3       	in	r18, 0x1d	; 29
     616:	20 93 1d 04 	sts	0x041D, r18	; 0x80041d <_ZN8SPIClass13interruptSaveE>
     61a:	3d b3       	in	r19, 0x1d	; 29
     61c:	20 91 1e 04 	lds	r18, 0x041E	; 0x80041e <_ZN8SPIClass13interruptMaskE>
     620:	20 95       	com	r18
     622:	23 23       	and	r18, r19
     624:	2d bb       	out	0x1d, r18	; 29
     626:	4f bf       	out	0x3f, r20	; 63
     628:	02 c0       	rjmp	.+4      	; 0x62e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     62a:	40 93 1d 04 	sts	0x041D, r20	; 0x80041d <_ZN8SPIClass13interruptSaveE>
     62e:	8c bd       	out	0x2c, r24	; 44
     630:	9d bd       	out	0x2d, r25	; 45
     632:	08 95       	ret

00000634 <_ZN8SPIClass8transferEh>:
     634:	8e bd       	out	0x2e, r24	; 46
     636:	00 00       	nop
     638:	0d b4       	in	r0, 0x2d	; 45
     63a:	07 fe       	sbrs	r0, 7
     63c:	fd cf       	rjmp	.-6      	; 0x638 <_ZN8SPIClass8transferEh+0x4>
     63e:	8e b5       	in	r24, 0x2e	; 46
     640:	08 95       	ret

00000642 <_ZN8SPIClass14endTransactionEv>:
     642:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <_ZN8SPIClass13interruptModeE>
     646:	88 23       	and	r24, r24
     648:	61 f0       	breq	.+24     	; 0x662 <_ZN8SPIClass14endTransactionEv+0x20>
     64a:	9f b7       	in	r25, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	20 91 1f 04 	lds	r18, 0x041F	; 0x80041f <_ZN8SPIClass13interruptModeE>
     652:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <_ZN8SPIClass13interruptSaveE>
     656:	21 30       	cpi	r18, 0x01	; 1
     658:	19 f4       	brne	.+6      	; 0x660 <_ZN8SPIClass14endTransactionEv+0x1e>
     65a:	8d bb       	out	0x1d, r24	; 29
     65c:	9f bf       	out	0x3f, r25	; 63
     65e:	08 95       	ret
     660:	8f bf       	out	0x3f, r24	; 63
     662:	08 95       	ret

00000664 <_ZN12MCP2515ClassC1Ev>:
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	ec 01       	movw	r28, r24
     66a:	0e 94 93 02 	call	0x526	; 0x526 <_ZN18CANControllerClassC1Ev>
     66e:	8d e8       	ldi	r24, 0x8D	; 141
     670:	93 e0       	ldi	r25, 0x03	; 3
     672:	99 83       	std	Y+1, r25	; 0x01
     674:	88 83       	st	Y, r24
     676:	80 e5       	ldi	r24, 0x50	; 80
     678:	8d ab       	std	Y+53, r24	; 0x35
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	8e ab       	std	Y+54, r24	; 0x36
     67e:	8a e0       	ldi	r24, 0x0A	; 10
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	98 af       	std	Y+56, r25	; 0x38
     684:	8f ab       	std	Y+55, r24	; 0x37
     686:	82 e0       	ldi	r24, 0x02	; 2
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	9a af       	std	Y+58, r25	; 0x3a
     68c:	89 af       	std	Y+57, r24	; 0x39
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	94 e2       	ldi	r25, 0x24	; 36
     692:	a4 ef       	ldi	r26, 0xF4	; 244
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	8b af       	std	Y+59, r24	; 0x3b
     698:	9c af       	std	Y+60, r25	; 0x3c
     69a:	ad af       	std	Y+61, r26	; 0x3d
     69c:	be af       	std	Y+62, r27	; 0x3e
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	08 95       	ret

000006a4 <_ZN12MCP2515Class5resetEv>:
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	ec 01       	movw	r28, r24
     6aa:	8d a9       	ldd	r24, Y+53	; 0x35
     6ac:	9e a9       	ldd	r25, Y+54	; 0x36
     6ae:	0e 94 00 03 	call	0x600	; 0x600 <_ZN8SPIClass16beginTransactionE11SPISettings>
     6b2:	60 e0       	ldi	r22, 0x00	; 0
     6b4:	8f a9       	ldd	r24, Y+55	; 0x37
     6b6:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <digitalWrite>
     6ba:	80 ec       	ldi	r24, 0xC0	; 192
     6bc:	0e 94 1a 03 	call	0x634	; 0x634 <_ZN8SPIClass8transferEh>
     6c0:	61 e0       	ldi	r22, 0x01	; 1
     6c2:	8f a9       	ldd	r24, Y+55	; 0x37
     6c4:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <digitalWrite>
     6c8:	0e 94 21 03 	call	0x642	; 0x642 <_ZN8SPIClass14endTransactionEv>
     6cc:	8a e0       	ldi	r24, 0x0A	; 10
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <delayMicroseconds>

000006d8 <_ZN12MCP2515Class12readRegisterEh>:
     6d8:	1f 93       	push	r17
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	ec 01       	movw	r28, r24
     6e0:	16 2f       	mov	r17, r22
     6e2:	8d a9       	ldd	r24, Y+53	; 0x35
     6e4:	9e a9       	ldd	r25, Y+54	; 0x36
     6e6:	0e 94 00 03 	call	0x600	; 0x600 <_ZN8SPIClass16beginTransactionE11SPISettings>
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	8f a9       	ldd	r24, Y+55	; 0x37
     6ee:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <digitalWrite>
     6f2:	83 e0       	ldi	r24, 0x03	; 3
     6f4:	0e 94 1a 03 	call	0x634	; 0x634 <_ZN8SPIClass8transferEh>
     6f8:	81 2f       	mov	r24, r17
     6fa:	0e 94 1a 03 	call	0x634	; 0x634 <_ZN8SPIClass8transferEh>
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	0e 94 1a 03 	call	0x634	; 0x634 <_ZN8SPIClass8transferEh>
     704:	18 2f       	mov	r17, r24
     706:	61 e0       	ldi	r22, 0x01	; 1
     708:	8f a9       	ldd	r24, Y+55	; 0x37
     70a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <digitalWrite>
     70e:	0e 94 21 03 	call	0x642	; 0x642 <_ZN8SPIClass14endTransactionEv>
     712:	81 2f       	mov	r24, r17
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
     71a:	08 95       	ret

0000071c <_ZN12MCP2515Class15handleInterruptEv>:

  delayMicroseconds(10);
}

void MCP2515Class::handleInterrupt()
{
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	ec 01       	movw	r28, r24
  if (readRegister(REG_CANINTF) == 0) {
     726:	6c e2       	ldi	r22, 0x2C	; 44
     728:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN12MCP2515Class12readRegisterEh>
     72c:	88 23       	and	r24, r24
     72e:	a9 f0       	breq	.+42     	; 0x75a <_ZN12MCP2515Class15handleInterruptEv+0x3e>
    return;
  }

  while (parsePacket()) {
     730:	e8 81       	ld	r30, Y
     732:	f9 81       	ldd	r31, Y+1	; 0x01
     734:	04 88       	ldd	r0, Z+20	; 0x14
     736:	f5 89       	ldd	r31, Z+21	; 0x15
     738:	e0 2d       	mov	r30, r0
     73a:	ce 01       	movw	r24, r28
     73c:	09 95       	icall
     73e:	89 2b       	or	r24, r25
     740:	61 f0       	breq	.+24     	; 0x75a <_ZN12MCP2515Class15handleInterruptEv+0x3e>
    _onReceive(available());
     742:	0c 85       	ldd	r16, Y+12	; 0x0c
     744:	1d 85       	ldd	r17, Y+13	; 0x0d
     746:	e8 81       	ld	r30, Y
     748:	f9 81       	ldd	r31, Y+1	; 0x01
     74a:	00 84       	ldd	r0, Z+8	; 0x08
     74c:	f1 85       	ldd	r31, Z+9	; 0x09
     74e:	e0 2d       	mov	r30, r0
     750:	ce 01       	movw	r24, r28
     752:	09 95       	icall
     754:	f8 01       	movw	r30, r16
     756:	09 95       	icall
     758:	eb cf       	rjmp	.-42     	; 0x730 <_ZN12MCP2515Class15handleInterruptEv+0x14>
  }
}
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	1f 91       	pop	r17
     760:	0f 91       	pop	r16
     762:	08 95       	ret

00000764 <_ZN12MCP2515Class11onInterruptEv>:
  SPI.endTransaction();
}

void MCP2515Class::onInterrupt()
{
  CAN.handleInterrupt();
     764:	8e ed       	ldi	r24, 0xDE	; 222
     766:	93 e0       	ldi	r25, 0x03	; 3
     768:	0c 94 8e 03 	jmp	0x71c	; 0x71c <_ZN12MCP2515Class15handleInterruptEv>

0000076c <_ZN12MCP2515Class14modifyRegisterEhhh>:

  return value;
}

void MCP2515Class::modifyRegister(uint8_t address, uint8_t mask, uint8_t value)
{
     76c:	ff 92       	push	r15
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	ec 01       	movw	r28, r24
     778:	f6 2e       	mov	r15, r22
     77a:	04 2f       	mov	r16, r20
     77c:	12 2f       	mov	r17, r18
  SPI.beginTransaction(_spiSettings);
     77e:	8d a9       	ldd	r24, Y+53	; 0x35
     780:	9e a9       	ldd	r25, Y+54	; 0x36
     782:	0e 94 00 03 	call	0x600	; 0x600 <_ZN8SPIClass16beginTransactionE11SPISettings>
  digitalWrite(_csPin, LOW);
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	8f a9       	ldd	r24, Y+55	; 0x37
     78a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <digitalWrite>
  SPI.transfer(0x05);
     78e:	85 e0       	ldi	r24, 0x05	; 5
     790:	0e 94 1a 03 	call	0x634	; 0x634 <_ZN8SPIClass8transferEh>
  SPI.transfer(address);
     794:	8f 2d       	mov	r24, r15
     796:	0e 94 1a 03 	call	0x634	; 0x634 <_ZN8SPIClass8transferEh>
  SPI.transfer(mask);
     79a:	80 2f       	mov	r24, r16
     79c:	0e 94 1a 03 	call	0x634	; 0x634 <_ZN8SPIClass8transferEh>
  SPI.transfer(value);
     7a0:	81 2f       	mov	r24, r17
     7a2:	0e 94 1a 03 	call	0x634	; 0x634 <_ZN8SPIClass8transferEh>
  digitalWrite(_csPin, HIGH);
     7a6:	61 e0       	ldi	r22, 0x01	; 1
     7a8:	8f a9       	ldd	r24, Y+55	; 0x37
     7aa:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <digitalWrite>
  SPI.endTransaction();
}
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	1f 91       	pop	r17
     7b4:	0f 91       	pop	r16
     7b6:	ff 90       	pop	r15
  SPI.transfer(0x05);
  SPI.transfer(address);
  SPI.transfer(mask);
  SPI.transfer(value);
  digitalWrite(_csPin, HIGH);
  SPI.endTransaction();
     7b8:	0c 94 21 03 	jmp	0x642	; 0x642 <_ZN8SPIClass14endTransactionEv>

000007bc <_ZN12MCP2515Class11parsePacketEv>:

  return (readRegister(REG_TXBnCTRL(n)) & 0x70) ? 0 : 1;
}

int MCP2515Class::parsePacket()
{
     7bc:	9f 92       	push	r9
     7be:	af 92       	push	r10
     7c0:	bf 92       	push	r11
     7c2:	cf 92       	push	r12
     7c4:	df 92       	push	r13
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	ec 01       	movw	r28, r24
  int n;

  uint8_t intf = readRegister(REG_CANINTF);
     7d4:	6c e2       	ldi	r22, 0x2C	; 44
     7d6:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN12MCP2515Class12readRegisterEh>

  if (intf & FLAG_RXnIF(0)) {
     7da:	80 fd       	sbrc	r24, 0
     7dc:	10 c0       	rjmp	.+32     	; 0x7fe <_ZN12MCP2515Class11parsePacketEv+0x42>
    n = 0;
  } else if (intf & FLAG_RXnIF(1)) {
     7de:	81 fd       	sbrc	r24, 1
     7e0:	10 c0       	rjmp	.+32     	; 0x802 <_ZN12MCP2515Class11parsePacketEv+0x46>
    n = 1;
  } else {
    _rxId = -1;
     7e2:	8f ef       	ldi	r24, 0xFF	; 255
     7e4:	9f ef       	ldi	r25, 0xFF	; 255
     7e6:	dc 01       	movw	r26, r24
     7e8:	89 a3       	std	Y+33, r24	; 0x21
     7ea:	9a a3       	std	Y+34, r25	; 0x22
     7ec:	ab a3       	std	Y+35, r26	; 0x23
     7ee:	bc a3       	std	Y+36, r27	; 0x24
    _rxExtended = false;
     7f0:	1d a2       	std	Y+37, r1	; 0x25
    _rxRtr = false;
     7f2:	1e a2       	std	Y+38, r1	; 0x26
    _rxLength = 0;
     7f4:	1a a6       	std	Y+42, r1	; 0x2a
     7f6:	19 a6       	std	Y+41, r1	; 0x29
    return 0;
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	a0 c0       	rjmp	.+320    	; 0x93e <__stack+0x3f>
  int n;

  uint8_t intf = readRegister(REG_CANINTF);

  if (intf & FLAG_RXnIF(0)) {
    n = 0;
     7fe:	00 e0       	ldi	r16, 0x00	; 0
     800:	01 c0       	rjmp	.+2      	; 0x804 <_ZN12MCP2515Class11parsePacketEv+0x48>
  } else if (intf & FLAG_RXnIF(1)) {
    n = 1;
     802:	01 e0       	ldi	r16, 0x01	; 1
    _rxRtr = false;
    _rxLength = 0;
    return 0;
  }

  _rxExtended = (readRegister(REG_RXBnSIDL(n)) & FLAG_IDE) ? true : false;
     804:	10 2f       	mov	r17, r16
     806:	12 95       	swap	r17
     808:	10 7f       	andi	r17, 0xF0	; 240
     80a:	42 e6       	ldi	r20, 0x62	; 98
     80c:	a4 2e       	mov	r10, r20
     80e:	a1 0e       	add	r10, r17
     810:	6a 2d       	mov	r22, r10
     812:	ce 01       	movw	r24, r28
     814:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN12MCP2515Class12readRegisterEh>
     818:	83 fb       	bst	r24, 3
     81a:	88 27       	eor	r24, r24
     81c:	80 f9       	bld	r24, 0
     81e:	8d a3       	std	Y+37, r24	; 0x25

  uint32_t idA = ((readRegister(REG_RXBnSIDH(n)) << 3) & 0x07f8) | ((readRegister(REG_RXBnSIDL(n)) >> 5) & 0x07);
     820:	61 e6       	ldi	r22, 0x61	; 97
     822:	61 0f       	add	r22, r17
     824:	ce 01       	movw	r24, r28
     826:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN12MCP2515Class12readRegisterEh>
     82a:	c8 2e       	mov	r12, r24
     82c:	6a 2d       	mov	r22, r10
     82e:	ce 01       	movw	r24, r28
     830:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN12MCP2515Class12readRegisterEh>
     834:	98 e0       	ldi	r25, 0x08	; 8
     836:	c9 9e       	mul	r12, r25
     838:	60 01       	movw	r12, r0
     83a:	11 24       	eor	r1, r1
     83c:	82 95       	swap	r24
     83e:	86 95       	lsr	r24
     840:	87 70       	andi	r24, 0x07	; 7
     842:	c8 2a       	or	r12, r24
  if (_rxExtended) {
     844:	8d a1       	ldd	r24, Y+37	; 0x25
     846:	0d 2c       	mov	r0, r13
     848:	00 0c       	add	r0, r0
     84a:	ee 08       	sbc	r14, r14
     84c:	ff 08       	sbc	r15, r15
     84e:	55 e6       	ldi	r21, 0x65	; 101
     850:	b5 2e       	mov	r11, r21
     852:	b1 0e       	add	r11, r17
     854:	88 23       	and	r24, r24
     856:	89 f1       	breq	.+98     	; 0x8ba <_ZN12MCP2515Class11parsePacketEv+0xfe>
    uint32_t idB = (((uint32_t)(readRegister(REG_RXBnSIDL(n)) & 0x03) << 16) & 0x30000) | ((readRegister(REG_RXBnEID8(n)) << 8) & 0xff00) | readRegister(REG_RXBnEID0(n));
     858:	6a 2d       	mov	r22, r10
     85a:	ce 01       	movw	r24, r28
     85c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN12MCP2515Class12readRegisterEh>
     860:	98 2e       	mov	r9, r24
     862:	63 e6       	ldi	r22, 0x63	; 99
     864:	61 0f       	add	r22, r17
     866:	ce 01       	movw	r24, r28
     868:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN12MCP2515Class12readRegisterEh>
     86c:	a8 2e       	mov	r10, r24
     86e:	64 e6       	ldi	r22, 0x64	; 100
     870:	61 0f       	add	r22, r17
     872:	ce 01       	movw	r24, r28
     874:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN12MCP2515Class12readRegisterEh>

    _rxId = (idA << 18) | idB;
     878:	99 2d       	mov	r25, r9
     87a:	93 70       	andi	r25, 0x03	; 3
     87c:	22 e1       	ldi	r18, 0x12	; 18
     87e:	cc 0c       	add	r12, r12
     880:	dd 1c       	adc	r13, r13
     882:	ee 1c       	adc	r14, r14
     884:	ff 1c       	adc	r15, r15
     886:	2a 95       	dec	r18
     888:	d1 f7       	brne	.-12     	; 0x87e <_ZN12MCP2515Class11parsePacketEv+0xc2>
     88a:	c8 2a       	or	r12, r24
     88c:	e9 2a       	or	r14, r25
     88e:	8a 2d       	mov	r24, r10
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	98 2f       	mov	r25, r24
     894:	88 27       	eor	r24, r24
     896:	a0 e0       	ldi	r26, 0x00	; 0
     898:	b0 e0       	ldi	r27, 0x00	; 0
     89a:	c8 2a       	or	r12, r24
     89c:	d9 2a       	or	r13, r25
     89e:	ea 2a       	or	r14, r26
     8a0:	fb 2a       	or	r15, r27
     8a2:	c9 a2       	std	Y+33, r12	; 0x21
     8a4:	da a2       	std	Y+34, r13	; 0x22
     8a6:	eb a2       	std	Y+35, r14	; 0x23
     8a8:	fc a2       	std	Y+36, r15	; 0x24
    _rxRtr = (readRegister(REG_RXBnDLC(n)) & FLAG_RTR) ? true : false;
     8aa:	6b 2d       	mov	r22, r11
     8ac:	ce 01       	movw	r24, r28
     8ae:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN12MCP2515Class12readRegisterEh>
     8b2:	86 fb       	bst	r24, 6
     8b4:	88 27       	eor	r24, r24
     8b6:	80 f9       	bld	r24, 0
     8b8:	0a c0       	rjmp	.+20     	; 0x8ce <_ZN12MCP2515Class11parsePacketEv+0x112>
  } else {
    _rxId = idA;
     8ba:	c9 a2       	std	Y+33, r12	; 0x21
     8bc:	da a2       	std	Y+34, r13	; 0x22
     8be:	eb a2       	std	Y+35, r14	; 0x23
     8c0:	fc a2       	std	Y+36, r15	; 0x24
    _rxRtr = (readRegister(REG_RXBnSIDL(n)) & FLAG_SRR) ? true : false;
     8c2:	6a 2d       	mov	r22, r10
     8c4:	ce 01       	movw	r24, r28
     8c6:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN12MCP2515Class12readRegisterEh>
     8ca:	82 95       	swap	r24
     8cc:	81 70       	andi	r24, 0x01	; 1
     8ce:	8e a3       	std	Y+38, r24	; 0x26
  }
  _rxDlc = readRegister(REG_RXBnDLC(n)) & 0x0f;
     8d0:	6b 2d       	mov	r22, r11
     8d2:	ce 01       	movw	r24, r28
     8d4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN12MCP2515Class12readRegisterEh>
     8d8:	8f 70       	andi	r24, 0x0F	; 15
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	98 a7       	std	Y+40, r25	; 0x28
     8de:	8f a3       	std	Y+39, r24	; 0x27
  _rxIndex = 0;
     8e0:	1c a6       	std	Y+44, r1	; 0x2c
     8e2:	1b a6       	std	Y+43, r1	; 0x2b

  if (_rxRtr) {
     8e4:	2e a1       	ldd	r18, Y+38	; 0x26
     8e6:	22 23       	and	r18, r18
     8e8:	19 f0       	breq	.+6      	; 0x8f0 <_ZN12MCP2515Class11parsePacketEv+0x134>
    _rxLength = 0;
     8ea:	1a a6       	std	Y+42, r1	; 0x2a
     8ec:	19 a6       	std	Y+41, r1	; 0x29
     8ee:	1a c0       	rjmp	.+52     	; 0x924 <__stack+0x25>
  } else {
    _rxLength = _rxDlc;
     8f0:	9a a7       	std	Y+42, r25	; 0x2a
     8f2:	89 a7       	std	Y+41, r24	; 0x29
     8f4:	1a 59       	subi	r17, 0x9A	; 154
     8f6:	6e 01       	movw	r12, r28
     8f8:	ed e2       	ldi	r30, 0x2D	; 45
     8fa:	ce 0e       	add	r12, r30
     8fc:	d1 1c       	adc	r13, r1

    for (int i = 0; i < _rxLength; i++) {
     8fe:	e1 2c       	mov	r14, r1
     900:	f1 2c       	mov	r15, r1
     902:	89 a5       	ldd	r24, Y+41	; 0x29
     904:	9a a5       	ldd	r25, Y+42	; 0x2a
     906:	e8 16       	cp	r14, r24
     908:	f9 06       	cpc	r15, r25
     90a:	64 f4       	brge	.+24     	; 0x924 <__stack+0x25>
      _rxData[i] = readRegister(REG_RXBnD0(n) + i);
     90c:	61 2f       	mov	r22, r17
     90e:	ce 01       	movw	r24, r28
     910:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN12MCP2515Class12readRegisterEh>
     914:	f6 01       	movw	r30, r12
     916:	81 93       	st	Z+, r24
     918:	6f 01       	movw	r12, r30
  if (_rxRtr) {
    _rxLength = 0;
  } else {
    _rxLength = _rxDlc;

    for (int i = 0; i < _rxLength; i++) {
     91a:	ff ef       	ldi	r31, 0xFF	; 255
     91c:	ef 1a       	sub	r14, r31
     91e:	ff 0a       	sbc	r15, r31
     920:	1f 5f       	subi	r17, 0xFF	; 255
     922:	ef cf       	rjmp	.-34     	; 0x902 <__stack+0x3>
      _rxData[i] = readRegister(REG_RXBnD0(n) + i);
    }
  }

  modifyRegister(REG_CANINTF, FLAG_RXnIF(n), 0x00);
     924:	41 e0       	ldi	r20, 0x01	; 1
     926:	50 e0       	ldi	r21, 0x00	; 0
     928:	01 c0       	rjmp	.+2      	; 0x92c <__stack+0x2d>
     92a:	44 0f       	add	r20, r20
     92c:	0a 95       	dec	r16
     92e:	ea f7       	brpl	.-6      	; 0x92a <__stack+0x2b>
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	6c e2       	ldi	r22, 0x2C	; 44
     934:	ce 01       	movw	r24, r28
     936:	0e 94 b6 03 	call	0x76c	; 0x76c <_ZN12MCP2515Class14modifyRegisterEhhh>

  return _rxDlc;
     93a:	8f a1       	ldd	r24, Y+39	; 0x27
     93c:	98 a5       	ldd	r25, Y+40	; 0x28
}
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	ff 90       	pop	r15
     948:	ef 90       	pop	r14
     94a:	df 90       	pop	r13
     94c:	cf 90       	pop	r12
     94e:	bf 90       	pop	r11
     950:	af 90       	pop	r10
     952:	9f 90       	pop	r9
     954:	08 95       	ret

00000956 <_ZN12MCP2515Class13writeRegisterEhh>:
  digitalWrite(_csPin, HIGH);
  SPI.endTransaction();
}

void MCP2515Class::writeRegister(uint8_t address, uint8_t value)
{
     956:	0f 93       	push	r16
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	ec 01       	movw	r28, r24
     960:	06 2f       	mov	r16, r22
     962:	14 2f       	mov	r17, r20
  SPI.beginTransaction(_spiSettings);
     964:	8d a9       	ldd	r24, Y+53	; 0x35
     966:	9e a9       	ldd	r25, Y+54	; 0x36
     968:	0e 94 00 03 	call	0x600	; 0x600 <_ZN8SPIClass16beginTransactionE11SPISettings>
  digitalWrite(_csPin, LOW);
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	8f a9       	ldd	r24, Y+55	; 0x37
     970:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <digitalWrite>
  SPI.transfer(0x02);
     974:	82 e0       	ldi	r24, 0x02	; 2
     976:	0e 94 1a 03 	call	0x634	; 0x634 <_ZN8SPIClass8transferEh>
  SPI.transfer(address);
     97a:	80 2f       	mov	r24, r16
     97c:	0e 94 1a 03 	call	0x634	; 0x634 <_ZN8SPIClass8transferEh>
  SPI.transfer(value);
     980:	81 2f       	mov	r24, r17
     982:	0e 94 1a 03 	call	0x634	; 0x634 <_ZN8SPIClass8transferEh>
  digitalWrite(_csPin, HIGH);
     986:	61 e0       	ldi	r22, 0x01	; 1
     988:	8f a9       	ldd	r24, Y+55	; 0x37
     98a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <digitalWrite>
  SPI.endTransaction();
}
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
  digitalWrite(_csPin, LOW);
  SPI.transfer(0x02);
  SPI.transfer(address);
  SPI.transfer(value);
  digitalWrite(_csPin, HIGH);
  SPI.endTransaction();
     996:	0c 94 21 03 	jmp	0x642	; 0x642 <_ZN8SPIClass14endTransactionEv>

0000099a <_ZN12MCP2515Class6filterEii>:
#endif
  }
}

int MCP2515Class::filter(int id, int mask)
{
     99a:	cf 92       	push	r12
     99c:	df 92       	push	r13
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	ec 01       	movw	r28, r24
     9ac:	7b 01       	movw	r14, r22
     9ae:	8a 01       	movw	r16, r20
  id &= 0x7ff;
  mask &= 0x7ff;

  // config mode
  writeRegister(REG_CANCTRL, 0x80);
     9b0:	40 e8       	ldi	r20, 0x80	; 128
     9b2:	6f e0       	ldi	r22, 0x0F	; 15
     9b4:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x80) {
     9b8:	6f e0       	ldi	r22, 0x0F	; 15
     9ba:	ce 01       	movw	r24, r28
     9bc:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN12MCP2515Class12readRegisterEh>
     9c0:	80 38       	cpi	r24, 0x80	; 128
     9c2:	09 f0       	breq	.+2      	; 0x9c6 <_ZN12MCP2515Class6filterEii+0x2c>
     9c4:	7d c0       	rjmp	.+250    	; 0xac0 <_ZN12MCP2515Class6filterEii+0x126>
  }
}

int MCP2515Class::filter(int id, int mask)
{
  id &= 0x7ff;
     9c6:	87 e0       	ldi	r24, 0x07	; 7
     9c8:	f8 22       	and	r15, r24
  mask &= 0x7ff;
     9ca:	17 70       	andi	r17, 0x07	; 7
    return 0;
  }

  for (int n = 0; n < 2; n++) {
    // standard only
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM0);
     9cc:	40 e2       	ldi	r20, 0x20	; 32
     9ce:	60 e6       	ldi	r22, 0x60	; 96
     9d0:	ce 01       	movw	r24, r28
     9d2:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM0);
     9d6:	40 e2       	ldi	r20, 0x20	; 32
     9d8:	60 e6       	ldi	r22, 0x60	; 96
     9da:	ce 01       	movw	r24, r28
     9dc:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>

    writeRegister(REG_RXMnSIDH(n), mask >> 3);
     9e0:	68 01       	movw	r12, r16
     9e2:	83 e0       	ldi	r24, 0x03	; 3
     9e4:	d5 94       	asr	r13
     9e6:	c7 94       	ror	r12
     9e8:	8a 95       	dec	r24
     9ea:	e1 f7       	brne	.-8      	; 0x9e4 <_ZN12MCP2515Class6filterEii+0x4a>
     9ec:	4c 2d       	mov	r20, r12
     9ee:	60 e2       	ldi	r22, 0x20	; 32
     9f0:	ce 01       	movw	r24, r28
     9f2:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnSIDL(n), mask << 5);
     9f6:	02 95       	swap	r16
     9f8:	00 0f       	add	r16, r16
     9fa:	00 7e       	andi	r16, 0xE0	; 224
     9fc:	40 2f       	mov	r20, r16
     9fe:	61 e2       	ldi	r22, 0x21	; 33
     a00:	ce 01       	movw	r24, r28
     a02:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID8(n), 0);
     a06:	40 e0       	ldi	r20, 0x00	; 0
     a08:	62 e2       	ldi	r22, 0x22	; 34
     a0a:	ce 01       	movw	r24, r28
     a0c:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID0(n), 0);
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	63 e2       	ldi	r22, 0x23	; 35
     a14:	ce 01       	movw	r24, r28
     a16:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    return 0;
  }

  for (int n = 0; n < 2; n++) {
    // standard only
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM0);
     a1a:	40 e2       	ldi	r20, 0x20	; 32
     a1c:	60 e7       	ldi	r22, 0x70	; 112
     a1e:	ce 01       	movw	r24, r28
     a20:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM0);
     a24:	40 e2       	ldi	r20, 0x20	; 32
     a26:	60 e7       	ldi	r22, 0x70	; 112
     a28:	ce 01       	movw	r24, r28
     a2a:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>

    writeRegister(REG_RXMnSIDH(n), mask >> 3);
     a2e:	4c 2d       	mov	r20, r12
     a30:	64 e2       	ldi	r22, 0x24	; 36
     a32:	ce 01       	movw	r24, r28
     a34:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnSIDL(n), mask << 5);
     a38:	40 2f       	mov	r20, r16
     a3a:	65 e2       	ldi	r22, 0x25	; 37
     a3c:	ce 01       	movw	r24, r28
     a3e:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID8(n), 0);
     a42:	40 e0       	ldi	r20, 0x00	; 0
     a44:	66 e2       	ldi	r22, 0x26	; 38
     a46:	ce 01       	movw	r24, r28
     a48:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID0(n), 0);
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	67 e2       	ldi	r22, 0x27	; 39
     a50:	ce 01       	movw	r24, r28
     a52:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
  }

  for (int n = 0; n < 6; n++) {
    writeRegister(REG_RXFnSIDH(n), id >> 3);
     a56:	a7 01       	movw	r20, r14
     a58:	93 e0       	ldi	r25, 0x03	; 3
     a5a:	55 95       	asr	r21
     a5c:	47 95       	ror	r20
     a5e:	9a 95       	dec	r25
     a60:	e1 f7       	brne	.-8      	; 0xa5a <_ZN12MCP2515Class6filterEii+0xc0>
     a62:	04 2f       	mov	r16, r20
    writeRegister(REG_RXFnSIDL(n), id << 5);
     a64:	e2 94       	swap	r14
     a66:	ee 0c       	add	r14, r14
     a68:	20 ee       	ldi	r18, 0xE0	; 224
     a6a:	e2 22       	and	r14, r18
     a6c:	10 e0       	ldi	r17, 0x00	; 0
    writeRegister(REG_RXMnEID8(n), 0);
    writeRegister(REG_RXMnEID0(n), 0);
  }

  for (int n = 0; n < 6; n++) {
    writeRegister(REG_RXFnSIDH(n), id >> 3);
     a6e:	40 2f       	mov	r20, r16
     a70:	61 2f       	mov	r22, r17
     a72:	ce 01       	movw	r24, r28
     a74:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXFnSIDL(n), id << 5);
     a78:	61 e0       	ldi	r22, 0x01	; 1
     a7a:	61 0f       	add	r22, r17
     a7c:	4e 2d       	mov	r20, r14
     a7e:	ce 01       	movw	r24, r28
     a80:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXFnEID8(n), 0);
     a84:	62 e0       	ldi	r22, 0x02	; 2
     a86:	61 0f       	add	r22, r17
     a88:	40 e0       	ldi	r20, 0x00	; 0
     a8a:	ce 01       	movw	r24, r28
     a8c:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXFnEID0(n), 0);
     a90:	63 e0       	ldi	r22, 0x03	; 3
     a92:	61 0f       	add	r22, r17
     a94:	40 e0       	ldi	r20, 0x00	; 0
     a96:	ce 01       	movw	r24, r28
     a98:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
     a9c:	1c 5f       	subi	r17, 0xFC	; 252
    writeRegister(REG_RXMnSIDL(n), mask << 5);
    writeRegister(REG_RXMnEID8(n), 0);
    writeRegister(REG_RXMnEID0(n), 0);
  }

  for (int n = 0; n < 6; n++) {
     a9e:	18 31       	cpi	r17, 0x18	; 24
     aa0:	31 f7       	brne	.-52     	; 0xa6e <_ZN12MCP2515Class6filterEii+0xd4>
    writeRegister(REG_RXFnEID8(n), 0);
    writeRegister(REG_RXFnEID0(n), 0);
  }

  // normal mode
  writeRegister(REG_CANCTRL, 0x00);
     aa2:	40 e0       	ldi	r20, 0x00	; 0
     aa4:	6f e0       	ldi	r22, 0x0F	; 15
     aa6:	ce 01       	movw	r24, r28
     aa8:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x00) {
     aac:	6f e0       	ldi	r22, 0x0F	; 15
     aae:	ce 01       	movw	r24, r28
     ab0:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN12MCP2515Class12readRegisterEh>
  mask &= 0x7ff;

  // config mode
  writeRegister(REG_CANCTRL, 0x80);
  if (readRegister(REG_CANCTRL) != 0x80) {
    return 0;
     ab4:	21 e0       	ldi	r18, 0x01	; 1
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	81 11       	cpse	r24, r1
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	82 2f       	mov	r24, r18
     abe:	02 c0       	rjmp	.+4      	; 0xac4 <_ZN12MCP2515Class6filterEii+0x12a>
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
  if (readRegister(REG_CANCTRL) != 0x00) {
    return 0;
  }

  return 1;
}
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	df 90       	pop	r13
     ad2:	cf 90       	pop	r12
     ad4:	08 95       	ret

00000ad6 <_ZN12MCP2515Class14filterExtendedEll>:

int MCP2515Class::filterExtended(long id, long mask)
{
     ad6:	4f 92       	push	r4
     ad8:	5f 92       	push	r5
     ada:	6f 92       	push	r6
     adc:	7f 92       	push	r7
     ade:	8f 92       	push	r8
     ae0:	9f 92       	push	r9
     ae2:	af 92       	push	r10
     ae4:	bf 92       	push	r11
     ae6:	cf 92       	push	r12
     ae8:	df 92       	push	r13
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	00 d0       	rcall	.+0      	; 0xaf8 <_ZN12MCP2515Class14filterExtendedEll+0x22>
     af8:	00 d0       	rcall	.+0      	; 0xafa <_ZN12MCP2515Class14filterExtendedEll+0x24>
     afa:	00 d0       	rcall	.+0      	; 0xafc <_ZN12MCP2515Class14filterExtendedEll+0x26>
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
     b00:	9e 83       	std	Y+6, r25	; 0x06
     b02:	8d 83       	std	Y+5, r24	; 0x05
     b04:	4a 01       	movw	r8, r20
     b06:	5b 01       	movw	r10, r22
     b08:	68 01       	movw	r12, r16
     b0a:	79 01       	movw	r14, r18
  id &= 0x1FFFFFFF;
  mask &= 0x1FFFFFFF;

  // config mode
  writeRegister(REG_CANCTRL, 0x80);
     b0c:	40 e8       	ldi	r20, 0x80	; 128
     b0e:	6f e0       	ldi	r22, 0x0F	; 15
     b10:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x80) {
     b14:	6f e0       	ldi	r22, 0x0F	; 15
     b16:	8d 81       	ldd	r24, Y+5	; 0x05
     b18:	9e 81       	ldd	r25, Y+6	; 0x06
     b1a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN12MCP2515Class12readRegisterEh>
     b1e:	80 38       	cpi	r24, 0x80	; 128
     b20:	09 f0       	breq	.+2      	; 0xb24 <_ZN12MCP2515Class14filterExtendedEll+0x4e>
     b22:	be c0       	rjmp	.+380    	; 0xca0 <_ZN12MCP2515Class14filterExtendedEll+0x1ca>
}

int MCP2515Class::filterExtended(long id, long mask)
{
  id &= 0x1FFFFFFF;
  mask &= 0x1FFFFFFF;
     b24:	8f e1       	ldi	r24, 0x1F	; 31
     b26:	f8 22       	and	r15, r24
  for (int n = 0; n < 2; n++) {
    // extended only
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM1);
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM1);

    writeRegister(REG_RXMnSIDH(n), mask >> 21);
     b28:	d7 01       	movw	r26, r14
     b2a:	c6 01       	movw	r24, r12
     b2c:	25 e1       	ldi	r18, 0x15	; 21
     b2e:	b5 95       	asr	r27
     b30:	a7 95       	ror	r26
     b32:	97 95       	ror	r25
     b34:	87 95       	ror	r24
     b36:	2a 95       	dec	r18
     b38:	d1 f7       	brne	.-12     	; 0xb2e <_ZN12MCP2515Class14filterExtendedEll+0x58>
     b3a:	89 83       	std	Y+1, r24	; 0x01
     b3c:	9a 83       	std	Y+2, r25	; 0x02
     b3e:	ab 83       	std	Y+3, r26	; 0x03
     b40:	bc 83       	std	Y+4, r27	; 0x04
    writeRegister(REG_RXMnSIDL(n), (((mask >> 18) & 0x03) << 5) | FLAG_EXIDE | ((mask >> 16) & 0x03));
     b42:	d7 01       	movw	r26, r14
     b44:	c6 01       	movw	r24, r12
     b46:	3d e0       	ldi	r19, 0x0D	; 13
     b48:	b6 95       	lsr	r27
     b4a:	a7 95       	ror	r26
     b4c:	97 95       	ror	r25
     b4e:	87 95       	ror	r24
     b50:	3a 95       	dec	r19
     b52:	d1 f7       	brne	.-12     	; 0xb48 <_ZN12MCP2515Class14filterExtendedEll+0x72>
     b54:	80 76       	andi	r24, 0x60	; 96
     b56:	99 27       	eor	r25, r25
     b58:	aa 27       	eor	r26, r26
     b5a:	bb 27       	eor	r27, r27
     b5c:	1e 2d       	mov	r17, r14
     b5e:	13 70       	andi	r17, 0x03	; 3
     b60:	18 60       	ori	r17, 0x08	; 8
     b62:	18 2b       	or	r17, r24
    writeRegister(REG_RXMnEID8(n), (mask >> 8) & 0xff);
     b64:	4d 2c       	mov	r4, r13
     b66:	5e 2c       	mov	r5, r14
     b68:	6f 2c       	mov	r6, r15
     b6a:	77 24       	eor	r7, r7
     b6c:	67 fc       	sbrc	r6, 7
     b6e:	7a 94       	dec	r7
    return 0;
  }

  for (int n = 0; n < 2; n++) {
    // extended only
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM1);
     b70:	40 e4       	ldi	r20, 0x40	; 64
     b72:	60 e6       	ldi	r22, 0x60	; 96
     b74:	8d 81       	ldd	r24, Y+5	; 0x05
     b76:	9e 81       	ldd	r25, Y+6	; 0x06
     b78:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM1);
     b7c:	40 e4       	ldi	r20, 0x40	; 64
     b7e:	60 e6       	ldi	r22, 0x60	; 96
     b80:	8d 81       	ldd	r24, Y+5	; 0x05
     b82:	9e 81       	ldd	r25, Y+6	; 0x06
     b84:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>

    writeRegister(REG_RXMnSIDH(n), mask >> 21);
     b88:	49 81       	ldd	r20, Y+1	; 0x01
     b8a:	60 e2       	ldi	r22, 0x20	; 32
     b8c:	8d 81       	ldd	r24, Y+5	; 0x05
     b8e:	9e 81       	ldd	r25, Y+6	; 0x06
     b90:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnSIDL(n), (((mask >> 18) & 0x03) << 5) | FLAG_EXIDE | ((mask >> 16) & 0x03));
     b94:	41 2f       	mov	r20, r17
     b96:	61 e2       	ldi	r22, 0x21	; 33
     b98:	8d 81       	ldd	r24, Y+5	; 0x05
     b9a:	9e 81       	ldd	r25, Y+6	; 0x06
     b9c:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID8(n), (mask >> 8) & 0xff);
     ba0:	44 2d       	mov	r20, r4
     ba2:	62 e2       	ldi	r22, 0x22	; 34
     ba4:	8d 81       	ldd	r24, Y+5	; 0x05
     ba6:	9e 81       	ldd	r25, Y+6	; 0x06
     ba8:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID0(n), mask & 0xff);
     bac:	4c 2d       	mov	r20, r12
     bae:	63 e2       	ldi	r22, 0x23	; 35
     bb0:	8d 81       	ldd	r24, Y+5	; 0x05
     bb2:	9e 81       	ldd	r25, Y+6	; 0x06
     bb4:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    return 0;
  }

  for (int n = 0; n < 2; n++) {
    // extended only
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM1);
     bb8:	40 e4       	ldi	r20, 0x40	; 64
     bba:	60 e7       	ldi	r22, 0x70	; 112
     bbc:	8d 81       	ldd	r24, Y+5	; 0x05
     bbe:	9e 81       	ldd	r25, Y+6	; 0x06
     bc0:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM1);
     bc4:	40 e4       	ldi	r20, 0x40	; 64
     bc6:	60 e7       	ldi	r22, 0x70	; 112
     bc8:	8d 81       	ldd	r24, Y+5	; 0x05
     bca:	9e 81       	ldd	r25, Y+6	; 0x06
     bcc:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>

    writeRegister(REG_RXMnSIDH(n), mask >> 21);
     bd0:	49 81       	ldd	r20, Y+1	; 0x01
     bd2:	64 e2       	ldi	r22, 0x24	; 36
     bd4:	8d 81       	ldd	r24, Y+5	; 0x05
     bd6:	9e 81       	ldd	r25, Y+6	; 0x06
     bd8:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnSIDL(n), (((mask >> 18) & 0x03) << 5) | FLAG_EXIDE | ((mask >> 16) & 0x03));
     bdc:	41 2f       	mov	r20, r17
     bde:	65 e2       	ldi	r22, 0x25	; 37
     be0:	8d 81       	ldd	r24, Y+5	; 0x05
     be2:	9e 81       	ldd	r25, Y+6	; 0x06
     be4:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID8(n), (mask >> 8) & 0xff);
     be8:	44 2d       	mov	r20, r4
     bea:	66 e2       	ldi	r22, 0x26	; 38
     bec:	8d 81       	ldd	r24, Y+5	; 0x05
     bee:	9e 81       	ldd	r25, Y+6	; 0x06
     bf0:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID0(n), mask & 0xff);
     bf4:	4c 2d       	mov	r20, r12
     bf6:	67 e2       	ldi	r22, 0x27	; 39
     bf8:	8d 81       	ldd	r24, Y+5	; 0x05
     bfa:	9e 81       	ldd	r25, Y+6	; 0x06
     bfc:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
  return 1;
}

int MCP2515Class::filterExtended(long id, long mask)
{
  id &= 0x1FFFFFFF;
     c00:	9f e1       	ldi	r25, 0x1F	; 31
     c02:	b9 22       	and	r11, r25
    writeRegister(REG_RXMnEID8(n), (mask >> 8) & 0xff);
    writeRegister(REG_RXMnEID0(n), mask & 0xff);
  }

  for (int n = 0; n < 6; n++) {
    writeRegister(REG_RXFnSIDH(n), id >> 21);
     c04:	d5 01       	movw	r26, r10
     c06:	c4 01       	movw	r24, r8
     c08:	55 e1       	ldi	r21, 0x15	; 21
     c0a:	b5 95       	asr	r27
     c0c:	a7 95       	ror	r26
     c0e:	97 95       	ror	r25
     c10:	87 95       	ror	r24
     c12:	5a 95       	dec	r21
     c14:	d1 f7       	brne	.-12     	; 0xc0a <_ZN12MCP2515Class14filterExtendedEll+0x134>
     c16:	e8 2e       	mov	r14, r24
    writeRegister(REG_RXFnSIDL(n), (((id >> 18) & 0x03) << 5) | FLAG_EXIDE | ((id >> 16) & 0x03));
     c18:	8a 2d       	mov	r24, r10
     c1a:	83 70       	andi	r24, 0x03	; 3
     c1c:	28 2f       	mov	r18, r24
     c1e:	28 60       	ori	r18, 0x08	; 8
     c20:	d5 01       	movw	r26, r10
     c22:	c4 01       	movw	r24, r8
     c24:	6d e0       	ldi	r22, 0x0D	; 13
     c26:	b6 95       	lsr	r27
     c28:	a7 95       	ror	r26
     c2a:	97 95       	ror	r25
     c2c:	87 95       	ror	r24
     c2e:	6a 95       	dec	r22
     c30:	d1 f7       	brne	.-12     	; 0xc26 <_ZN12MCP2515Class14filterExtendedEll+0x150>
     c32:	80 76       	andi	r24, 0x60	; 96
     c34:	99 27       	eor	r25, r25
     c36:	aa 27       	eor	r26, r26
     c38:	bb 27       	eor	r27, r27
     c3a:	f2 2e       	mov	r15, r18
     c3c:	f8 2a       	or	r15, r24
    writeRegister(REG_RXFnEID8(n), (id >> 8) & 0xff);
     c3e:	d9 2c       	mov	r13, r9
     c40:	10 e0       	ldi	r17, 0x00	; 0
    writeRegister(REG_RXMnEID8(n), (mask >> 8) & 0xff);
    writeRegister(REG_RXMnEID0(n), mask & 0xff);
  }

  for (int n = 0; n < 6; n++) {
    writeRegister(REG_RXFnSIDH(n), id >> 21);
     c42:	4e 2d       	mov	r20, r14
     c44:	61 2f       	mov	r22, r17
     c46:	8d 81       	ldd	r24, Y+5	; 0x05
     c48:	9e 81       	ldd	r25, Y+6	; 0x06
     c4a:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXFnSIDL(n), (((id >> 18) & 0x03) << 5) | FLAG_EXIDE | ((id >> 16) & 0x03));
     c4e:	61 e0       	ldi	r22, 0x01	; 1
     c50:	61 0f       	add	r22, r17
     c52:	4f 2d       	mov	r20, r15
     c54:	8d 81       	ldd	r24, Y+5	; 0x05
     c56:	9e 81       	ldd	r25, Y+6	; 0x06
     c58:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXFnEID8(n), (id >> 8) & 0xff);
     c5c:	62 e0       	ldi	r22, 0x02	; 2
     c5e:	61 0f       	add	r22, r17
     c60:	4d 2d       	mov	r20, r13
     c62:	8d 81       	ldd	r24, Y+5	; 0x05
     c64:	9e 81       	ldd	r25, Y+6	; 0x06
     c66:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXFnEID0(n), id & 0xff);
     c6a:	63 e0       	ldi	r22, 0x03	; 3
     c6c:	61 0f       	add	r22, r17
     c6e:	48 2d       	mov	r20, r8
     c70:	8d 81       	ldd	r24, Y+5	; 0x05
     c72:	9e 81       	ldd	r25, Y+6	; 0x06
     c74:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
     c78:	1c 5f       	subi	r17, 0xFC	; 252
    writeRegister(REG_RXMnSIDL(n), (((mask >> 18) & 0x03) << 5) | FLAG_EXIDE | ((mask >> 16) & 0x03));
    writeRegister(REG_RXMnEID8(n), (mask >> 8) & 0xff);
    writeRegister(REG_RXMnEID0(n), mask & 0xff);
  }

  for (int n = 0; n < 6; n++) {
     c7a:	18 31       	cpi	r17, 0x18	; 24
     c7c:	11 f7       	brne	.-60     	; 0xc42 <_ZN12MCP2515Class14filterExtendedEll+0x16c>
    writeRegister(REG_RXFnEID8(n), (id >> 8) & 0xff);
    writeRegister(REG_RXFnEID0(n), id & 0xff);
  }

  // normal mode
  writeRegister(REG_CANCTRL, 0x00);
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	6f e0       	ldi	r22, 0x0F	; 15
     c82:	8d 81       	ldd	r24, Y+5	; 0x05
     c84:	9e 81       	ldd	r25, Y+6	; 0x06
     c86:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x00) {
     c8a:	6f e0       	ldi	r22, 0x0F	; 15
     c8c:	8d 81       	ldd	r24, Y+5	; 0x05
     c8e:	9e 81       	ldd	r25, Y+6	; 0x06
     c90:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN12MCP2515Class12readRegisterEh>
  mask &= 0x1FFFFFFF;

  // config mode
  writeRegister(REG_CANCTRL, 0x80);
  if (readRegister(REG_CANCTRL) != 0x80) {
    return 0;
     c94:	21 e0       	ldi	r18, 0x01	; 1
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	81 11       	cpse	r24, r1
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	82 2f       	mov	r24, r18
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <_ZN12MCP2515Class14filterExtendedEll+0x1ce>
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
  if (readRegister(REG_CANCTRL) != 0x00) {
    return 0;
  }

  return 1;
}
     ca4:	26 96       	adiw	r28, 0x06	; 6
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	ff 90       	pop	r15
     cba:	ef 90       	pop	r14
     cbc:	df 90       	pop	r13
     cbe:	cf 90       	pop	r12
     cc0:	bf 90       	pop	r11
     cc2:	af 90       	pop	r10
     cc4:	9f 90       	pop	r9
     cc6:	8f 90       	pop	r8
     cc8:	7f 90       	pop	r7
     cca:	6f 90       	pop	r6
     ccc:	5f 90       	pop	r5
     cce:	4f 90       	pop	r4
     cd0:	08 95       	ret

00000cd2 <_ZN12MCP2515Class7observeEv>:

int MCP2515Class::observe()
{
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	ec 01       	movw	r28, r24
  writeRegister(REG_CANCTRL, 0x80);
     cd8:	40 e8       	ldi	r20, 0x80	; 128
     cda:	6f e0       	ldi	r22, 0x0F	; 15
     cdc:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x80) {
     ce0:	6f e0       	ldi	r22, 0x0F	; 15
     ce2:	ce 01       	movw	r24, r28
     ce4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN12MCP2515Class12readRegisterEh>
     ce8:	21 e0       	ldi	r18, 0x01	; 1
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	80 38       	cpi	r24, 0x80	; 128
     cee:	11 f0       	breq	.+4      	; 0xcf4 <_ZN12MCP2515Class7observeEv+0x22>
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
  }

  return 1;
}
     cf4:	c9 01       	movw	r24, r18
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	08 95       	ret

00000cfc <_ZN12MCP2515Class8loopbackEv>:

int MCP2515Class::loopback()
{
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	ec 01       	movw	r28, r24
  writeRegister(REG_CANCTRL, 0x40);
     d02:	40 e4       	ldi	r20, 0x40	; 64
     d04:	6f e0       	ldi	r22, 0x0F	; 15
     d06:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x40) {
     d0a:	6f e0       	ldi	r22, 0x0F	; 15
     d0c:	ce 01       	movw	r24, r28
     d0e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN12MCP2515Class12readRegisterEh>
     d12:	21 e0       	ldi	r18, 0x01	; 1
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	80 34       	cpi	r24, 0x40	; 64
     d18:	11 f0       	breq	.+4      	; 0xd1e <_ZN12MCP2515Class8loopbackEv+0x22>
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
  }

  return 1;
}
     d1e:	c9 01       	movw	r24, r18
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <_ZN12MCP2515Class5sleepEv>:

int MCP2515Class::sleep()
{
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	ec 01       	movw	r28, r24
  writeRegister(REG_CANCTRL, 0x01);
     d2c:	41 e0       	ldi	r20, 0x01	; 1
     d2e:	6f e0       	ldi	r22, 0x0F	; 15
     d30:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x01) {
     d34:	6f e0       	ldi	r22, 0x0F	; 15
     d36:	ce 01       	movw	r24, r28
     d38:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN12MCP2515Class12readRegisterEh>
     d3c:	21 e0       	ldi	r18, 0x01	; 1
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	81 30       	cpi	r24, 0x01	; 1
     d42:	11 f0       	breq	.+4      	; 0xd48 <_ZN12MCP2515Class5sleepEv+0x22>
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
  }

  return 1;
}
     d48:	c9 01       	movw	r24, r18
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	08 95       	ret

00000d50 <_ZN12MCP2515Class6wakeupEv>:

int MCP2515Class::wakeup()
{
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	ec 01       	movw	r28, r24
  writeRegister(REG_CANCTRL, 0x00);
     d56:	40 e0       	ldi	r20, 0x00	; 0
     d58:	6f e0       	ldi	r22, 0x0F	; 15
     d5a:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x00) {
     d5e:	6f e0       	ldi	r22, 0x0F	; 15
     d60:	ce 01       	movw	r24, r28
     d62:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN12MCP2515Class12readRegisterEh>
     d66:	21 e0       	ldi	r18, 0x01	; 1
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	88 23       	and	r24, r24
     d6c:	11 f0       	breq	.+4      	; 0xd72 <_ZN12MCP2515Class6wakeupEv+0x22>
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
  }

  return 1;
}
     d72:	c9 01       	movw	r24, r18
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	08 95       	ret

00000d7a <_ZN12MCP2515Class5beginEl.part.3.constprop.6>:

MCP2515Class::~MCP2515Class()
{
}

int MCP2515Class::begin(long baudRate)
     d7a:	8f 92       	push	r8
     d7c:	9f 92       	push	r9
     d7e:	af 92       	push	r10
     d80:	bf 92       	push	r11
     d82:	cf 92       	push	r12
     d84:	df 92       	push	r13
     d86:	ef 92       	push	r14
     d88:	ff 92       	push	r15
     d8a:	0f 93       	push	r16
     d8c:	1f 93       	push	r17
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	c8 50       	subi	r28, 0x08	; 8
     d98:	d1 40       	sbci	r29, 0x01	; 1
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	de bf       	out	0x3e, r29	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	cd bf       	out	0x3d, r28	; 61
    { (long)16E6,   (long)50E3, { 0x07, 0xfa, 0x87 } },
    { (long)16E6,   (long)40E3, { 0x07, 0xff, 0x87 } },
    { (long)16E6,   (long)20E3, { 0x0f, 0xff, 0x87 } },
    { (long)16E6,   (long)10E3, { 0x1f, 0xff, 0x87 } },
    { (long)16E6,    (long)5E3, { 0x3f, 0xff, 0x87 } },
  };
     da4:	28 e0       	ldi	r18, 0x08	; 8
     da6:	31 e0       	ldi	r19, 0x01	; 1
     da8:	e8 e1       	ldi	r30, 0x18	; 24
     daa:	f1 e0       	ldi	r31, 0x01	; 1
     dac:	de 01       	movw	r26, r28
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	01 90       	ld	r0, Z+
     db2:	0d 92       	st	X+, r0
     db4:	21 50       	subi	r18, 0x01	; 1
     db6:	30 40       	sbci	r19, 0x00	; 0
     db8:	d9 f7       	brne	.-10     	; 0xdb0 <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x36>

  const uint8_t* cnf = NULL;

  for (unsigned int i = 0; i < (sizeof(CNF_MAPPER) / sizeof(CNF_MAPPER[0])); i++) {
    if (CNF_MAPPER[i].clockFrequency == _clockFrequency && CNF_MAPPER[i].baudRate == baudRate) {
     dba:	fc 01       	movw	r30, r24
     dbc:	c3 ac       	ldd	r12, Z+59	; 0x3b
     dbe:	d4 ac       	ldd	r13, Z+60	; 0x3c
     dc0:	e5 ac       	ldd	r14, Z+61	; 0x3d
     dc2:	f6 ac       	ldd	r15, Z+62	; 0x3e
     dc4:	fe 01       	movw	r30, r28
     dc6:	31 96       	adiw	r30, 0x01	; 1
    { (long)16E6,    (long)5E3, { 0x3f, 0xff, 0x87 } },
  };

  const uint8_t* cnf = NULL;

  for (unsigned int i = 0; i < (sizeof(CNF_MAPPER) / sizeof(CNF_MAPPER[0])); i++) {
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	30 e0       	ldi	r19, 0x00	; 0
    if (CNF_MAPPER[i].clockFrequency == _clockFrequency && CNF_MAPPER[i].baudRate == baudRate) {
     dcc:	80 80       	ld	r8, Z
     dce:	91 80       	ldd	r9, Z+1	; 0x01
     dd0:	a2 80       	ldd	r10, Z+2	; 0x02
     dd2:	b3 80       	ldd	r11, Z+3	; 0x03
     dd4:	8c 14       	cp	r8, r12
     dd6:	9d 04       	cpc	r9, r13
     dd8:	ae 04       	cpc	r10, r14
     dda:	bf 04       	cpc	r11, r15
     ddc:	09 f0       	breq	.+2      	; 0xde0 <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x66>
     dde:	54 c0       	rjmp	.+168    	; 0xe88 <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x10e>
     de0:	84 80       	ldd	r8, Z+4	; 0x04
     de2:	95 80       	ldd	r9, Z+5	; 0x05
     de4:	a6 80       	ldd	r10, Z+6	; 0x06
     de6:	b7 80       	ldd	r11, Z+7	; 0x07
     de8:	84 16       	cp	r8, r20
     dea:	95 06       	cpc	r9, r21
     dec:	a6 06       	cpc	r10, r22
     dee:	b7 06       	cpc	r11, r23
     df0:	09 f0       	breq	.+2      	; 0xdf4 <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x7a>
     df2:	4a c0       	rjmp	.+148    	; 0xe88 <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x10e>
     df4:	8c 01       	movw	r16, r24
      cnf = CNF_MAPPER[i].cnf;
     df6:	8b e0       	ldi	r24, 0x0B	; 11
     df8:	82 9f       	mul	r24, r18
     dfa:	70 01       	movw	r14, r0
     dfc:	83 9f       	mul	r24, r19
     dfe:	f0 0c       	add	r15, r0
     e00:	11 24       	eor	r1, r1
     e02:	f8 e0       	ldi	r31, 0x08	; 8
     e04:	ef 0e       	add	r14, r31
     e06:	f1 1c       	adc	r15, r1
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	8c 0f       	add	r24, r28
     e0e:	9d 1f       	adc	r25, r29
     e10:	e8 0e       	add	r14, r24
     e12:	f9 1e       	adc	r15, r25

  if (cnf == NULL) {
    return 0;
  }

  writeRegister(REG_CNF1, cnf[0]);
     e14:	f7 01       	movw	r30, r14
     e16:	40 81       	ld	r20, Z
     e18:	6a e2       	ldi	r22, 0x2A	; 42
     e1a:	c8 01       	movw	r24, r16
     e1c:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
  writeRegister(REG_CNF2, cnf[1]);
     e20:	f7 01       	movw	r30, r14
     e22:	41 81       	ldd	r20, Z+1	; 0x01
     e24:	69 e2       	ldi	r22, 0x29	; 41
     e26:	c8 01       	movw	r24, r16
     e28:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
  writeRegister(REG_CNF3, cnf[2]);
     e2c:	f7 01       	movw	r30, r14
     e2e:	42 81       	ldd	r20, Z+2	; 0x02
     e30:	68 e2       	ldi	r22, 0x28	; 40
     e32:	c8 01       	movw	r24, r16
     e34:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>

  writeRegister(REG_CANINTE, FLAG_RXnIE(1) | FLAG_RXnIE(0));
     e38:	43 e0       	ldi	r20, 0x03	; 3
     e3a:	6b e2       	ldi	r22, 0x2B	; 43
     e3c:	c8 01       	movw	r24, r16
     e3e:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
  writeRegister(REG_BFPCTRL, 0x00);
     e42:	40 e0       	ldi	r20, 0x00	; 0
     e44:	6c e0       	ldi	r22, 0x0C	; 12
     e46:	c8 01       	movw	r24, r16
     e48:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
  writeRegister(REG_TXRTSCTRL, 0x00);
     e4c:	40 e0       	ldi	r20, 0x00	; 0
     e4e:	6d e0       	ldi	r22, 0x0D	; 13
     e50:	c8 01       	movw	r24, r16
     e52:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
  writeRegister(REG_RXBnCTRL(0), FLAG_RXM1 | FLAG_RXM0);
     e56:	40 e6       	ldi	r20, 0x60	; 96
     e58:	60 e6       	ldi	r22, 0x60	; 96
     e5a:	c8 01       	movw	r24, r16
     e5c:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
  writeRegister(REG_RXBnCTRL(1), FLAG_RXM1 | FLAG_RXM0);
     e60:	40 e6       	ldi	r20, 0x60	; 96
     e62:	60 e7       	ldi	r22, 0x70	; 112
     e64:	c8 01       	movw	r24, r16
     e66:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>

  writeRegister(REG_CANCTRL, 0x00);
     e6a:	40 e0       	ldi	r20, 0x00	; 0
     e6c:	6f e0       	ldi	r22, 0x0F	; 15
     e6e:	c8 01       	movw	r24, r16
     e70:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x00) {
     e74:	6f e0       	ldi	r22, 0x0F	; 15
     e76:	c8 01       	movw	r24, r16
     e78:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN12MCP2515Class12readRegisterEh>
      break;
    }
  }

  if (cnf == NULL) {
    return 0;
     e7c:	21 e0       	ldi	r18, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	81 11       	cpse	r24, r1
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	82 2f       	mov	r24, r18
     e86:	09 c0       	rjmp	.+18     	; 0xe9a <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x120>
    { (long)16E6,    (long)5E3, { 0x3f, 0xff, 0x87 } },
  };

  const uint8_t* cnf = NULL;

  for (unsigned int i = 0; i < (sizeof(CNF_MAPPER) / sizeof(CNF_MAPPER[0])); i++) {
     e88:	2f 5f       	subi	r18, 0xFF	; 255
     e8a:	3f 4f       	sbci	r19, 0xFF	; 255
     e8c:	3b 96       	adiw	r30, 0x0b	; 11
     e8e:	28 31       	cpi	r18, 0x18	; 24
     e90:	31 05       	cpc	r19, r1
     e92:	09 f0       	breq	.+2      	; 0xe96 <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x11c>
     e94:	9b cf       	rjmp	.-202    	; 0xdcc <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x52>
      break;
    }
  }

  if (cnf == NULL) {
    return 0;
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	90 e0       	ldi	r25, 0x00	; 0
  if (readRegister(REG_CANCTRL) != 0x00) {
    return 0;
  }

  return 1;
}
     e9a:	c8 5f       	subi	r28, 0xF8	; 248
     e9c:	de 4f       	sbci	r29, 0xFE	; 254
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	ff 90       	pop	r15
     eb2:	ef 90       	pop	r14
     eb4:	df 90       	pop	r13
     eb6:	cf 90       	pop	r12
     eb8:	bf 90       	pop	r11
     eba:	af 90       	pop	r10
     ebc:	9f 90       	pop	r9
     ebe:	8f 90       	pop	r8
     ec0:	08 95       	ret

00000ec2 <_GLOBAL__sub_I__ZN12MCP2515ClassC2Ev>:
void MCP2515Class::onInterrupt()
{
  CAN.handleInterrupt();
}

MCP2515Class CAN;
     ec2:	8e ed       	ldi	r24, 0xDE	; 222
     ec4:	93 e0       	ldi	r25, 0x03	; 3
     ec6:	0c 94 32 03 	jmp	0x664	; 0x664 <_ZN12MCP2515ClassC1Ev>

00000eca <_GLOBAL__sub_D__ZN12MCP2515ClassC2Ev>:
     eca:	8e ed       	ldi	r24, 0xDE	; 222
     ecc:	93 e0       	ldi	r25, 0x03	; 3
     ece:	0c 94 ef 02 	jmp	0x5de	; 0x5de <_ZN12MCP2515ClassD1Ev>

00000ed2 <_ZN12MCP2515Class5beginEl>:
MCP2515Class::~MCP2515Class()
{
}

int MCP2515Class::begin(long baudRate)
{
     ed2:	cf 92       	push	r12
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	ec 01       	movw	r28, r24
     ee0:	6a 01       	movw	r12, r20
     ee2:	7b 01       	movw	r14, r22
  CANControllerClass::begin(baudRate);
     ee4:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_ZN18CANControllerClass5beginEl>

  pinMode(_csPin, OUTPUT);
     ee8:	61 e0       	ldi	r22, 0x01	; 1
     eea:	8f a9       	ldd	r24, Y+55	; 0x37
     eec:	0e 94 b2 0c 	call	0x1964	; 0x1964 <pinMode>

  // start SPI
  SPI.begin();
     ef0:	0e 94 bd 08 	call	0x117a	; 0x117a <_ZN8SPIClass5beginEv>

  reset();
     ef4:	ce 01       	movw	r24, r28
     ef6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN12MCP2515Class5resetEv>

  writeRegister(REG_CANCTRL, 0x80);
     efa:	40 e8       	ldi	r20, 0x80	; 128
     efc:	6f e0       	ldi	r22, 0x0F	; 15
     efe:	ce 01       	movw	r24, r28
     f00:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x80) {
     f04:	6f e0       	ldi	r22, 0x0F	; 15
     f06:	ce 01       	movw	r24, r28
     f08:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN12MCP2515Class12readRegisterEh>
     f0c:	80 38       	cpi	r24, 0x80	; 128
     f0e:	59 f4       	brne	.+22     	; 0xf26 <_ZN12MCP2515Class5beginEl+0x54>
     f10:	b7 01       	movw	r22, r14
     f12:	a6 01       	movw	r20, r12
     f14:	ce 01       	movw	r24, r28
  if (readRegister(REG_CANCTRL) != 0x00) {
    return 0;
  }

  return 1;
}
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	ff 90       	pop	r15
     f1c:	ef 90       	pop	r14
     f1e:	df 90       	pop	r13
     f20:	cf 90       	pop	r12
     f22:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <_ZN12MCP2515Class5beginEl.part.3.constprop.6>
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	ff 90       	pop	r15
     f30:	ef 90       	pop	r14
     f32:	df 90       	pop	r13
     f34:	cf 90       	pop	r12
     f36:	08 95       	ret

00000f38 <_ZN12MCP2515Class3endEv>:

void MCP2515Class::end()
{
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	ec 01       	movw	r28, r24
  SPI.end();
     f3e:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_ZN8SPIClass3endEv>

  CANControllerClass::end();
     f42:	ce 01       	movw	r24, r28
}
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28

void MCP2515Class::end()
{
  SPI.end();

  CANControllerClass::end();
     f48:	0c 94 46 02 	jmp	0x48c	; 0x48c <_ZN18CANControllerClass3endEv>

00000f4c <_ZN12MCP2515Class9endPacketEv>:
}

int MCP2515Class::endPacket()
{
     f4c:	ef 92       	push	r14
     f4e:	ff 92       	push	r15
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	ec 01       	movw	r28, r24
  if (!CANControllerClass::endPacket()) {
     f5a:	0e 94 81 02 	call	0x502	; 0x502 <_ZN18CANControllerClass9endPacketEv>
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	09 f4       	brne	.+2      	; 0xf64 <_ZN12MCP2515Class9endPacketEv+0x18>
     f62:	b4 c0       	rjmp	.+360    	; 0x10cc <_ZN12MCP2515Class9endPacketEv+0x180>
    return 0;
  }

  int n = 0;

  if (_txExtended) {
     f64:	8b 89       	ldd	r24, Y+19	; 0x13
     f66:	4f 85       	ldd	r20, Y+15	; 0x0f
     f68:	58 89       	ldd	r21, Y+16	; 0x10
     f6a:	69 89       	ldd	r22, Y+17	; 0x11
     f6c:	7a 89       	ldd	r23, Y+18	; 0x12
     f6e:	88 23       	and	r24, r24
     f70:	b9 f1       	breq	.+110    	; 0xfe0 <_ZN12MCP2515Class9endPacketEv+0x94>
    writeRegister(REG_TXBnSIDH(n), _txId >> 21);
     f72:	95 e1       	ldi	r25, 0x15	; 21
     f74:	75 95       	asr	r23
     f76:	67 95       	ror	r22
     f78:	57 95       	ror	r21
     f7a:	47 95       	ror	r20
     f7c:	9a 95       	dec	r25
     f7e:	d1 f7       	brne	.-12     	; 0xf74 <_ZN12MCP2515Class9endPacketEv+0x28>
     f80:	61 e3       	ldi	r22, 0x31	; 49
     f82:	ce 01       	movw	r24, r28
     f84:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_TXBnSIDL(n), (((_txId >> 18) & 0x07) << 5) | FLAG_EXIDE | ((_txId >> 16) & 0x03));
     f88:	8f 85       	ldd	r24, Y+15	; 0x0f
     f8a:	98 89       	ldd	r25, Y+16	; 0x10
     f8c:	a9 89       	ldd	r26, Y+17	; 0x11
     f8e:	ba 89       	ldd	r27, Y+18	; 0x12
     f90:	ac 01       	movw	r20, r24
     f92:	bd 01       	movw	r22, r26
     f94:	22 e1       	ldi	r18, 0x12	; 18
     f96:	75 95       	asr	r23
     f98:	67 95       	ror	r22
     f9a:	57 95       	ror	r21
     f9c:	47 95       	ror	r20
     f9e:	2a 95       	dec	r18
     fa0:	d1 f7       	brne	.-12     	; 0xf96 <_ZN12MCP2515Class9endPacketEv+0x4a>
     fa2:	35 e0       	ldi	r19, 0x05	; 5
     fa4:	44 0f       	add	r20, r20
     fa6:	55 1f       	adc	r21, r21
     fa8:	66 1f       	adc	r22, r22
     faa:	77 1f       	adc	r23, r23
     fac:	3a 95       	dec	r19
     fae:	d1 f7       	brne	.-12     	; 0xfa4 <_ZN12MCP2515Class9endPacketEv+0x58>
     fb0:	8a 2f       	mov	r24, r26
     fb2:	83 70       	andi	r24, 0x03	; 3
     fb4:	48 2b       	or	r20, r24
     fb6:	48 60       	ori	r20, 0x08	; 8
     fb8:	62 e3       	ldi	r22, 0x32	; 50
     fba:	ce 01       	movw	r24, r28
     fbc:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_TXBnEID8(n), (_txId >> 8) & 0xff);
     fc0:	4f 85       	ldd	r20, Y+15	; 0x0f
     fc2:	58 89       	ldd	r21, Y+16	; 0x10
     fc4:	69 89       	ldd	r22, Y+17	; 0x11
     fc6:	7a 89       	ldd	r23, Y+18	; 0x12
     fc8:	45 2f       	mov	r20, r21
     fca:	56 2f       	mov	r21, r22
     fcc:	67 2f       	mov	r22, r23
     fce:	77 27       	eor	r23, r23
     fd0:	67 fd       	sbrc	r22, 7
     fd2:	7a 95       	dec	r23
     fd4:	63 e3       	ldi	r22, 0x33	; 51
     fd6:	ce 01       	movw	r24, r28
     fd8:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_TXBnEID0(n), _txId & 0xff);
     fdc:	4f 85       	ldd	r20, Y+15	; 0x0f
     fde:	19 c0       	rjmp	.+50     	; 0x1012 <_ZN12MCP2515Class9endPacketEv+0xc6>
  } else {
    writeRegister(REG_TXBnSIDH(n), _txId >> 3);
     fe0:	83 e0       	ldi	r24, 0x03	; 3
     fe2:	75 95       	asr	r23
     fe4:	67 95       	ror	r22
     fe6:	57 95       	ror	r21
     fe8:	47 95       	ror	r20
     fea:	8a 95       	dec	r24
     fec:	d1 f7       	brne	.-12     	; 0xfe2 <_ZN12MCP2515Class9endPacketEv+0x96>
     fee:	61 e3       	ldi	r22, 0x31	; 49
     ff0:	ce 01       	movw	r24, r28
     ff2:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_TXBnSIDL(n), _txId << 5);
     ff6:	4f 85       	ldd	r20, Y+15	; 0x0f
     ff8:	42 95       	swap	r20
     ffa:	44 0f       	add	r20, r20
     ffc:	40 7e       	andi	r20, 0xE0	; 224
     ffe:	62 e3       	ldi	r22, 0x32	; 50
    1000:	ce 01       	movw	r24, r28
    1002:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_TXBnEID8(n), 0x00);
    1006:	40 e0       	ldi	r20, 0x00	; 0
    1008:	63 e3       	ldi	r22, 0x33	; 51
    100a:	ce 01       	movw	r24, r28
    100c:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_TXBnEID0(n), 0x00);
    1010:	40 e0       	ldi	r20, 0x00	; 0
    1012:	64 e3       	ldi	r22, 0x34	; 52
    1014:	ce 01       	movw	r24, r28
    1016:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
  }

  if (_txRtr) {
    101a:	8c 89       	ldd	r24, Y+20	; 0x14
    writeRegister(REG_TXBnDLC(n), 0x40 | _txLength);
    101c:	4f 89       	ldd	r20, Y+23	; 0x17
    writeRegister(REG_TXBnSIDL(n), _txId << 5);
    writeRegister(REG_TXBnEID8(n), 0x00);
    writeRegister(REG_TXBnEID0(n), 0x00);
  }

  if (_txRtr) {
    101e:	88 23       	and	r24, r24
    1020:	31 f0       	breq	.+12     	; 0x102e <_ZN12MCP2515Class9endPacketEv+0xe2>
    writeRegister(REG_TXBnDLC(n), 0x40 | _txLength);
    1022:	40 64       	ori	r20, 0x40	; 64
    1024:	65 e3       	ldi	r22, 0x35	; 53
    1026:	ce 01       	movw	r24, r28
    1028:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    102c:	1a c0       	rjmp	.+52     	; 0x1062 <_ZN12MCP2515Class9endPacketEv+0x116>
  } else {
    writeRegister(REG_TXBnDLC(n), _txLength);
    102e:	65 e3       	ldi	r22, 0x35	; 53
    1030:	ce 01       	movw	r24, r28
    1032:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
    1036:	7e 01       	movw	r14, r28
    1038:	89 e1       	ldi	r24, 0x19	; 25
    103a:	e8 0e       	add	r14, r24
    103c:	f1 1c       	adc	r15, r1

    for (int i = 0; i < _txLength; i++) {
    103e:	00 e0       	ldi	r16, 0x00	; 0
    1040:	10 e0       	ldi	r17, 0x00	; 0
    1042:	8f 89       	ldd	r24, Y+23	; 0x17
    1044:	98 8d       	ldd	r25, Y+24	; 0x18
    1046:	08 17       	cp	r16, r24
    1048:	19 07       	cpc	r17, r25
    104a:	5c f4       	brge	.+22     	; 0x1062 <_ZN12MCP2515Class9endPacketEv+0x116>
      writeRegister(REG_TXBnD0(n) + i, _txData[i]);
    104c:	f7 01       	movw	r30, r14
    104e:	41 91       	ld	r20, Z+
    1050:	7f 01       	movw	r14, r30
    1052:	66 e3       	ldi	r22, 0x36	; 54
    1054:	60 0f       	add	r22, r16
    1056:	ce 01       	movw	r24, r28
    1058:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>
  if (_txRtr) {
    writeRegister(REG_TXBnDLC(n), 0x40 | _txLength);
  } else {
    writeRegister(REG_TXBnDLC(n), _txLength);

    for (int i = 0; i < _txLength; i++) {
    105c:	0f 5f       	subi	r16, 0xFF	; 255
    105e:	1f 4f       	sbci	r17, 0xFF	; 255
    1060:	f0 cf       	rjmp	.-32     	; 0x1042 <_ZN12MCP2515Class9endPacketEv+0xf6>
      writeRegister(REG_TXBnD0(n) + i, _txData[i]);
    }
  }

  writeRegister(REG_TXBnCTRL(n), 0x08);
    1062:	48 e0       	ldi	r20, 0x08	; 8
    1064:	60 e3       	ldi	r22, 0x30	; 48
    1066:	ce 01       	movw	r24, r28
    1068:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN12MCP2515Class13writeRegisterEhh>

  bool aborted = false;
    106c:	10 e0       	ldi	r17, 0x00	; 0

  while (readRegister(REG_TXBnCTRL(n)) & 0x08) {
    106e:	60 e3       	ldi	r22, 0x30	; 48
    1070:	ce 01       	movw	r24, r28
    1072:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN12MCP2515Class12readRegisterEh>
    1076:	83 ff       	sbrs	r24, 3
    1078:	10 c0       	rjmp	.+32     	; 0x109a <_ZN12MCP2515Class9endPacketEv+0x14e>
    if (readRegister(REG_TXBnCTRL(n)) & 0x10) {
    107a:	60 e3       	ldi	r22, 0x30	; 48
    107c:	ce 01       	movw	r24, r28
    107e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN12MCP2515Class12readRegisterEh>
    1082:	84 ff       	sbrs	r24, 4
    1084:	07 c0       	rjmp	.+14     	; 0x1094 <_ZN12MCP2515Class9endPacketEv+0x148>
      // abort
      aborted = true;

      modifyRegister(REG_CANCTRL, 0x10, 0x10);
    1086:	20 e1       	ldi	r18, 0x10	; 16
    1088:	40 e1       	ldi	r20, 0x10	; 16
    108a:	6f e0       	ldi	r22, 0x0F	; 15
    108c:	ce 01       	movw	r24, r28
    108e:	0e 94 b6 03 	call	0x76c	; 0x76c <_ZN12MCP2515Class14modifyRegisterEhhh>
  bool aborted = false;

  while (readRegister(REG_TXBnCTRL(n)) & 0x08) {
    if (readRegister(REG_TXBnCTRL(n)) & 0x10) {
      // abort
      aborted = true;
    1092:	11 e0       	ldi	r17, 0x01	; 1

      modifyRegister(REG_CANCTRL, 0x10, 0x10);
    }

    yield();
    1094:	0e 94 0a 0b 	call	0x1614	; 0x1614 <yield>
    1098:	ea cf       	rjmp	.-44     	; 0x106e <_ZN12MCP2515Class9endPacketEv+0x122>
  }

  if (aborted) {
    109a:	11 23       	and	r17, r17
    109c:	31 f0       	breq	.+12     	; 0x10aa <_ZN12MCP2515Class9endPacketEv+0x15e>
    // clear abort command
    modifyRegister(REG_CANCTRL, 0x10, 0x00);
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	40 e1       	ldi	r20, 0x10	; 16
    10a2:	6f e0       	ldi	r22, 0x0F	; 15
    10a4:	ce 01       	movw	r24, r28
    10a6:	0e 94 b6 03 	call	0x76c	; 0x76c <_ZN12MCP2515Class14modifyRegisterEhhh>
  }

  modifyRegister(REG_CANINTF, FLAG_TXnIF(n), 0x00);
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	44 e0       	ldi	r20, 0x04	; 4
    10ae:	6c e2       	ldi	r22, 0x2C	; 44
    10b0:	ce 01       	movw	r24, r28
    10b2:	0e 94 b6 03 	call	0x76c	; 0x76c <_ZN12MCP2515Class14modifyRegisterEhhh>

  return (readRegister(REG_TXBnCTRL(n)) & 0x70) ? 0 : 1;
    10b6:	60 e3       	ldi	r22, 0x30	; 48
    10b8:	ce 01       	movw	r24, r28
    10ba:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN12MCP2515Class12readRegisterEh>
    10be:	80 77       	andi	r24, 0x70	; 112
    10c0:	31 e0       	ldi	r19, 0x01	; 1
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <_ZN12MCP2515Class9endPacketEv+0x17c>
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	83 2f       	mov	r24, r19
    10ca:	92 2f       	mov	r25, r18
}
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	ff 90       	pop	r15
    10d6:	ef 90       	pop	r14
    10d8:	08 95       	ret

000010da <_ZN12MCP2515Class9onReceiveEPFviE>:

  return _rxDlc;
}

void MCP2515Class::onReceive(void(*callback)(int))
{
    10da:	0f 93       	push	r16
    10dc:	1f 93       	push	r17
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	ec 01       	movw	r28, r24
    10e4:	8b 01       	movw	r16, r22
  CANControllerClass::onReceive(callback);
    10e6:	0e 94 47 02 	call	0x48e	; 0x48e <_ZN18CANControllerClass9onReceiveEPFviE>

  pinMode(_intPin, INPUT);
    10ea:	60 e0       	ldi	r22, 0x00	; 0
    10ec:	89 ad       	ldd	r24, Y+57	; 0x39
    10ee:	0e 94 b2 0c 	call	0x1964	; 0x1964 <pinMode>
    10f2:	89 ad       	ldd	r24, Y+57	; 0x39
    10f4:	9a ad       	ldd	r25, Y+58	; 0x3a

  if (callback) {
    10f6:	01 2b       	or	r16, r17
    10f8:	11 f1       	breq	.+68     	; 0x113e <_ZN12MCP2515Class9onReceiveEPFviE+0x64>
    SPI.usingInterrupt(digitalPinToInterrupt(_intPin));
    10fa:	82 30       	cpi	r24, 0x02	; 2
    10fc:	91 05       	cpc	r25, r1
    10fe:	21 f0       	breq	.+8      	; 0x1108 <_ZN12MCP2515Class9onReceiveEPFviE+0x2e>
    1100:	03 97       	sbiw	r24, 0x03	; 3
    1102:	21 f0       	breq	.+8      	; 0x110c <_ZN12MCP2515Class9onReceiveEPFviE+0x32>
    1104:	8f ef       	ldi	r24, 0xFF	; 255
    1106:	03 c0       	rjmp	.+6      	; 0x110e <_ZN12MCP2515Class9onReceiveEPFviE+0x34>
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	01 c0       	rjmp	.+2      	; 0x110e <_ZN12MCP2515Class9onReceiveEPFviE+0x34>
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	0e 94 07 09 	call	0x120e	; 0x120e <_ZN8SPIClass14usingInterruptEh>
    attachInterrupt(digitalPinToInterrupt(_intPin), MCP2515Class::onInterrupt, LOW);
    1112:	89 ad       	ldd	r24, Y+57	; 0x39
    1114:	9a ad       	ldd	r25, Y+58	; 0x3a
    1116:	82 30       	cpi	r24, 0x02	; 2
    1118:	91 05       	cpc	r25, r1
    111a:	21 f0       	breq	.+8      	; 0x1124 <_ZN12MCP2515Class9onReceiveEPFviE+0x4a>
    111c:	03 97       	sbiw	r24, 0x03	; 3
    111e:	21 f0       	breq	.+8      	; 0x1128 <_ZN12MCP2515Class9onReceiveEPFviE+0x4e>
    1120:	8f ef       	ldi	r24, 0xFF	; 255
    1122:	03 c0       	rjmp	.+6      	; 0x112a <_ZN12MCP2515Class9onReceiveEPFviE+0x50>
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	01 c0       	rjmp	.+2      	; 0x112a <_ZN12MCP2515Class9onReceiveEPFviE+0x50>
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	40 e0       	ldi	r20, 0x00	; 0
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	62 eb       	ldi	r22, 0xB2	; 178
    1130:	73 e0       	ldi	r23, 0x03	; 3
    detachInterrupt(digitalPinToInterrupt(_intPin));
#ifdef SPI_HAS_NOTUSINGINTERRUPT
    SPI.notUsingInterrupt(digitalPinToInterrupt(_intPin));
#endif
  }
}
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16

  pinMode(_intPin, INPUT);

  if (callback) {
    SPI.usingInterrupt(digitalPinToInterrupt(_intPin));
    attachInterrupt(digitalPinToInterrupt(_intPin), MCP2515Class::onInterrupt, LOW);
    113a:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <attachInterrupt>
  } else {
    detachInterrupt(digitalPinToInterrupt(_intPin));
    113e:	82 30       	cpi	r24, 0x02	; 2
    1140:	91 05       	cpc	r25, r1
    1142:	21 f0       	breq	.+8      	; 0x114c <_ZN12MCP2515Class9onReceiveEPFviE+0x72>
    1144:	03 97       	sbiw	r24, 0x03	; 3
    1146:	21 f0       	breq	.+8      	; 0x1150 <_ZN12MCP2515Class9onReceiveEPFviE+0x76>
    1148:	8f ef       	ldi	r24, 0xFF	; 255
    114a:	03 c0       	rjmp	.+6      	; 0x1152 <_ZN12MCP2515Class9onReceiveEPFviE+0x78>
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	01 c0       	rjmp	.+2      	; 0x1152 <_ZN12MCP2515Class9onReceiveEPFviE+0x78>
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	0e 94 99 0b 	call	0x1732	; 0x1732 <detachInterrupt>
#ifdef SPI_HAS_NOTUSINGINTERRUPT
    SPI.notUsingInterrupt(digitalPinToInterrupt(_intPin));
    1156:	89 ad       	ldd	r24, Y+57	; 0x39
    1158:	9a ad       	ldd	r25, Y+58	; 0x3a
    115a:	82 30       	cpi	r24, 0x02	; 2
    115c:	91 05       	cpc	r25, r1
    115e:	21 f0       	breq	.+8      	; 0x1168 <_ZN12MCP2515Class9onReceiveEPFviE+0x8e>
    1160:	03 97       	sbiw	r24, 0x03	; 3
    1162:	21 f0       	breq	.+8      	; 0x116c <_ZN12MCP2515Class9onReceiveEPFviE+0x92>
    1164:	8f ef       	ldi	r24, 0xFF	; 255
    1166:	03 c0       	rjmp	.+6      	; 0x116e <_ZN12MCP2515Class9onReceiveEPFviE+0x94>
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	01 c0       	rjmp	.+2      	; 0x116e <_ZN12MCP2515Class9onReceiveEPFviE+0x94>
    116c:	81 e0       	ldi	r24, 0x01	; 1
#endif
  }
}
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	1f 91       	pop	r17
    1174:	0f 91       	pop	r16
    SPI.usingInterrupt(digitalPinToInterrupt(_intPin));
    attachInterrupt(digitalPinToInterrupt(_intPin), MCP2515Class::onInterrupt, LOW);
  } else {
    detachInterrupt(digitalPinToInterrupt(_intPin));
#ifdef SPI_HAS_NOTUSINGINTERRUPT
    SPI.notUsingInterrupt(digitalPinToInterrupt(_intPin));
    1176:	0c 94 23 09 	jmp	0x1246	; 0x1246 <_ZN8SPIClass17notUsingInterruptEh>

0000117a <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    117a:	cf 93       	push	r28
  uint8_t sreg = SREG;
    117c:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    117e:	f8 94       	cli
  if (!initialized) {
    1180:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <_ZN8SPIClass11initializedE>
    1184:	81 11       	cpse	r24, r1
    1186:	27 c0       	rjmp	.+78     	; 0x11d6 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    1188:	ea e9       	ldi	r30, 0x9A	; 154
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    118e:	e6 e8       	ldi	r30, 0x86	; 134
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    1194:	e8 2f       	mov	r30, r24
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	ee 0f       	add	r30, r30
    119a:	ff 1f       	adc	r31, r31
    119c:	e2 55       	subi	r30, 0x52	; 82
    119e:	ff 4f       	sbci	r31, 0xFF	; 255
    11a0:	a5 91       	lpm	r26, Z+
    11a2:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    11a4:	ec 91       	ld	r30, X
    11a6:	e9 23       	and	r30, r25
    11a8:	21 f4       	brne	.+8      	; 0x11b2 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    11aa:	61 e0       	ldi	r22, 0x01	; 1
    11ac:	8a e0       	ldi	r24, 0x0A	; 10
    11ae:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    11b2:	61 e0       	ldi	r22, 0x01	; 1
    11b4:	8a e0       	ldi	r24, 0x0A	; 10
    11b6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    11ba:	8c b5       	in	r24, 0x2c	; 44
    11bc:	80 61       	ori	r24, 0x10	; 16
    11be:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    11c0:	8c b5       	in	r24, 0x2c	; 44
    11c2:	80 64       	ori	r24, 0x40	; 64
    11c4:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    11c6:	61 e0       	ldi	r22, 0x01	; 1
    11c8:	8d e0       	ldi	r24, 0x0D	; 13
    11ca:	0e 94 b2 0c 	call	0x1964	; 0x1964 <pinMode>
    pinMode(MOSI, OUTPUT);
    11ce:	61 e0       	ldi	r22, 0x01	; 1
    11d0:	8b e0       	ldi	r24, 0x0B	; 11
    11d2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <pinMode>
  }
  initialized++; // reference count
    11d6:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <_ZN8SPIClass11initializedE>
    11da:	8f 5f       	subi	r24, 0xFF	; 255
    11dc:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    11e0:	cf bf       	out	0x3f, r28	; 63
}
    11e2:	cf 91       	pop	r28
    11e4:	08 95       	ret

000011e6 <_ZN8SPIClass3endEv>:

void SPIClass::end() {
  uint8_t sreg = SREG;
    11e6:	9f b7       	in	r25, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    11e8:	f8 94       	cli
  // Decrease the reference counter
  if (initialized)
    11ea:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <_ZN8SPIClass11initializedE>
    11ee:	88 23       	and	r24, r24
    11f0:	19 f0       	breq	.+6      	; 0x11f8 <_ZN8SPIClass3endEv+0x12>
    initialized--;
    11f2:	81 50       	subi	r24, 0x01	; 1
    11f4:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <_ZN8SPIClass11initializedE>
  // If there are no more references disable SPI
  if (!initialized) {
    11f8:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <_ZN8SPIClass11initializedE>
    11fc:	81 11       	cpse	r24, r1
    11fe:	05 c0       	rjmp	.+10     	; 0x120a <_ZN8SPIClass3endEv+0x24>
    SPCR &= ~_BV(SPE);
    1200:	8c b5       	in	r24, 0x2c	; 44
    1202:	8f 7b       	andi	r24, 0xBF	; 191
    1204:	8c bd       	out	0x2c, r24	; 44
    interruptMode = 0;
    1206:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <_ZN8SPIClass13interruptModeE>
    #ifdef SPI_TRANSACTION_MISMATCH_LED
    inTransactionFlag = 0;
    #endif
  }
  SREG = sreg;
    120a:	9f bf       	out	0x3f, r25	; 63
    120c:	08 95       	ret

0000120e <_ZN8SPIClass14usingInterruptEh>:
#endif

void SPIClass::usingInterrupt(uint8_t interruptNumber)
{
  uint8_t mask = 0;
  uint8_t sreg = SREG;
    120e:	9f b7       	in	r25, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    1210:	f8 94       	cli
  switch (interruptNumber) {
    1212:	88 23       	and	r24, r24
    1214:	49 f0       	breq	.+18     	; 0x1228 <_ZN8SPIClass14usingInterruptEh+0x1a>
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	11 f4       	brne	.+4      	; 0x121e <_ZN8SPIClass14usingInterruptEh+0x10>
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
  #endif
  #ifdef SPI_INT1_MASK
  case 1: mask = SPI_INT1_MASK; break;
    121a:	82 e0       	ldi	r24, 0x02	; 2
    121c:	06 c0       	rjmp	.+12     	; 0x122a <_ZN8SPIClass14usingInterruptEh+0x1c>
  #endif
  #ifdef SPI_INT7_MASK
  case 7: mask = SPI_INT7_MASK; break;
  #endif
  default:
    interruptMode = 2;
    121e:	82 e0       	ldi	r24, 0x02	; 2
    1220:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <_ZN8SPIClass13interruptModeE>
  #endif
#endif

void SPIClass::usingInterrupt(uint8_t interruptNumber)
{
  uint8_t mask = 0;
    1224:	80 e0       	ldi	r24, 0x00	; 0
  #ifdef SPI_INT7_MASK
  case 7: mask = SPI_INT7_MASK; break;
  #endif
  default:
    interruptMode = 2;
    break;
    1226:	01 c0       	rjmp	.+2      	; 0x122a <_ZN8SPIClass14usingInterruptEh+0x1c>
  uint8_t mask = 0;
  uint8_t sreg = SREG;
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
  switch (interruptNumber) {
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
    1228:	81 e0       	ldi	r24, 0x01	; 1
  #endif
  default:
    interruptMode = 2;
    break;
  }
  interruptMask |= mask;
    122a:	20 91 1e 04 	lds	r18, 0x041E	; 0x80041e <_ZN8SPIClass13interruptMaskE>
    122e:	82 2b       	or	r24, r18
    1230:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <_ZN8SPIClass13interruptMaskE>
  if (!interruptMode)
    1234:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <_ZN8SPIClass13interruptModeE>
    1238:	81 11       	cpse	r24, r1
    123a:	03 c0       	rjmp	.+6      	; 0x1242 <_ZN8SPIClass14usingInterruptEh+0x34>
    interruptMode = 1;
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <_ZN8SPIClass13interruptModeE>
  SREG = sreg;
    1242:	9f bf       	out	0x3f, r25	; 63
    1244:	08 95       	ret

00001246 <_ZN8SPIClass17notUsingInterruptEh>:
}

void SPIClass::notUsingInterrupt(uint8_t interruptNumber)
{
  // Once in mode 2 we can't go back to 0 without a proper reference count
  if (interruptMode == 2)
    1246:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <_ZN8SPIClass13interruptModeE>
    124a:	92 30       	cpi	r25, 0x02	; 2
    124c:	b1 f0       	breq	.+44     	; 0x127a <_ZN8SPIClass17notUsingInterruptEh+0x34>
    return;
  uint8_t mask = 0;
  uint8_t sreg = SREG;
    124e:	2f b7       	in	r18, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    1250:	f8 94       	cli
  switch (interruptNumber) {
    1252:	88 23       	and	r24, r24
    1254:	21 f0       	breq	.+8      	; 0x125e <_ZN8SPIClass17notUsingInterruptEh+0x18>
    1256:	81 30       	cpi	r24, 0x01	; 1
    1258:	21 f4       	brne	.+8      	; 0x1262 <_ZN8SPIClass17notUsingInterruptEh+0x1c>
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
  #endif
  #ifdef SPI_INT1_MASK
  case 1: mask = SPI_INT1_MASK; break;
    125a:	82 e0       	ldi	r24, 0x02	; 2
    125c:	03 c0       	rjmp	.+6      	; 0x1264 <_ZN8SPIClass17notUsingInterruptEh+0x1e>
  uint8_t mask = 0;
  uint8_t sreg = SREG;
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
  switch (interruptNumber) {
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	01 c0       	rjmp	.+2      	; 0x1264 <_ZN8SPIClass17notUsingInterruptEh+0x1e>
void SPIClass::notUsingInterrupt(uint8_t interruptNumber)
{
  // Once in mode 2 we can't go back to 0 without a proper reference count
  if (interruptMode == 2)
    return;
  uint8_t mask = 0;
    1262:	80 e0       	ldi	r24, 0x00	; 0
  #endif
  default:
    break;
    // this case can't be reached
  }
  interruptMask &= ~mask;
    1264:	80 95       	com	r24
    1266:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <_ZN8SPIClass13interruptMaskE>
    126a:	89 23       	and	r24, r25
    126c:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <_ZN8SPIClass13interruptMaskE>
  if (!interruptMask)
    1270:	81 11       	cpse	r24, r1
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <_ZN8SPIClass17notUsingInterruptEh+0x32>
    interruptMode = 0;
    1274:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <_ZN8SPIClass13interruptModeE>
  SREG = sreg;
    1278:	2f bf       	out	0x3f, r18	; 63
    127a:	08 95       	ret

0000127c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    127c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    127e:	91 8d       	ldd	r25, Z+25	; 0x19
    1280:	22 8d       	ldd	r18, Z+26	; 0x1a
    1282:	89 2f       	mov	r24, r25
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	80 5c       	subi	r24, 0xC0	; 192
    1288:	9f 4f       	sbci	r25, 0xFF	; 255
    128a:	82 1b       	sub	r24, r18
    128c:	91 09       	sbc	r25, r1
}
    128e:	8f 73       	andi	r24, 0x3F	; 63
    1290:	99 27       	eor	r25, r25
    1292:	08 95       	ret

00001294 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1294:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1296:	91 8d       	ldd	r25, Z+25	; 0x19
    1298:	82 8d       	ldd	r24, Z+26	; 0x1a
    129a:	98 17       	cp	r25, r24
    129c:	31 f0       	breq	.+12     	; 0x12aa <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    129e:	82 8d       	ldd	r24, Z+26	; 0x1a
    12a0:	e8 0f       	add	r30, r24
    12a2:	f1 1d       	adc	r31, r1
    12a4:	85 8d       	ldd	r24, Z+29	; 0x1d
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    12aa:	8f ef       	ldi	r24, 0xFF	; 255
    12ac:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    12ae:	08 95       	ret

000012b0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    12b0:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    12b2:	91 8d       	ldd	r25, Z+25	; 0x19
    12b4:	82 8d       	ldd	r24, Z+26	; 0x1a
    12b6:	98 17       	cp	r25, r24
    12b8:	61 f0       	breq	.+24     	; 0x12d2 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    12ba:	82 8d       	ldd	r24, Z+26	; 0x1a
    12bc:	df 01       	movw	r26, r30
    12be:	a8 0f       	add	r26, r24
    12c0:	b1 1d       	adc	r27, r1
    12c2:	5d 96       	adiw	r26, 0x1d	; 29
    12c4:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    12c6:	92 8d       	ldd	r25, Z+26	; 0x1a
    12c8:	9f 5f       	subi	r25, 0xFF	; 255
    12ca:	9f 73       	andi	r25, 0x3F	; 63
    12cc:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    12d2:	8f ef       	ldi	r24, 0xFF	; 255
    12d4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    12d6:	08 95       	ret

000012d8 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    12d8:	fc 01       	movw	r30, r24
    12da:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
    12dc:	44 8d       	ldd	r20, Z+28	; 0x1c
    12de:	25 2f       	mov	r18, r21
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	84 2f       	mov	r24, r20
    12e4:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    12e6:	82 1b       	sub	r24, r18
    12e8:	93 0b       	sbc	r25, r19
    12ea:	54 17       	cp	r21, r20
    12ec:	10 f0       	brcs	.+4      	; 0x12f2 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    12ee:	cf 96       	adiw	r24, 0x3f	; 63
    12f0:	08 95       	ret
  return tail - head - 1;
    12f2:	01 97       	sbiw	r24, 0x01	; 1
}
    12f4:	08 95       	ret

000012f6 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    12f6:	83 ed       	ldi	r24, 0xD3	; 211
    12f8:	9a e0       	ldi	r25, 0x0A	; 10
    12fa:	89 2b       	or	r24, r25
    12fc:	49 f0       	breq	.+18     	; 0x1310 <_Z14serialEventRunv+0x1a>
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	89 2b       	or	r24, r25
    1304:	29 f0       	breq	.+10     	; 0x1310 <_Z14serialEventRunv+0x1a>
    1306:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <_Z17Serial0_availablev>
    130a:	81 11       	cpse	r24, r1
    130c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1310:	08 95       	ret

00001312 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1312:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1314:	84 8d       	ldd	r24, Z+28	; 0x1c
    1316:	df 01       	movw	r26, r30
    1318:	a8 0f       	add	r26, r24
    131a:	b1 1d       	adc	r27, r1
    131c:	a3 5a       	subi	r26, 0xA3	; 163
    131e:	bf 4f       	sbci	r27, 0xFF	; 255
    1320:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1322:	84 8d       	ldd	r24, Z+28	; 0x1c
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	01 96       	adiw	r24, 0x01	; 1
    1328:	8f 73       	andi	r24, 0x3F	; 63
    132a:	99 27       	eor	r25, r25
    132c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    132e:	a6 89       	ldd	r26, Z+22	; 0x16
    1330:	b7 89       	ldd	r27, Z+23	; 0x17
    1332:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1334:	a0 89       	ldd	r26, Z+16	; 0x10
    1336:	b1 89       	ldd	r27, Z+17	; 0x11
    1338:	8c 91       	ld	r24, X
    133a:	80 64       	ori	r24, 0x40	; 64
    133c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    133e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1340:	84 8d       	ldd	r24, Z+28	; 0x1c
    1342:	98 13       	cpse	r25, r24
    1344:	06 c0       	rjmp	.+12     	; 0x1352 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1346:	02 88       	ldd	r0, Z+18	; 0x12
    1348:	f3 89       	ldd	r31, Z+19	; 0x13
    134a:	e0 2d       	mov	r30, r0
    134c:	80 81       	ld	r24, Z
    134e:	8f 7d       	andi	r24, 0xDF	; 223
    1350:	80 83       	st	Z, r24
    1352:	08 95       	ret

00001354 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1354:	ef 92       	push	r14
    1356:	ff 92       	push	r15
    1358:	0f 93       	push	r16
    135a:	1f 93       	push	r17
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	ec 01       	movw	r28, r24
  _written = true;
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1366:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1368:	8c 8d       	ldd	r24, Y+28	; 0x1c
    136a:	98 13       	cpse	r25, r24
    136c:	05 c0       	rjmp	.+10     	; 0x1378 <_ZN14HardwareSerial5writeEh+0x24>
    136e:	e8 89       	ldd	r30, Y+16	; 0x10
    1370:	f9 89       	ldd	r31, Y+17	; 0x11
    1372:	80 81       	ld	r24, Z
    1374:	85 fd       	sbrc	r24, 5
    1376:	24 c0       	rjmp	.+72     	; 0x13c0 <_ZN14HardwareSerial5writeEh+0x6c>
    1378:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    137a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    137c:	10 e0       	ldi	r17, 0x00	; 0
    137e:	0f 5f       	subi	r16, 0xFF	; 255
    1380:	1f 4f       	sbci	r17, 0xFF	; 255
    1382:	0f 73       	andi	r16, 0x3F	; 63
    1384:	11 27       	eor	r17, r17
    1386:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1388:	8c 8d       	ldd	r24, Y+28	; 0x1c
    138a:	e8 12       	cpse	r14, r24
    138c:	0c c0       	rjmp	.+24     	; 0x13a6 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	07 fc       	sbrc	r0, 7
    1392:	fa cf       	rjmp	.-12     	; 0x1388 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1394:	e8 89       	ldd	r30, Y+16	; 0x10
    1396:	f9 89       	ldd	r31, Y+17	; 0x11
    1398:	80 81       	ld	r24, Z
    139a:	85 ff       	sbrs	r24, 5
    139c:	f5 cf       	rjmp	.-22     	; 0x1388 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    139e:	ce 01       	movw	r24, r28
    13a0:	0e 94 89 09 	call	0x1312	; 0x1312 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    13a4:	f1 cf       	rjmp	.-30     	; 0x1388 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    13a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13a8:	fe 01       	movw	r30, r28
    13aa:	e8 0f       	add	r30, r24
    13ac:	f1 1d       	adc	r31, r1
    13ae:	e3 5a       	subi	r30, 0xA3	; 163
    13b0:	ff 4f       	sbci	r31, 0xFF	; 255
    13b2:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    13b4:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    13b6:	ea 89       	ldd	r30, Y+18	; 0x12
    13b8:	fb 89       	ldd	r31, Y+19	; 0x13
    13ba:	80 81       	ld	r24, Z
    13bc:	80 62       	ori	r24, 0x20	; 32
    13be:	07 c0       	rjmp	.+14     	; 0x13ce <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    13c0:	ee 89       	ldd	r30, Y+22	; 0x16
    13c2:	ff 89       	ldd	r31, Y+23	; 0x17
    13c4:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    13c6:	e8 89       	ldd	r30, Y+16	; 0x10
    13c8:	f9 89       	ldd	r31, Y+17	; 0x11
    13ca:	80 81       	ld	r24, Z
    13cc:	80 64       	ori	r24, 0x40	; 64
    13ce:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	1f 91       	pop	r17
    13da:	0f 91       	pop	r16
    13dc:	ff 90       	pop	r15
    13de:	ef 90       	pop	r14
    13e0:	08 95       	ret

000013e2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29
    13e6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    13e8:	88 8d       	ldd	r24, Y+24	; 0x18
    13ea:	88 23       	and	r24, r24
    13ec:	c9 f0       	breq	.+50     	; 0x1420 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    13ee:	ea 89       	ldd	r30, Y+18	; 0x12
    13f0:	fb 89       	ldd	r31, Y+19	; 0x13
    13f2:	80 81       	ld	r24, Z
    13f4:	85 fd       	sbrc	r24, 5
    13f6:	05 c0       	rjmp	.+10     	; 0x1402 <_ZN14HardwareSerial5flushEv+0x20>
    13f8:	a8 89       	ldd	r26, Y+16	; 0x10
    13fa:	b9 89       	ldd	r27, Y+17	; 0x11
    13fc:	8c 91       	ld	r24, X
    13fe:	86 fd       	sbrc	r24, 6
    1400:	0f c0       	rjmp	.+30     	; 0x1420 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	07 fc       	sbrc	r0, 7
    1406:	f5 cf       	rjmp	.-22     	; 0x13f2 <_ZN14HardwareSerial5flushEv+0x10>
    1408:	80 81       	ld	r24, Z
    140a:	85 ff       	sbrs	r24, 5
    140c:	f2 cf       	rjmp	.-28     	; 0x13f2 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    140e:	a8 89       	ldd	r26, Y+16	; 0x10
    1410:	b9 89       	ldd	r27, Y+17	; 0x11
    1412:	8c 91       	ld	r24, X
    1414:	85 ff       	sbrs	r24, 5
    1416:	ed cf       	rjmp	.-38     	; 0x13f2 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1418:	ce 01       	movw	r24, r28
    141a:	0e 94 89 09 	call	0x1312	; 0x1312 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    141e:	e7 cf       	rjmp	.-50     	; 0x13ee <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1420:	df 91       	pop	r29
    1422:	cf 91       	pop	r28
    1424:	08 95       	ret

00001426 <_ZN14HardwareSerial5beginEmh>:
	begin(baud, SERIAL_8N1); 
}


void HardwareSerial::begin(unsigned long baud, byte config)
{
    1426:	cf 92       	push	r12
    1428:	df 92       	push	r13
    142a:	ef 92       	push	r14
    142c:	ff 92       	push	r15
    142e:	1f 93       	push	r17
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	ec 01       	movw	r28, r24
    1436:	6a 01       	movw	r12, r20
    1438:	7b 01       	movw	r14, r22
    143a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    143c:	e8 89       	ldd	r30, Y+16	; 0x10
    143e:	f9 89       	ldd	r31, Y+17	; 0x11
    1440:	82 e0       	ldi	r24, 0x02	; 2
    1442:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1444:	41 15       	cp	r20, r1
    1446:	51 4e       	sbci	r21, 0xE1	; 225
    1448:	61 05       	cpc	r22, r1
    144a:	71 05       	cpc	r23, r1
    144c:	b1 f0       	breq	.+44     	; 0x147a <_ZN14HardwareSerial5beginEmh+0x54>


void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	79 e0       	ldi	r23, 0x09	; 9
    1452:	8d e3       	ldi	r24, 0x3D	; 61
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	a7 01       	movw	r20, r14
    1458:	96 01       	movw	r18, r12
    145a:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__udivmodsi4>
    145e:	da 01       	movw	r26, r20
    1460:	c9 01       	movw	r24, r18
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	a1 09       	sbc	r26, r1
    1466:	b1 09       	sbc	r27, r1
    1468:	b6 95       	lsr	r27
    146a:	a7 95       	ror	r26
    146c:	97 95       	ror	r25
    146e:	87 95       	ror	r24
    1470:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1472:	21 15       	cp	r18, r1
    1474:	80 e1       	ldi	r24, 0x10	; 16
    1476:	38 07       	cpc	r19, r24
    1478:	a8 f0       	brcs	.+42     	; 0x14a4 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    147a:	e8 89       	ldd	r30, Y+16	; 0x10
    147c:	f9 89       	ldd	r31, Y+17	; 0x11
    147e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1480:	60 e8       	ldi	r22, 0x80	; 128
    1482:	74 e8       	ldi	r23, 0x84	; 132
    1484:	8e e1       	ldi	r24, 0x1E	; 30
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	a7 01       	movw	r20, r14
    148a:	96 01       	movw	r18, r12
    148c:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__udivmodsi4>
    1490:	da 01       	movw	r26, r20
    1492:	c9 01       	movw	r24, r18
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	a1 09       	sbc	r26, r1
    1498:	b1 09       	sbc	r27, r1
    149a:	b6 95       	lsr	r27
    149c:	a7 95       	ror	r26
    149e:	97 95       	ror	r25
    14a0:	87 95       	ror	r24
    14a2:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    14a4:	ec 85       	ldd	r30, Y+12	; 0x0c
    14a6:	fd 85       	ldd	r31, Y+13	; 0x0d
    14a8:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    14aa:	ee 85       	ldd	r30, Y+14	; 0x0e
    14ac:	ff 85       	ldd	r31, Y+15	; 0x0f
    14ae:	20 83       	st	Z, r18

  _written = false;
    14b0:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    14b2:	ec 89       	ldd	r30, Y+20	; 0x14
    14b4:	fd 89       	ldd	r31, Y+21	; 0x15
    14b6:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    14b8:	ea 89       	ldd	r30, Y+18	; 0x12
    14ba:	fb 89       	ldd	r31, Y+19	; 0x13
    14bc:	80 81       	ld	r24, Z
    14be:	80 61       	ori	r24, 0x10	; 16
    14c0:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    14c2:	ea 89       	ldd	r30, Y+18	; 0x12
    14c4:	fb 89       	ldd	r31, Y+19	; 0x13
    14c6:	80 81       	ld	r24, Z
    14c8:	88 60       	ori	r24, 0x08	; 8
    14ca:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    14cc:	ea 89       	ldd	r30, Y+18	; 0x12
    14ce:	fb 89       	ldd	r31, Y+19	; 0x13
    14d0:	80 81       	ld	r24, Z
    14d2:	80 68       	ori	r24, 0x80	; 128
    14d4:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    14d6:	ea 89       	ldd	r30, Y+18	; 0x12
    14d8:	fb 89       	ldd	r31, Y+19	; 0x13
    14da:	80 81       	ld	r24, Z
    14dc:	8f 7d       	andi	r24, 0xDF	; 223
    14de:	80 83       	st	Z, r24
}
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	1f 91       	pop	r17
    14e6:	ff 90       	pop	r15
    14e8:	ef 90       	pop	r14
    14ea:	df 90       	pop	r13
    14ec:	cf 90       	pop	r12
    14ee:	08 95       	ret

000014f0 <_ZN14HardwareSerial5beginEm>:

// Public Methods //////////////////////////////////////////////////////////////
//selbst erstellt da inline Methoden irgendwie nicht immer funktionieren
void HardwareSerial::begin(unsigned long baud) 
{ 
	begin(baud, SERIAL_8N1); 
    14f0:	26 e0       	ldi	r18, 0x06	; 6
    14f2:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <_ZN14HardwareSerial5beginEmh>

000014f6 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    14f6:	1f 92       	push	r1
    14f8:	0f 92       	push	r0
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	0f 92       	push	r0
    14fe:	11 24       	eor	r1, r1
    1500:	2f 93       	push	r18
    1502:	8f 93       	push	r24
    1504:	9f 93       	push	r25
    1506:	ef 93       	push	r30
    1508:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    150a:	e0 91 31 04 	lds	r30, 0x0431	; 0x800431 <Serial+0x10>
    150e:	f0 91 32 04 	lds	r31, 0x0432	; 0x800432 <Serial+0x11>
    1512:	80 81       	ld	r24, Z
    1514:	e0 91 37 04 	lds	r30, 0x0437	; 0x800437 <Serial+0x16>
    1518:	f0 91 38 04 	lds	r31, 0x0438	; 0x800438 <Serial+0x17>
    151c:	82 fd       	sbrc	r24, 2
    151e:	12 c0       	rjmp	.+36     	; 0x1544 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1520:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1522:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <Serial+0x19>
    1526:	8f 5f       	subi	r24, 0xFF	; 255
    1528:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    152a:	20 91 3b 04 	lds	r18, 0x043B	; 0x80043b <Serial+0x1a>
    152e:	82 17       	cp	r24, r18
    1530:	51 f0       	breq	.+20     	; 0x1546 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1532:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <Serial+0x19>
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	ef 5d       	subi	r30, 0xDF	; 223
    153a:	fb 4f       	sbci	r31, 0xFB	; 251
    153c:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    153e:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <Serial+0x19>
    1542:	01 c0       	rjmp	.+2      	; 0x1546 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1544:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1546:	ff 91       	pop	r31
    1548:	ef 91       	pop	r30
    154a:	9f 91       	pop	r25
    154c:	8f 91       	pop	r24
    154e:	2f 91       	pop	r18
    1550:	0f 90       	pop	r0
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	0f 90       	pop	r0
    1556:	1f 90       	pop	r1
    1558:	18 95       	reti

0000155a <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    155a:	1f 92       	push	r1
    155c:	0f 92       	push	r0
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	0f 92       	push	r0
    1562:	11 24       	eor	r1, r1
    1564:	2f 93       	push	r18
    1566:	3f 93       	push	r19
    1568:	4f 93       	push	r20
    156a:	5f 93       	push	r21
    156c:	6f 93       	push	r22
    156e:	7f 93       	push	r23
    1570:	8f 93       	push	r24
    1572:	9f 93       	push	r25
    1574:	af 93       	push	r26
    1576:	bf 93       	push	r27
    1578:	ef 93       	push	r30
    157a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    157c:	81 e2       	ldi	r24, 0x21	; 33
    157e:	94 e0       	ldi	r25, 0x04	; 4
    1580:	0e 94 89 09 	call	0x1312	; 0x1312 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1584:	ff 91       	pop	r31
    1586:	ef 91       	pop	r30
    1588:	bf 91       	pop	r27
    158a:	af 91       	pop	r26
    158c:	9f 91       	pop	r25
    158e:	8f 91       	pop	r24
    1590:	7f 91       	pop	r23
    1592:	6f 91       	pop	r22
    1594:	5f 91       	pop	r21
    1596:	4f 91       	pop	r20
    1598:	3f 91       	pop	r19
    159a:	2f 91       	pop	r18
    159c:	0f 90       	pop	r0
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	0f 90       	pop	r0
    15a2:	1f 90       	pop	r1
    15a4:	18 95       	reti

000015a6 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    15a6:	81 e2       	ldi	r24, 0x21	; 33
    15a8:	94 e0       	ldi	r25, 0x04	; 4
    15aa:	0e 94 3e 09 	call	0x127c	; 0x127c <_ZN14HardwareSerial9availableEv>
    15ae:	21 e0       	ldi	r18, 0x01	; 1
    15b0:	89 2b       	or	r24, r25
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <_Z17Serial0_availablev+0x10>
    15b4:	20 e0       	ldi	r18, 0x00	; 0
}
    15b6:	82 2f       	mov	r24, r18
    15b8:	08 95       	ret

000015ba <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    15ba:	e1 e2       	ldi	r30, 0x21	; 33
    15bc:	f4 e0       	ldi	r31, 0x04	; 4
    15be:	13 82       	std	Z+3, r1	; 0x03
    15c0:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    15c2:	88 ee       	ldi	r24, 0xE8	; 232
    15c4:	93 e0       	ldi	r25, 0x03	; 3
    15c6:	a0 e0       	ldi	r26, 0x00	; 0
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	84 83       	std	Z+4, r24	; 0x04
    15cc:	95 83       	std	Z+5, r25	; 0x05
    15ce:	a6 83       	std	Z+6, r26	; 0x06
    15d0:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    15d2:	8d eb       	ldi	r24, 0xBD	; 189
    15d4:	93 e0       	ldi	r25, 0x03	; 3
    15d6:	91 83       	std	Z+1, r25	; 0x01
    15d8:	80 83       	st	Z, r24
    15da:	85 ec       	ldi	r24, 0xC5	; 197
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	95 87       	std	Z+13, r25	; 0x0d
    15e0:	84 87       	std	Z+12, r24	; 0x0c
    15e2:	84 ec       	ldi	r24, 0xC4	; 196
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	97 87       	std	Z+15, r25	; 0x0f
    15e8:	86 87       	std	Z+14, r24	; 0x0e
    15ea:	80 ec       	ldi	r24, 0xC0	; 192
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	91 8b       	std	Z+17, r25	; 0x11
    15f0:	80 8b       	std	Z+16, r24	; 0x10
    15f2:	81 ec       	ldi	r24, 0xC1	; 193
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	93 8b       	std	Z+19, r25	; 0x13
    15f8:	82 8b       	std	Z+18, r24	; 0x12
    15fa:	82 ec       	ldi	r24, 0xC2	; 194
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	95 8b       	std	Z+21, r25	; 0x15
    1600:	84 8b       	std	Z+20, r24	; 0x14
    1602:	86 ec       	ldi	r24, 0xC6	; 198
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	97 8b       	std	Z+23, r25	; 0x17
    1608:	86 8b       	std	Z+22, r24	; 0x16
    160a:	11 8e       	std	Z+25, r1	; 0x19
    160c:	12 8e       	std	Z+26, r1	; 0x1a
    160e:	13 8e       	std	Z+27, r1	; 0x1b
    1610:	14 8e       	std	Z+28, r1	; 0x1c
    1612:	08 95       	ret

00001614 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1614:	08 95       	ret

00001616 <initVariant>:
    1616:	08 95       	ret

00001618 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1618:	0e 94 4e 0c 	call	0x189c	; 0x189c <init>

	initVariant();
    161c:	0e 94 0b 0b 	call	0x1616	; 0x1616 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1620:	0e 94 ae 00 	call	0x15c	; 0x15c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1624:	cb e7       	ldi	r28, 0x7B	; 123
    1626:	d9 e0       	ldi	r29, 0x09	; 9
#endif
	
	setup();
    
	for (;;) {
		loop();
    1628:	0e 94 89 00 	call	0x112	; 0x112 <loop>
		if (serialEventRun) serialEventRun();
    162c:	20 97       	sbiw	r28, 0x00	; 0
    162e:	e1 f3       	breq	.-8      	; 0x1628 <main+0x10>
    1630:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <_Z14serialEventRunv>
    1634:	f9 cf       	rjmp	.-14     	; 0x1628 <main+0x10>

00001636 <_ZdlPv>:
    1636:	0c 94 dd 0d 	jmp	0x1bba	; 0x1bba <free>

0000163a <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
    163a:	cf 92       	push	r12
    163c:	df 92       	push	r13
    163e:	ef 92       	push	r14
    1640:	ff 92       	push	r15
    1642:	0f 93       	push	r16
    1644:	1f 93       	push	r17
    1646:	cf 93       	push	r28
    1648:	df 93       	push	r29
    164a:	6c 01       	movw	r12, r24
    164c:	7a 01       	movw	r14, r20
    164e:	8b 01       	movw	r16, r22
    1650:	c0 e0       	ldi	r28, 0x00	; 0
    1652:	d0 e0       	ldi	r29, 0x00	; 0
    1654:	ce 15       	cp	r28, r14
    1656:	df 05       	cpc	r29, r15
    1658:	81 f0       	breq	.+32     	; 0x167a <_ZN5Print5writeEPKhj+0x40>
    165a:	d8 01       	movw	r26, r16
    165c:	6d 91       	ld	r22, X+
    165e:	8d 01       	movw	r16, r26
    1660:	d6 01       	movw	r26, r12
    1662:	ed 91       	ld	r30, X+
    1664:	fc 91       	ld	r31, X
    1666:	01 90       	ld	r0, Z+
    1668:	f0 81       	ld	r31, Z
    166a:	e0 2d       	mov	r30, r0
    166c:	c6 01       	movw	r24, r12
    166e:	09 95       	icall
    1670:	89 2b       	or	r24, r25
    1672:	11 f0       	breq	.+4      	; 0x1678 <_ZN5Print5writeEPKhj+0x3e>
    1674:	21 96       	adiw	r28, 0x01	; 1
    1676:	ee cf       	rjmp	.-36     	; 0x1654 <_ZN5Print5writeEPKhj+0x1a>
    1678:	7e 01       	movw	r14, r28
    167a:	c7 01       	movw	r24, r14
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	1f 91       	pop	r17
    1682:	0f 91       	pop	r16
    1684:	ff 90       	pop	r15
    1686:	ef 90       	pop	r14
    1688:	df 90       	pop	r13
    168a:	cf 90       	pop	r12
    168c:	08 95       	ret

0000168e <_ZN5Print5writeEPKc>:
    168e:	61 15       	cp	r22, r1
    1690:	71 05       	cpc	r23, r1
    1692:	79 f0       	breq	.+30     	; 0x16b2 <_ZN5Print5writeEPKc+0x24>
    1694:	fb 01       	movw	r30, r22
    1696:	01 90       	ld	r0, Z+
    1698:	00 20       	and	r0, r0
    169a:	e9 f7       	brne	.-6      	; 0x1696 <_ZN5Print5writeEPKc+0x8>
    169c:	31 97       	sbiw	r30, 0x01	; 1
    169e:	af 01       	movw	r20, r30
    16a0:	46 1b       	sub	r20, r22
    16a2:	57 0b       	sbc	r21, r23
    16a4:	dc 01       	movw	r26, r24
    16a6:	ed 91       	ld	r30, X+
    16a8:	fc 91       	ld	r31, X
    16aa:	02 80       	ldd	r0, Z+2	; 0x02
    16ac:	f3 81       	ldd	r31, Z+3	; 0x03
    16ae:	e0 2d       	mov	r30, r0
    16b0:	09 94       	ijmp
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	08 95       	ret

000016b8 <_ZN5Print7printlnEv>:
    16b8:	6b ec       	ldi	r22, 0xCB	; 203
    16ba:	73 e0       	ldi	r23, 0x03	; 3
    16bc:	0c 94 47 0b 	jmp	0x168e	; 0x168e <_ZN5Print5writeEPKc>

000016c0 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    16ca:	0e 94 47 0b 	call	0x168e	; 0x168e <_ZN5Print5writeEPKc>
    16ce:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    16d0:	ce 01       	movw	r24, r28
    16d2:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <_ZN5Print7printlnEv>
  return n;
}
    16d6:	80 0f       	add	r24, r16
    16d8:	91 1f       	adc	r25, r17
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	1f 91       	pop	r17
    16e0:	0f 91       	pop	r16
    16e2:	08 95       	ret

000016e4 <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    16e4:	fc 01       	movw	r30, r24
    16e6:	44 83       	std	Z+4, r20	; 0x04
    16e8:	55 83       	std	Z+5, r21	; 0x05
    16ea:	66 83       	std	Z+6, r22	; 0x06
    16ec:	77 83       	std	Z+7, r23	; 0x07
    16ee:	08 95       	ret

000016f0 <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
    16f0:	08 95       	ret

000016f2 <attachInterrupt>:
#endif
};
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    16f2:	82 30       	cpi	r24, 0x02	; 2
    16f4:	e8 f4       	brcc	.+58     	; 0x1730 <attachInterrupt+0x3e>
    intFunc[interruptNum] = userFunc;
    16f6:	e8 2f       	mov	r30, r24
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	ee 0f       	add	r30, r30
    16fc:	ff 1f       	adc	r31, r31
    16fe:	ec 5e       	subi	r30, 0xEC	; 236
    1700:	fe 4f       	sbci	r31, 0xFE	; 254
    1702:	71 83       	std	Z+1, r23	; 0x01
    1704:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	41 f0       	breq	.+16     	; 0x171a <attachInterrupt+0x28>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    170a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    170e:	8c 7f       	andi	r24, 0xFC	; 252
    1710:	48 2b       	or	r20, r24
    1712:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
      EIMSK |= (1 << INT0);
    1716:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    1718:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    171a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    171e:	83 7f       	andi	r24, 0xF3	; 243
    1720:	44 0f       	add	r20, r20
    1722:	55 1f       	adc	r21, r21
    1724:	44 0f       	add	r20, r20
    1726:	55 1f       	adc	r21, r21
    1728:	48 2b       	or	r20, r24
    172a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
      EIMSK |= (1 << INT1);
    172e:	e9 9a       	sbi	0x1d, 1	; 29
    1730:	08 95       	ret

00001732 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    1732:	82 30       	cpi	r24, 0x02	; 2
    1734:	78 f4       	brcc	.+30     	; 0x1754 <detachInterrupt+0x22>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	11 f0       	breq	.+4      	; 0x173e <detachInterrupt+0xc>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    173a:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
    173c:	01 c0       	rjmp	.+2      	; 0x1740 <detachInterrupt+0xe>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    173e:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    1740:	e8 2f       	mov	r30, r24
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	ee 0f       	add	r30, r30
    1746:	ff 1f       	adc	r31, r31
    1748:	ec 5e       	subi	r30, 0xEC	; 236
    174a:	fe 4f       	sbci	r31, 0xFE	; 254
    174c:	88 e7       	ldi	r24, 0x78	; 120
    174e:	9b e0       	ldi	r25, 0x0B	; 11
    1750:	91 83       	std	Z+1, r25	; 0x01
    1752:	80 83       	st	Z, r24
    1754:	08 95       	ret

00001756 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    1756:	1f 92       	push	r1
    1758:	0f 92       	push	r0
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	0f 92       	push	r0
    175e:	11 24       	eor	r1, r1
    1760:	2f 93       	push	r18
    1762:	3f 93       	push	r19
    1764:	4f 93       	push	r20
    1766:	5f 93       	push	r21
    1768:	6f 93       	push	r22
    176a:	7f 93       	push	r23
    176c:	8f 93       	push	r24
    176e:	9f 93       	push	r25
    1770:	af 93       	push	r26
    1772:	bf 93       	push	r27
    1774:	ef 93       	push	r30
    1776:	ff 93       	push	r31
    1778:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <intFunc>
    177c:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <intFunc+0x1>
    1780:	09 95       	icall
    1782:	ff 91       	pop	r31
    1784:	ef 91       	pop	r30
    1786:	bf 91       	pop	r27
    1788:	af 91       	pop	r26
    178a:	9f 91       	pop	r25
    178c:	8f 91       	pop	r24
    178e:	7f 91       	pop	r23
    1790:	6f 91       	pop	r22
    1792:	5f 91       	pop	r21
    1794:	4f 91       	pop	r20
    1796:	3f 91       	pop	r19
    1798:	2f 91       	pop	r18
    179a:	0f 90       	pop	r0
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	0f 90       	pop	r0
    17a0:	1f 90       	pop	r1
    17a2:	18 95       	reti

000017a4 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    17a4:	1f 92       	push	r1
    17a6:	0f 92       	push	r0
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	0f 92       	push	r0
    17ac:	11 24       	eor	r1, r1
    17ae:	2f 93       	push	r18
    17b0:	3f 93       	push	r19
    17b2:	4f 93       	push	r20
    17b4:	5f 93       	push	r21
    17b6:	6f 93       	push	r22
    17b8:	7f 93       	push	r23
    17ba:	8f 93       	push	r24
    17bc:	9f 93       	push	r25
    17be:	af 93       	push	r26
    17c0:	bf 93       	push	r27
    17c2:	ef 93       	push	r30
    17c4:	ff 93       	push	r31
    17c6:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <intFunc+0x2>
    17ca:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <intFunc+0x3>
    17ce:	09 95       	icall
    17d0:	ff 91       	pop	r31
    17d2:	ef 91       	pop	r30
    17d4:	bf 91       	pop	r27
    17d6:	af 91       	pop	r26
    17d8:	9f 91       	pop	r25
    17da:	8f 91       	pop	r24
    17dc:	7f 91       	pop	r23
    17de:	6f 91       	pop	r22
    17e0:	5f 91       	pop	r21
    17e2:	4f 91       	pop	r20
    17e4:	3f 91       	pop	r19
    17e6:	2f 91       	pop	r18
    17e8:	0f 90       	pop	r0
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	0f 90       	pop	r0
    17ee:	1f 90       	pop	r1
    17f0:	18 95       	reti

000017f2 <__vector_16>:
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    17f2:	1f 92       	push	r1
    17f4:	0f 92       	push	r0
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	0f 92       	push	r0
    17fa:	11 24       	eor	r1, r1
    17fc:	2f 93       	push	r18
    17fe:	3f 93       	push	r19
    1800:	8f 93       	push	r24
    1802:	9f 93       	push	r25
    1804:	af 93       	push	r26
    1806:	bf 93       	push	r27
    1808:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <timer0_millis>
    180c:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <timer0_millis+0x1>
    1810:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <timer0_millis+0x2>
    1814:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <timer0_millis+0x3>
    1818:	30 91 be 04 	lds	r19, 0x04BE	; 0x8004be <timer0_fract>
    181c:	23 e0       	ldi	r18, 0x03	; 3
    181e:	23 0f       	add	r18, r19
    1820:	2d 37       	cpi	r18, 0x7D	; 125
    1822:	20 f4       	brcc	.+8      	; 0x182c <__vector_16+0x3a>
    1824:	01 96       	adiw	r24, 0x01	; 1
    1826:	a1 1d       	adc	r26, r1
    1828:	b1 1d       	adc	r27, r1
    182a:	05 c0       	rjmp	.+10     	; 0x1836 <__vector_16+0x44>
    182c:	26 e8       	ldi	r18, 0x86	; 134
    182e:	23 0f       	add	r18, r19
    1830:	02 96       	adiw	r24, 0x02	; 2
    1832:	a1 1d       	adc	r26, r1
    1834:	b1 1d       	adc	r27, r1
    1836:	20 93 be 04 	sts	0x04BE, r18	; 0x8004be <timer0_fract>
    183a:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <timer0_millis>
    183e:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <timer0_millis+0x1>
    1842:	a0 93 c1 04 	sts	0x04C1, r26	; 0x8004c1 <timer0_millis+0x2>
    1846:	b0 93 c2 04 	sts	0x04C2, r27	; 0x8004c2 <timer0_millis+0x3>
    184a:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <timer0_overflow_count>
    184e:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <timer0_overflow_count+0x1>
    1852:	a0 91 c5 04 	lds	r26, 0x04C5	; 0x8004c5 <timer0_overflow_count+0x2>
    1856:	b0 91 c6 04 	lds	r27, 0x04C6	; 0x8004c6 <timer0_overflow_count+0x3>
    185a:	01 96       	adiw	r24, 0x01	; 1
    185c:	a1 1d       	adc	r26, r1
    185e:	b1 1d       	adc	r27, r1
    1860:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <timer0_overflow_count>
    1864:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <timer0_overflow_count+0x1>
    1868:	a0 93 c5 04 	sts	0x04C5, r26	; 0x8004c5 <timer0_overflow_count+0x2>
    186c:	b0 93 c6 04 	sts	0x04C6, r27	; 0x8004c6 <timer0_overflow_count+0x3>
    1870:	bf 91       	pop	r27
    1872:	af 91       	pop	r26
    1874:	9f 91       	pop	r25
    1876:	8f 91       	pop	r24
    1878:	3f 91       	pop	r19
    187a:	2f 91       	pop	r18
    187c:	0f 90       	pop	r0
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	0f 90       	pop	r0
    1882:	1f 90       	pop	r1
    1884:	18 95       	reti

00001886 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1886:	82 30       	cpi	r24, 0x02	; 2
    1888:	91 05       	cpc	r25, r1
    188a:	38 f0       	brcs	.+14     	; 0x189a <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    1894:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <delayMicroseconds+0x10>
    189a:	08 95       	ret

0000189c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    189c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    189e:	84 b5       	in	r24, 0x24	; 36
    18a0:	82 60       	ori	r24, 0x02	; 2
    18a2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    18a4:	84 b5       	in	r24, 0x24	; 36
    18a6:	81 60       	ori	r24, 0x01	; 1
    18a8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    18aa:	85 b5       	in	r24, 0x25	; 37
    18ac:	82 60       	ori	r24, 0x02	; 2
    18ae:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    18b0:	85 b5       	in	r24, 0x25	; 37
    18b2:	81 60       	ori	r24, 0x01	; 1
    18b4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    18b6:	ee e6       	ldi	r30, 0x6E	; 110
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	81 60       	ori	r24, 0x01	; 1
    18be:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    18c0:	e1 e8       	ldi	r30, 0x81	; 129
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    18c6:	80 81       	ld	r24, Z
    18c8:	82 60       	ori	r24, 0x02	; 2
    18ca:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    18cc:	80 81       	ld	r24, Z
    18ce:	81 60       	ori	r24, 0x01	; 1
    18d0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    18d2:	e0 e8       	ldi	r30, 0x80	; 128
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	81 60       	ori	r24, 0x01	; 1
    18da:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    18dc:	e1 eb       	ldi	r30, 0xB1	; 177
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	84 60       	ori	r24, 0x04	; 4
    18e4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    18e6:	e0 eb       	ldi	r30, 0xB0	; 176
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	81 60       	ori	r24, 0x01	; 1
    18ee:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    18f0:	ea e7       	ldi	r30, 0x7A	; 122
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	84 60       	ori	r24, 0x04	; 4
    18f8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    18fa:	80 81       	ld	r24, Z
    18fc:	82 60       	ori	r24, 0x02	; 2
    18fe:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1900:	80 81       	ld	r24, Z
    1902:	81 60       	ori	r24, 0x01	; 1
    1904:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1906:	80 81       	ld	r24, Z
    1908:	80 68       	ori	r24, 0x80	; 128
    190a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    190c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1910:	08 95       	ret

00001912 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1912:	83 30       	cpi	r24, 0x03	; 3
    1914:	81 f0       	breq	.+32     	; 0x1936 <turnOffPWM+0x24>
    1916:	28 f4       	brcc	.+10     	; 0x1922 <turnOffPWM+0x10>
    1918:	81 30       	cpi	r24, 0x01	; 1
    191a:	99 f0       	breq	.+38     	; 0x1942 <turnOffPWM+0x30>
    191c:	82 30       	cpi	r24, 0x02	; 2
    191e:	a1 f0       	breq	.+40     	; 0x1948 <turnOffPWM+0x36>
    1920:	08 95       	ret
    1922:	87 30       	cpi	r24, 0x07	; 7
    1924:	a9 f0       	breq	.+42     	; 0x1950 <turnOffPWM+0x3e>
    1926:	88 30       	cpi	r24, 0x08	; 8
    1928:	b9 f0       	breq	.+46     	; 0x1958 <turnOffPWM+0x46>
    192a:	84 30       	cpi	r24, 0x04	; 4
    192c:	d1 f4       	brne	.+52     	; 0x1962 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    192e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1932:	8f 7d       	andi	r24, 0xDF	; 223
    1934:	03 c0       	rjmp	.+6      	; 0x193c <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1936:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    193a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    193c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1940:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1942:	84 b5       	in	r24, 0x24	; 36
    1944:	8f 77       	andi	r24, 0x7F	; 127
    1946:	02 c0       	rjmp	.+4      	; 0x194c <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1948:	84 b5       	in	r24, 0x24	; 36
    194a:	8f 7d       	andi	r24, 0xDF	; 223
    194c:	84 bd       	out	0x24, r24	; 36
    194e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1950:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1954:	8f 77       	andi	r24, 0x7F	; 127
    1956:	03 c0       	rjmp	.+6      	; 0x195e <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1958:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    195c:	8f 7d       	andi	r24, 0xDF	; 223
    195e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1962:	08 95       	ret

00001964 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1964:	cf 93       	push	r28
    1966:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	fc 01       	movw	r30, r24
    196c:	e4 58       	subi	r30, 0x84	; 132
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1972:	fc 01       	movw	r30, r24
    1974:	e0 57       	subi	r30, 0x70	; 112
    1976:	ff 4f       	sbci	r31, 0xFF	; 255
    1978:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    197a:	88 23       	and	r24, r24
    197c:	61 f1       	breq	.+88     	; 0x19d6 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	fc 01       	movw	r30, r24
    1986:	e2 55       	subi	r30, 0x52	; 82
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	c5 91       	lpm	r28, Z+
    198c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    198e:	fc 01       	movw	r30, r24
    1990:	ec 55       	subi	r30, 0x5C	; 92
    1992:	ff 4f       	sbci	r31, 0xFF	; 255
    1994:	a5 91       	lpm	r26, Z+
    1996:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1998:	61 11       	cpse	r22, r1
    199a:	09 c0       	rjmp	.+18     	; 0x19ae <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    199c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    199e:	f8 94       	cli
		*reg &= ~bit;
    19a0:	88 81       	ld	r24, Y
    19a2:	20 95       	com	r18
    19a4:	82 23       	and	r24, r18
    19a6:	88 83       	st	Y, r24
		*out &= ~bit;
    19a8:	ec 91       	ld	r30, X
    19aa:	2e 23       	and	r18, r30
    19ac:	0b c0       	rjmp	.+22     	; 0x19c4 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    19ae:	62 30       	cpi	r22, 0x02	; 2
    19b0:	61 f4       	brne	.+24     	; 0x19ca <pinMode+0x66>
		uint8_t oldSREG = SREG;
    19b2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    19b4:	f8 94       	cli
		*reg &= ~bit;
    19b6:	88 81       	ld	r24, Y
    19b8:	32 2f       	mov	r19, r18
    19ba:	30 95       	com	r19
    19bc:	83 23       	and	r24, r19
    19be:	88 83       	st	Y, r24
		*out |= bit;
    19c0:	ec 91       	ld	r30, X
    19c2:	2e 2b       	or	r18, r30
    19c4:	2c 93       	st	X, r18
		SREG = oldSREG;
    19c6:	9f bf       	out	0x3f, r25	; 63
    19c8:	06 c0       	rjmp	.+12     	; 0x19d6 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    19ca:	8f b7       	in	r24, 0x3f	; 63
                cli();
    19cc:	f8 94       	cli
		*reg |= bit;
    19ce:	e8 81       	ld	r30, Y
    19d0:	2e 2b       	or	r18, r30
    19d2:	28 83       	st	Y, r18
		SREG = oldSREG;
    19d4:	8f bf       	out	0x3f, r24	; 63
	}
}
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	08 95       	ret

000019dc <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    19dc:	1f 93       	push	r17
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	f9 01       	movw	r30, r18
    19e8:	e8 59       	subi	r30, 0x98	; 152
    19ea:	ff 4f       	sbci	r31, 0xFF	; 255
    19ec:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    19ee:	f9 01       	movw	r30, r18
    19f0:	e4 58       	subi	r30, 0x84	; 132
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    19f6:	f9 01       	movw	r30, r18
    19f8:	e0 57       	subi	r30, 0x70	; 112
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    19fe:	cc 23       	and	r28, r28
    1a00:	c1 f0       	breq	.+48     	; 0x1a32 <digitalWrite+0x56>
    1a02:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1a04:	81 11       	cpse	r24, r1
    1a06:	0e 94 89 0c 	call	0x1912	; 0x1912 <turnOffPWM>

	out = portOutputRegister(port);
    1a0a:	ec 2f       	mov	r30, r28
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	ee 0f       	add	r30, r30
    1a10:	ff 1f       	adc	r31, r31
    1a12:	ec 55       	subi	r30, 0x5C	; 92
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	a5 91       	lpm	r26, Z+
    1a18:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1a1a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1a1c:	f8 94       	cli

	if (val == LOW) {
    1a1e:	11 11       	cpse	r17, r1
    1a20:	04 c0       	rjmp	.+8      	; 0x1a2a <digitalWrite+0x4e>
		*out &= ~bit;
    1a22:	8c 91       	ld	r24, X
    1a24:	d0 95       	com	r29
    1a26:	d8 23       	and	r29, r24
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <digitalWrite+0x52>
	} else {
		*out |= bit;
    1a2a:	ec 91       	ld	r30, X
    1a2c:	de 2b       	or	r29, r30
    1a2e:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1a30:	9f bf       	out	0x3f, r25	; 63
}
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	08 95       	ret

00001a3a <__udivmodsi4>:
    1a3a:	a1 e2       	ldi	r26, 0x21	; 33
    1a3c:	1a 2e       	mov	r1, r26
    1a3e:	aa 1b       	sub	r26, r26
    1a40:	bb 1b       	sub	r27, r27
    1a42:	fd 01       	movw	r30, r26
    1a44:	0d c0       	rjmp	.+26     	; 0x1a60 <__udivmodsi4_ep>

00001a46 <__udivmodsi4_loop>:
    1a46:	aa 1f       	adc	r26, r26
    1a48:	bb 1f       	adc	r27, r27
    1a4a:	ee 1f       	adc	r30, r30
    1a4c:	ff 1f       	adc	r31, r31
    1a4e:	a2 17       	cp	r26, r18
    1a50:	b3 07       	cpc	r27, r19
    1a52:	e4 07       	cpc	r30, r20
    1a54:	f5 07       	cpc	r31, r21
    1a56:	20 f0       	brcs	.+8      	; 0x1a60 <__udivmodsi4_ep>
    1a58:	a2 1b       	sub	r26, r18
    1a5a:	b3 0b       	sbc	r27, r19
    1a5c:	e4 0b       	sbc	r30, r20
    1a5e:	f5 0b       	sbc	r31, r21

00001a60 <__udivmodsi4_ep>:
    1a60:	66 1f       	adc	r22, r22
    1a62:	77 1f       	adc	r23, r23
    1a64:	88 1f       	adc	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	1a 94       	dec	r1
    1a6a:	69 f7       	brne	.-38     	; 0x1a46 <__udivmodsi4_loop>
    1a6c:	60 95       	com	r22
    1a6e:	70 95       	com	r23
    1a70:	80 95       	com	r24
    1a72:	90 95       	com	r25
    1a74:	9b 01       	movw	r18, r22
    1a76:	ac 01       	movw	r20, r24
    1a78:	bd 01       	movw	r22, r26
    1a7a:	cf 01       	movw	r24, r30
    1a7c:	08 95       	ret

00001a7e <__tablejump2__>:
    1a7e:	ee 0f       	add	r30, r30
    1a80:	ff 1f       	adc	r31, r31
    1a82:	05 90       	lpm	r0, Z+
    1a84:	f4 91       	lpm	r31, Z
    1a86:	e0 2d       	mov	r30, r0
    1a88:	09 94       	ijmp

00001a8a <malloc>:
    1a8a:	0f 93       	push	r16
    1a8c:	1f 93       	push	r17
    1a8e:	cf 93       	push	r28
    1a90:	df 93       	push	r29
    1a92:	82 30       	cpi	r24, 0x02	; 2
    1a94:	91 05       	cpc	r25, r1
    1a96:	10 f4       	brcc	.+4      	; 0x1a9c <malloc+0x12>
    1a98:	82 e0       	ldi	r24, 0x02	; 2
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	e0 91 c9 04 	lds	r30, 0x04C9	; 0x8004c9 <__flp>
    1aa0:	f0 91 ca 04 	lds	r31, 0x04CA	; 0x8004ca <__flp+0x1>
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	a0 e0       	ldi	r26, 0x00	; 0
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	30 97       	sbiw	r30, 0x00	; 0
    1aae:	19 f1       	breq	.+70     	; 0x1af6 <malloc+0x6c>
    1ab0:	40 81       	ld	r20, Z
    1ab2:	51 81       	ldd	r21, Z+1	; 0x01
    1ab4:	02 81       	ldd	r16, Z+2	; 0x02
    1ab6:	13 81       	ldd	r17, Z+3	; 0x03
    1ab8:	48 17       	cp	r20, r24
    1aba:	59 07       	cpc	r21, r25
    1abc:	c8 f0       	brcs	.+50     	; 0x1af0 <malloc+0x66>
    1abe:	84 17       	cp	r24, r20
    1ac0:	95 07       	cpc	r25, r21
    1ac2:	69 f4       	brne	.+26     	; 0x1ade <malloc+0x54>
    1ac4:	10 97       	sbiw	r26, 0x00	; 0
    1ac6:	31 f0       	breq	.+12     	; 0x1ad4 <malloc+0x4a>
    1ac8:	12 96       	adiw	r26, 0x02	; 2
    1aca:	0c 93       	st	X, r16
    1acc:	12 97       	sbiw	r26, 0x02	; 2
    1ace:	13 96       	adiw	r26, 0x03	; 3
    1ad0:	1c 93       	st	X, r17
    1ad2:	27 c0       	rjmp	.+78     	; 0x1b22 <malloc+0x98>
    1ad4:	00 93 c9 04 	sts	0x04C9, r16	; 0x8004c9 <__flp>
    1ad8:	10 93 ca 04 	sts	0x04CA, r17	; 0x8004ca <__flp+0x1>
    1adc:	22 c0       	rjmp	.+68     	; 0x1b22 <malloc+0x98>
    1ade:	21 15       	cp	r18, r1
    1ae0:	31 05       	cpc	r19, r1
    1ae2:	19 f0       	breq	.+6      	; 0x1aea <malloc+0x60>
    1ae4:	42 17       	cp	r20, r18
    1ae6:	53 07       	cpc	r21, r19
    1ae8:	18 f4       	brcc	.+6      	; 0x1af0 <malloc+0x66>
    1aea:	9a 01       	movw	r18, r20
    1aec:	bd 01       	movw	r22, r26
    1aee:	ef 01       	movw	r28, r30
    1af0:	df 01       	movw	r26, r30
    1af2:	f8 01       	movw	r30, r16
    1af4:	db cf       	rjmp	.-74     	; 0x1aac <malloc+0x22>
    1af6:	21 15       	cp	r18, r1
    1af8:	31 05       	cpc	r19, r1
    1afa:	f9 f0       	breq	.+62     	; 0x1b3a <malloc+0xb0>
    1afc:	28 1b       	sub	r18, r24
    1afe:	39 0b       	sbc	r19, r25
    1b00:	24 30       	cpi	r18, 0x04	; 4
    1b02:	31 05       	cpc	r19, r1
    1b04:	80 f4       	brcc	.+32     	; 0x1b26 <malloc+0x9c>
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	9b 81       	ldd	r25, Y+3	; 0x03
    1b0a:	61 15       	cp	r22, r1
    1b0c:	71 05       	cpc	r23, r1
    1b0e:	21 f0       	breq	.+8      	; 0x1b18 <malloc+0x8e>
    1b10:	fb 01       	movw	r30, r22
    1b12:	93 83       	std	Z+3, r25	; 0x03
    1b14:	82 83       	std	Z+2, r24	; 0x02
    1b16:	04 c0       	rjmp	.+8      	; 0x1b20 <malloc+0x96>
    1b18:	90 93 ca 04 	sts	0x04CA, r25	; 0x8004ca <__flp+0x1>
    1b1c:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <__flp>
    1b20:	fe 01       	movw	r30, r28
    1b22:	32 96       	adiw	r30, 0x02	; 2
    1b24:	44 c0       	rjmp	.+136    	; 0x1bae <malloc+0x124>
    1b26:	fe 01       	movw	r30, r28
    1b28:	e2 0f       	add	r30, r18
    1b2a:	f3 1f       	adc	r31, r19
    1b2c:	81 93       	st	Z+, r24
    1b2e:	91 93       	st	Z+, r25
    1b30:	22 50       	subi	r18, 0x02	; 2
    1b32:	31 09       	sbc	r19, r1
    1b34:	39 83       	std	Y+1, r19	; 0x01
    1b36:	28 83       	st	Y, r18
    1b38:	3a c0       	rjmp	.+116    	; 0x1bae <malloc+0x124>
    1b3a:	20 91 c7 04 	lds	r18, 0x04C7	; 0x8004c7 <__brkval>
    1b3e:	30 91 c8 04 	lds	r19, 0x04C8	; 0x8004c8 <__brkval+0x1>
    1b42:	23 2b       	or	r18, r19
    1b44:	41 f4       	brne	.+16     	; 0x1b56 <malloc+0xcc>
    1b46:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1b4a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1b4e:	30 93 c8 04 	sts	0x04C8, r19	; 0x8004c8 <__brkval+0x1>
    1b52:	20 93 c7 04 	sts	0x04C7, r18	; 0x8004c7 <__brkval>
    1b56:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1b5a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1b5e:	21 15       	cp	r18, r1
    1b60:	31 05       	cpc	r19, r1
    1b62:	41 f4       	brne	.+16     	; 0x1b74 <malloc+0xea>
    1b64:	2d b7       	in	r18, 0x3d	; 61
    1b66:	3e b7       	in	r19, 0x3e	; 62
    1b68:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1b6c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1b70:	24 1b       	sub	r18, r20
    1b72:	35 0b       	sbc	r19, r21
    1b74:	e0 91 c7 04 	lds	r30, 0x04C7	; 0x8004c7 <__brkval>
    1b78:	f0 91 c8 04 	lds	r31, 0x04C8	; 0x8004c8 <__brkval+0x1>
    1b7c:	e2 17       	cp	r30, r18
    1b7e:	f3 07       	cpc	r31, r19
    1b80:	a0 f4       	brcc	.+40     	; 0x1baa <malloc+0x120>
    1b82:	2e 1b       	sub	r18, r30
    1b84:	3f 0b       	sbc	r19, r31
    1b86:	28 17       	cp	r18, r24
    1b88:	39 07       	cpc	r19, r25
    1b8a:	78 f0       	brcs	.+30     	; 0x1baa <malloc+0x120>
    1b8c:	ac 01       	movw	r20, r24
    1b8e:	4e 5f       	subi	r20, 0xFE	; 254
    1b90:	5f 4f       	sbci	r21, 0xFF	; 255
    1b92:	24 17       	cp	r18, r20
    1b94:	35 07       	cpc	r19, r21
    1b96:	48 f0       	brcs	.+18     	; 0x1baa <malloc+0x120>
    1b98:	4e 0f       	add	r20, r30
    1b9a:	5f 1f       	adc	r21, r31
    1b9c:	50 93 c8 04 	sts	0x04C8, r21	; 0x8004c8 <__brkval+0x1>
    1ba0:	40 93 c7 04 	sts	0x04C7, r20	; 0x8004c7 <__brkval>
    1ba4:	81 93       	st	Z+, r24
    1ba6:	91 93       	st	Z+, r25
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <malloc+0x124>
    1baa:	e0 e0       	ldi	r30, 0x00	; 0
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	cf 01       	movw	r24, r30
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	1f 91       	pop	r17
    1bb6:	0f 91       	pop	r16
    1bb8:	08 95       	ret

00001bba <free>:
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <free+0xa>
    1bc2:	81 c0       	rjmp	.+258    	; 0x1cc6 <free+0x10c>
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	32 97       	sbiw	r30, 0x02	; 2
    1bc8:	13 82       	std	Z+3, r1	; 0x03
    1bca:	12 82       	std	Z+2, r1	; 0x02
    1bcc:	a0 91 c9 04 	lds	r26, 0x04C9	; 0x8004c9 <__flp>
    1bd0:	b0 91 ca 04 	lds	r27, 0x04CA	; 0x8004ca <__flp+0x1>
    1bd4:	10 97       	sbiw	r26, 0x00	; 0
    1bd6:	81 f4       	brne	.+32     	; 0x1bf8 <free+0x3e>
    1bd8:	20 81       	ld	r18, Z
    1bda:	31 81       	ldd	r19, Z+1	; 0x01
    1bdc:	82 0f       	add	r24, r18
    1bde:	93 1f       	adc	r25, r19
    1be0:	20 91 c7 04 	lds	r18, 0x04C7	; 0x8004c7 <__brkval>
    1be4:	30 91 c8 04 	lds	r19, 0x04C8	; 0x8004c8 <__brkval+0x1>
    1be8:	28 17       	cp	r18, r24
    1bea:	39 07       	cpc	r19, r25
    1bec:	51 f5       	brne	.+84     	; 0x1c42 <free+0x88>
    1bee:	f0 93 c8 04 	sts	0x04C8, r31	; 0x8004c8 <__brkval+0x1>
    1bf2:	e0 93 c7 04 	sts	0x04C7, r30	; 0x8004c7 <__brkval>
    1bf6:	67 c0       	rjmp	.+206    	; 0x1cc6 <free+0x10c>
    1bf8:	ed 01       	movw	r28, r26
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	ce 17       	cp	r28, r30
    1c00:	df 07       	cpc	r29, r31
    1c02:	40 f4       	brcc	.+16     	; 0x1c14 <free+0x5a>
    1c04:	4a 81       	ldd	r20, Y+2	; 0x02
    1c06:	5b 81       	ldd	r21, Y+3	; 0x03
    1c08:	9e 01       	movw	r18, r28
    1c0a:	41 15       	cp	r20, r1
    1c0c:	51 05       	cpc	r21, r1
    1c0e:	f1 f0       	breq	.+60     	; 0x1c4c <free+0x92>
    1c10:	ea 01       	movw	r28, r20
    1c12:	f5 cf       	rjmp	.-22     	; 0x1bfe <free+0x44>
    1c14:	d3 83       	std	Z+3, r29	; 0x03
    1c16:	c2 83       	std	Z+2, r28	; 0x02
    1c18:	40 81       	ld	r20, Z
    1c1a:	51 81       	ldd	r21, Z+1	; 0x01
    1c1c:	84 0f       	add	r24, r20
    1c1e:	95 1f       	adc	r25, r21
    1c20:	c8 17       	cp	r28, r24
    1c22:	d9 07       	cpc	r29, r25
    1c24:	59 f4       	brne	.+22     	; 0x1c3c <free+0x82>
    1c26:	88 81       	ld	r24, Y
    1c28:	99 81       	ldd	r25, Y+1	; 0x01
    1c2a:	84 0f       	add	r24, r20
    1c2c:	95 1f       	adc	r25, r21
    1c2e:	02 96       	adiw	r24, 0x02	; 2
    1c30:	91 83       	std	Z+1, r25	; 0x01
    1c32:	80 83       	st	Z, r24
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	9b 81       	ldd	r25, Y+3	; 0x03
    1c38:	93 83       	std	Z+3, r25	; 0x03
    1c3a:	82 83       	std	Z+2, r24	; 0x02
    1c3c:	21 15       	cp	r18, r1
    1c3e:	31 05       	cpc	r19, r1
    1c40:	29 f4       	brne	.+10     	; 0x1c4c <free+0x92>
    1c42:	f0 93 ca 04 	sts	0x04CA, r31	; 0x8004ca <__flp+0x1>
    1c46:	e0 93 c9 04 	sts	0x04C9, r30	; 0x8004c9 <__flp>
    1c4a:	3d c0       	rjmp	.+122    	; 0x1cc6 <free+0x10c>
    1c4c:	e9 01       	movw	r28, r18
    1c4e:	fb 83       	std	Y+3, r31	; 0x03
    1c50:	ea 83       	std	Y+2, r30	; 0x02
    1c52:	49 91       	ld	r20, Y+
    1c54:	59 91       	ld	r21, Y+
    1c56:	c4 0f       	add	r28, r20
    1c58:	d5 1f       	adc	r29, r21
    1c5a:	ec 17       	cp	r30, r28
    1c5c:	fd 07       	cpc	r31, r29
    1c5e:	61 f4       	brne	.+24     	; 0x1c78 <free+0xbe>
    1c60:	80 81       	ld	r24, Z
    1c62:	91 81       	ldd	r25, Z+1	; 0x01
    1c64:	84 0f       	add	r24, r20
    1c66:	95 1f       	adc	r25, r21
    1c68:	02 96       	adiw	r24, 0x02	; 2
    1c6a:	e9 01       	movw	r28, r18
    1c6c:	99 83       	std	Y+1, r25	; 0x01
    1c6e:	88 83       	st	Y, r24
    1c70:	82 81       	ldd	r24, Z+2	; 0x02
    1c72:	93 81       	ldd	r25, Z+3	; 0x03
    1c74:	9b 83       	std	Y+3, r25	; 0x03
    1c76:	8a 83       	std	Y+2, r24	; 0x02
    1c78:	e0 e0       	ldi	r30, 0x00	; 0
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	12 96       	adiw	r26, 0x02	; 2
    1c7e:	8d 91       	ld	r24, X+
    1c80:	9c 91       	ld	r25, X
    1c82:	13 97       	sbiw	r26, 0x03	; 3
    1c84:	00 97       	sbiw	r24, 0x00	; 0
    1c86:	19 f0       	breq	.+6      	; 0x1c8e <free+0xd4>
    1c88:	fd 01       	movw	r30, r26
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	f7 cf       	rjmp	.-18     	; 0x1c7c <free+0xc2>
    1c8e:	8d 91       	ld	r24, X+
    1c90:	9c 91       	ld	r25, X
    1c92:	11 97       	sbiw	r26, 0x01	; 1
    1c94:	9d 01       	movw	r18, r26
    1c96:	2e 5f       	subi	r18, 0xFE	; 254
    1c98:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9a:	82 0f       	add	r24, r18
    1c9c:	93 1f       	adc	r25, r19
    1c9e:	20 91 c7 04 	lds	r18, 0x04C7	; 0x8004c7 <__brkval>
    1ca2:	30 91 c8 04 	lds	r19, 0x04C8	; 0x8004c8 <__brkval+0x1>
    1ca6:	28 17       	cp	r18, r24
    1ca8:	39 07       	cpc	r19, r25
    1caa:	69 f4       	brne	.+26     	; 0x1cc6 <free+0x10c>
    1cac:	30 97       	sbiw	r30, 0x00	; 0
    1cae:	29 f4       	brne	.+10     	; 0x1cba <free+0x100>
    1cb0:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <__flp+0x1>
    1cb4:	10 92 c9 04 	sts	0x04C9, r1	; 0x8004c9 <__flp>
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <free+0x104>
    1cba:	13 82       	std	Z+3, r1	; 0x03
    1cbc:	12 82       	std	Z+2, r1	; 0x02
    1cbe:	b0 93 c8 04 	sts	0x04C8, r27	; 0x8004c8 <__brkval+0x1>
    1cc2:	a0 93 c7 04 	sts	0x04C7, r26	; 0x8004c7 <__brkval>
    1cc6:	df 91       	pop	r29
    1cc8:	cf 91       	pop	r28
    1cca:	08 95       	ret

00001ccc <memcpy>:
    1ccc:	fb 01       	movw	r30, r22
    1cce:	dc 01       	movw	r26, r24
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <memcpy+0xa>
    1cd2:	01 90       	ld	r0, Z+
    1cd4:	0d 92       	st	X+, r0
    1cd6:	41 50       	subi	r20, 0x01	; 1
    1cd8:	50 40       	sbci	r21, 0x00	; 0
    1cda:	d8 f7       	brcc	.-10     	; 0x1cd2 <memcpy+0x6>
    1cdc:	08 95       	ret

00001cde <__do_global_dtors>:
    1cde:	10 e0       	ldi	r17, 0x00	; 0
    1ce0:	ce e5       	ldi	r28, 0x5E	; 94
    1ce2:	d0 e0       	ldi	r29, 0x00	; 0
    1ce4:	04 c0       	rjmp	.+8      	; 0x1cee <__do_global_dtors+0x10>
    1ce6:	fe 01       	movw	r30, r28
    1ce8:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__tablejump2__>
    1cec:	21 96       	adiw	r28, 0x01	; 1
    1cee:	cf 35       	cpi	r28, 0x5F	; 95
    1cf0:	d1 07       	cpc	r29, r17
    1cf2:	c9 f7       	brne	.-14     	; 0x1ce6 <__do_global_dtors+0x8>
    1cf4:	f8 94       	cli

00001cf6 <__stop_program>:
    1cf6:	ff cf       	rjmp	.-2      	; 0x1cf6 <__stop_program>
