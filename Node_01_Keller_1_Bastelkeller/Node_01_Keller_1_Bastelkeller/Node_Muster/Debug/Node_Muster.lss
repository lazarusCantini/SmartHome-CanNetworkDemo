
Node_Muster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000038e  00800100  0000218a  0000223e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000218a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013f  0080048e  0080048e  000025cc  2**0
                  ALLOC
  3 .eeprom       00000008  00810000  00810000  000025cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000025d4  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002604  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000620  00000000  00000000  00002644  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000125a1  00000000  00000000  00002c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000300a  00000000  00000000  00015205  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000038b9  00000000  00000000  0001820f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001384  00000000  00000000  0001bac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003044  00000000  00000000  0001ce4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006603  00000000  00000000  0001fe90  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005f0  00000000  00000000  00026493  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__dtors_end>
       4:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <__vector_1>
       8:	0c 94 0f 0e 	jmp	0x1c1e	; 0x1c1e <__vector_2>
       c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <__vector_16>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <__vector_18>
      4c:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <__vector_19>
      50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	70 08       	sbc	r7, r0
      ba:	ec 0b       	sbc	r30, r28

000000bc <__ctors_end>:
      bc:	74 08       	sbc	r7, r4

000000be <__dtors_end>:
      be:	11 24       	eor	r1, r1
      c0:	1f be       	out	0x3f, r1	; 63
      c2:	cf ef       	ldi	r28, 0xFF	; 255
      c4:	d8 e0       	ldi	r29, 0x08	; 8
      c6:	de bf       	out	0x3e, r29	; 62
      c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
      ca:	14 e0       	ldi	r17, 0x04	; 4
      cc:	a0 e0       	ldi	r26, 0x00	; 0
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	ea e8       	ldi	r30, 0x8A	; 138
      d2:	f1 e2       	ldi	r31, 0x21	; 33
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
      d6:	05 90       	lpm	r0, Z+
      d8:	0d 92       	st	X+, r0
      da:	ae 38       	cpi	r26, 0x8E	; 142
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_clear_bss>:
      e0:	25 e0       	ldi	r18, 0x05	; 5
      e2:	ae e8       	ldi	r26, 0x8E	; 142
      e4:	b4 e0       	ldi	r27, 0x04	; 4
      e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
      e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
      ea:	ad 3c       	cpi	r26, 0xCD	; 205
      ec:	b2 07       	cpc	r27, r18
      ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>

000000f0 <__do_global_ctors>:
      f0:	10 e0       	ldi	r17, 0x00	; 0
      f2:	ce e5       	ldi	r28, 0x5E	; 94
      f4:	d0 e0       	ldi	r29, 0x00	; 0
      f6:	04 c0       	rjmp	.+8      	; 0x100 <__do_global_ctors+0x10>
      f8:	21 97       	sbiw	r28, 0x01	; 1
      fa:	fe 01       	movw	r30, r28
      fc:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__tablejump2__>
     100:	cc 35       	cpi	r28, 0x5C	; 92
     102:	d1 07       	cpc	r29, r17
     104:	c9 f7       	brne	.-14     	; 0xf8 <__do_global_ctors+0x8>
     106:	0e 94 1b 0c 	call	0x1836	; 0x1836 <main>
     10a:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__do_global_dtors>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <_Z17ID_ZusammensetzenPh>:

uint32_t BinaerPotenzen[] = { 1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912,1073741824,2147483648 };


uint32_t ID_Zusammensetzen (uint8_t *_8Bit_array/*, uint32_t *Zeiger*/)
{
     112:	cf 92       	push	r12
     114:	df 92       	push	r13
     116:	ef 92       	push	r14
     118:	ff 92       	push	r15
     11a:	cf 93       	push	r28
     11c:	df 93       	push	r29
     11e:	fc 01       	movw	r30, r24
     120:	ec 01       	movw	r28, r24
     122:	28 e1       	ldi	r18, 0x18	; 24
     124:	30 e0       	ldi	r19, 0x00	; 0
		ID = ID + (_8Bit_array[i] << (8*(3-i))); 
		Serial.println(ID, BIN);
	}
	return Zeiger;
	*/
			uint32_t ID = 0;
     126:	60 e0       	ldi	r22, 0x00	; 0
     128:	70 e0       	ldi	r23, 0x00	; 0
     12a:	cb 01       	movw	r24, r22
			uint32_t temp = 0;
				for (int i=0; i<4; i++)
				{
					temp = _8Bit_array[i];
     12c:	49 91       	ld	r20, Y+
					ID = ID + (temp << (8*(3-i)));
     12e:	c4 2e       	mov	r12, r20
     130:	d1 2c       	mov	r13, r1
     132:	e1 2c       	mov	r14, r1
     134:	f1 2c       	mov	r15, r1
     136:	02 2e       	mov	r0, r18
     138:	04 c0       	rjmp	.+8      	; 0x142 <_Z17ID_ZusammensetzenPh+0x30>
     13a:	cc 0c       	add	r12, r12
     13c:	dd 1c       	adc	r13, r13
     13e:	ee 1c       	adc	r14, r14
     140:	ff 1c       	adc	r15, r15
     142:	0a 94       	dec	r0
     144:	d2 f7       	brpl	.-12     	; 0x13a <_Z17ID_ZusammensetzenPh+0x28>
     146:	6c 0d       	add	r22, r12
     148:	7d 1d       	adc	r23, r13
     14a:	8e 1d       	adc	r24, r14
     14c:	9f 1d       	adc	r25, r15
     14e:	28 50       	subi	r18, 0x08	; 8
     150:	31 09       	sbc	r19, r1
	}
	return Zeiger;
	*/
			uint32_t ID = 0;
			uint32_t temp = 0;
				for (int i=0; i<4; i++)
     152:	28 3f       	cpi	r18, 0xF8	; 248
     154:	4f ef       	ldi	r20, 0xFF	; 255
     156:	34 07       	cpc	r19, r20
     158:	49 f7       	brne	.-46     	; 0x12c <_Z17ID_ZusammensetzenPh+0x1a>
				{
					temp = _8Bit_array[i];
					ID = ID + (temp << (8*(3-i)));
				}
				_8Bit_array[0] = 0;
     15a:	10 82       	st	Z, r1
				_8Bit_array[1] = 0;
     15c:	11 82       	std	Z+1, r1	; 0x01
				_8Bit_array[2] = 0;
     15e:	12 82       	std	Z+2, r1	; 0x02
				_8Bit_array[3] = 0;
     160:	13 82       	std	Z+3, r1	; 0x03
				return ID;
}
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28
     166:	ff 90       	pop	r15
     168:	ef 90       	pop	r14
     16a:	df 90       	pop	r13
     16c:	cf 90       	pop	r12
     16e:	08 95       	ret

00000170 <_Z18ID_Maske_berechnenPmh>:

uint32_t ID_Maske_berechnen (uint32_t *_ID_Liste, uint8_t ID_list_lenght)
{
     170:	cf 92       	push	r12
     172:	df 92       	push	r13
     174:	ef 92       	push	r14
     176:	ff 92       	push	r15
     178:	36 2f       	mov	r19, r22
     17a:	fc 01       	movw	r30, r24
	//ODER-Verknüfung aller IDs der Reihe nach
	uint32_t Maske = 0;
	for (uint8_t i=0; i<ID_list_lenght; i++ )
     17c:	20 e0       	ldi	r18, 0x00	; 0
}

uint32_t ID_Maske_berechnen (uint32_t *_ID_Liste, uint8_t ID_list_lenght)
{
	//ODER-Verknüfung aller IDs der Reihe nach
	uint32_t Maske = 0;
     17e:	60 e0       	ldi	r22, 0x00	; 0
     180:	70 e0       	ldi	r23, 0x00	; 0
     182:	cb 01       	movw	r24, r22
	for (uint8_t i=0; i<ID_list_lenght; i++ )
     184:	23 17       	cp	r18, r19
     186:	51 f0       	breq	.+20     	; 0x19c <_Z18ID_Maske_berechnenPmh+0x2c>
	{
		Maske = Maske | _ID_Liste[i];
     188:	c1 90       	ld	r12, Z+
     18a:	d1 90       	ld	r13, Z+
     18c:	e1 90       	ld	r14, Z+
     18e:	f1 90       	ld	r15, Z+
     190:	6c 29       	or	r22, r12
     192:	7d 29       	or	r23, r13
     194:	8e 29       	or	r24, r14
     196:	9f 29       	or	r25, r15

uint32_t ID_Maske_berechnen (uint32_t *_ID_Liste, uint8_t ID_list_lenght)
{
	//ODER-Verknüfung aller IDs der Reihe nach
	uint32_t Maske = 0;
	for (uint8_t i=0; i<ID_list_lenght; i++ )
     198:	2f 5f       	subi	r18, 0xFF	; 255
     19a:	f4 cf       	rjmp	.-24     	; 0x184 <_Z18ID_Maske_berechnenPmh+0x14>
	{
		Maske = Maske | _ID_Liste[i];
	}
	return Maske;
}
     19c:	ff 90       	pop	r15
     19e:	ef 90       	pop	r14
     1a0:	df 90       	pop	r13
     1a2:	cf 90       	pop	r12
     1a4:	08 95       	ret

000001a6 <_Z11ID_Ausgebenm>:

//Die Funktion ist nötig zum Debugging, da eine Serielle Datenausgabe der ID mittels Serial.println(ID, BIN); keine führende Nullen ausgibt
//__attribute__((optimize(0)))
void ID_Ausgeben(uint32_t ID)
{
     1a6:	cf 92       	push	r12
     1a8:	df 92       	push	r13
     1aa:	ef 92       	push	r14
     1ac:	ff 92       	push	r15
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	6b 01       	movw	r12, r22
     1b4:	7c 01       	movw	r14, r24
     1b6:	c6 e8       	ldi	r28, 0x86	; 134
     1b8:	d1 e0       	ldi	r29, 0x01	; 1
	uint32_t rest = ID;
	for (int i=31; i>=0; i--)
	{
		if (rest >= BinaerPotenzen[i])
     1ba:	ba 91       	ld	r27, -Y
     1bc:	aa 91       	ld	r26, -Y
     1be:	9a 91       	ld	r25, -Y
     1c0:	8a 91       	ld	r24, -Y
     1c2:	c8 16       	cp	r12, r24
     1c4:	d9 06       	cpc	r13, r25
     1c6:	ea 06       	cpc	r14, r26
     1c8:	fb 06       	cpc	r15, r27
     1ca:	70 f0       	brcs	.+28     	; 0x1e8 <_Z11ID_Ausgebenm+0x42>
		{
			Serial.print('1');
     1cc:	61 e3       	ldi	r22, 0x31	; 49
     1ce:	83 e2       	ldi	r24, 0x23	; 35
     1d0:	95 e0       	ldi	r25, 0x05	; 5
     1d2:	0e 94 6d 0c 	call	0x18da	; 0x18da <_ZN5Print5printEc>
			rest = rest - BinaerPotenzen[i];	
     1d6:	88 81       	ld	r24, Y
     1d8:	99 81       	ldd	r25, Y+1	; 0x01
     1da:	aa 81       	ldd	r26, Y+2	; 0x02
     1dc:	bb 81       	ldd	r27, Y+3	; 0x03
     1de:	c8 1a       	sub	r12, r24
     1e0:	d9 0a       	sbc	r13, r25
     1e2:	ea 0a       	sbc	r14, r26
     1e4:	fb 0a       	sbc	r15, r27
     1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <_Z11ID_Ausgebenm+0x4c>
		}
		else
		{
			Serial.print('0');
     1e8:	60 e3       	ldi	r22, 0x30	; 48
     1ea:	83 e2       	ldi	r24, 0x23	; 35
     1ec:	95 e0       	ldi	r25, 0x05	; 5
     1ee:	0e 94 6d 0c 	call	0x18da	; 0x18da <_ZN5Print5printEc>
//Die Funktion ist nötig zum Debugging, da eine Serielle Datenausgabe der ID mittels Serial.println(ID, BIN); keine führende Nullen ausgibt
//__attribute__((optimize(0)))
void ID_Ausgeben(uint32_t ID)
{
	uint32_t rest = ID;
	for (int i=31; i>=0; i--)
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	c6 30       	cpi	r28, 0x06	; 6
     1f6:	d8 07       	cpc	r29, r24
     1f8:	01 f7       	brne	.-64     	; 0x1ba <_Z11ID_Ausgebenm+0x14>
		else
		{
			Serial.print('0');
		}
	}
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	ff 90       	pop	r15
     200:	ef 90       	pop	r14
     202:	df 90       	pop	r13
     204:	cf 90       	pop	r12
     206:	08 95       	ret

00000208 <setup>:

bool CAN_Message_detected = false;



void setup() {
     208:	8f 92       	push	r8
     20a:	9f 92       	push	r9
     20c:	af 92       	push	r10
     20e:	bf 92       	push	r11
     210:	cf 92       	push	r12
     212:	df 92       	push	r13
     214:	ef 92       	push	r14
     216:	ff 92       	push	r15
     218:	0f 93       	push	r16
     21a:	1f 93       	push	r17
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	00 d0       	rcall	.+0      	; 0x222 <setup+0x1a>
     222:	00 d0       	rcall	.+0      	; 0x224 <setup+0x1c>
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
  // put your setup code here, to run once:
  int packetSize = 0;
	  Serial.begin(9600);
     228:	40 e8       	ldi	r20, 0x80	; 128
     22a:	55 e2       	ldi	r21, 0x25	; 37
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	83 e2       	ldi	r24, 0x23	; 35
     232:	95 e0       	ldi	r25, 0x05	; 5
     234:	0e 94 87 0b 	call	0x170e	; 0x170e <_ZN14HardwareSerial5beginEm>
	  while (!Serial);

	  Serial.println("CAN Node");
     238:	62 e9       	ldi	r22, 0x92	; 146
     23a:	72 e0       	ldi	r23, 0x02	; 2
     23c:	83 e2       	ldi	r24, 0x23	; 35
     23e:	95 e0       	ldi	r25, 0x05	; 5
     240:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_ZN5Print7printlnEPKc>

	  // start the CAN bus at 500 kbps
	  if (!CAN.begin(500E3)) {
     244:	40 e2       	ldi	r20, 0x20	; 32
     246:	51 ea       	ldi	r21, 0xA1	; 161
     248:	67 e0       	ldi	r22, 0x07	; 7
     24a:	70 e0       	ldi	r23, 0x00	; 0
     24c:	80 ee       	ldi	r24, 0xE0	; 224
     24e:	94 e0       	ldi	r25, 0x04	; 4
     250:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_ZN12MCP2515Class5beginEl>
     254:	89 2b       	or	r24, r25
     256:	39 f4       	brne	.+14     	; 0x266 <setup+0x5e>
		  Serial.println("Starting CAN failed!");
     258:	6b e9       	ldi	r22, 0x9B	; 155
     25a:	72 e0       	ldi	r23, 0x02	; 2
     25c:	83 e2       	ldi	r24, 0x23	; 35
     25e:	95 e0       	ldi	r25, 0x05	; 5
     260:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_ZN5Print7printlnEPKc>
     264:	ff cf       	rjmp	.-2      	; 0x264 <setup+0x5c>
		  while (1);
	  }
	  Serial.println("Can Nachricht wird gesendet");
     266:	60 eb       	ldi	r22, 0xB0	; 176
     268:	72 e0       	ldi	r23, 0x02	; 2
     26a:	83 e2       	ldi	r24, 0x23	; 35
     26c:	95 e0       	ldi	r25, 0x05	; 5
     26e:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_ZN5Print7printlnEPKc>
	  CAN.filterExtended(UID_KELLER_HUB, UID_MASK_ZERO);
     272:	00 e0       	ldi	r16, 0x00	; 0
     274:	10 e0       	ldi	r17, 0x00	; 0
     276:	98 01       	movw	r18, r16
     278:	40 e0       	ldi	r20, 0x00	; 0
     27a:	50 e0       	ldi	r21, 0x00	; 0
     27c:	60 e9       	ldi	r22, 0x90	; 144
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	80 ee       	ldi	r24, 0xE0	; 224
     282:	94 e0       	ldi	r25, 0x04	; 4
     284:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN12MCP2515Class14filterExtendedEll>
	  CAN.beginExtendedPacket(UID_NODE);
     288:	2f ef       	ldi	r18, 0xFF	; 255
     28a:	3f ef       	ldi	r19, 0xFF	; 255
     28c:	40 e0       	ldi	r20, 0x00	; 0
     28e:	50 ec       	ldi	r21, 0xC0	; 192
     290:	62 e9       	ldi	r22, 0x92	; 146
     292:	70 e0       	ldi	r23, 0x00	; 0
     294:	80 ee       	ldi	r24, 0xE0	; 224
     296:	94 e0       	ldi	r25, 0x04	; 4
     298:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN18CANControllerClass19beginExtendedPacketElib>
	  CAN.write(Kommando_Get_HUB_ID);
     29c:	61 e0       	ldi	r22, 0x01	; 1
     29e:	80 ee       	ldi	r24, 0xE0	; 224
     2a0:	94 e0       	ldi	r25, 0x04	; 4
     2a2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN18CANControllerClass5writeEh>
	  CAN.endPacket();
     2a6:	80 ee       	ldi	r24, 0xE0	; 224
     2a8:	94 e0       	ldi	r25, 0x04	; 4
     2aa:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN12MCP2515Class9endPacketEv>
	  Serial.println("Can Nachricht wurde gesendet");
     2ae:	6c ec       	ldi	r22, 0xCC	; 204
     2b0:	72 e0       	ldi	r23, 0x02	; 2
     2b2:	83 e2       	ldi	r24, 0x23	; 35
     2b4:	95 e0       	ldi	r25, 0x05	; 5
     2b6:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_ZN5Print7printlnEPKc>
	  while(CAN.parsePacket() == 0)
     2ba:	80 ee       	ldi	r24, 0xE0	; 224
     2bc:	94 e0       	ldi	r25, 0x04	; 4
     2be:	0e 94 ed 04 	call	0x9da	; 0x9da <_ZN12MCP2515Class11parsePacketEv>
     2c2:	89 2b       	or	r24, r25
     2c4:	d1 f3       	breq	.-12     	; 0x2ba <setup+0xb2>
	  {
		  //Endlosschleife bis die UID vom HUB empfangen wurde
	  }
	  if (CAN.packetId() == UID_KELLER_HUB)
     2c6:	80 ee       	ldi	r24, 0xE0	; 224
     2c8:	94 e0       	ldi	r25, 0x04	; 4
     2ca:	0e 94 ee 03 	call	0x7dc	; 0x7dc <_ZN18CANControllerClass8packetIdEv>
     2ce:	61 15       	cp	r22, r1
     2d0:	71 05       	cpc	r23, r1
     2d2:	80 49       	sbci	r24, 0x90	; 144
     2d4:	91 05       	cpc	r25, r1
     2d6:	29 f4       	brne	.+10     	; 0x2e2 <setup+0xda>
	  {
		  if (CAN.read() == UID_KELLER_HUB)
     2d8:	80 ee       	ldi	r24, 0xE0	; 224
     2da:	94 e0       	ldi	r25, 0x04	; 4
     2dc:	0e 94 18 03 	call	0x630	; 0x630 <_ZN18CANControllerClass4readEv>
     2e0:	06 c0       	rjmp	.+12     	; 0x2ee <setup+0xe6>
			  //es wurde eine neue HUB ID empfangen
		  }
	  } 
	  else //Das empfangene Packet hat eine nicht erwartete ID
	  {
		  Serial.println("Das Paket hat eine falsche ID");
     2e2:	69 ee       	ldi	r22, 0xE9	; 233
     2e4:	72 e0       	ldi	r23, 0x02	; 2
     2e6:	83 e2       	ldi	r24, 0x23	; 35
     2e8:	95 e0       	ldi	r25, 0x05	; 5
     2ea:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_ZN5Print7printlnEPKc>
	  }
	  CAN_Message_detected = false;
     2ee:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <__data_end>
	  while (CAN.parsePacket() != 0)
     2f2:	80 ee       	ldi	r24, 0xE0	; 224
     2f4:	94 e0       	ldi	r25, 0x04	; 4
     2f6:	0e 94 ed 04 	call	0x9da	; 0x9da <_ZN12MCP2515Class11parsePacketEv>
     2fa:	89 2b       	or	r24, r25
     2fc:	59 f0       	breq	.+22     	; 0x314 <setup+0x10c>
	  {
		  CAN.read();
     2fe:	80 ee       	ldi	r24, 0xE0	; 224
     300:	94 e0       	ldi	r25, 0x04	; 4
     302:	0e 94 18 03 	call	0x630	; 0x630 <_ZN18CANControllerClass4readEv>
		  Serial.println("Dummy Nachricht weglesen");
     306:	67 e0       	ldi	r22, 0x07	; 7
     308:	73 e0       	ldi	r23, 0x03	; 3
     30a:	83 e2       	ldi	r24, 0x23	; 35
     30c:	95 e0       	ldi	r25, 0x05	; 5
     30e:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_ZN5Print7printlnEPKc>
	  else //Das empfangene Packet hat eine nicht erwartete ID
	  {
		  Serial.println("Das Paket hat eine falsche ID");
	  }
	  CAN_Message_detected = false;
	  while (CAN.parsePacket() != 0)
     312:	ef cf       	rjmp	.-34     	; 0x2f2 <setup+0xea>
		  CAN.read();
		  Serial.println("Dummy Nachricht weglesen");
	  }
	  
	  //Eine Liste der IDs vom HUB anfordern, auf die gelauscht werden soll
	  CAN.beginExtendedPacket(UID_NODE);
     314:	00 e0       	ldi	r16, 0x00	; 0
     316:	2f ef       	ldi	r18, 0xFF	; 255
     318:	3f ef       	ldi	r19, 0xFF	; 255
     31a:	40 e0       	ldi	r20, 0x00	; 0
     31c:	50 ec       	ldi	r21, 0xC0	; 192
     31e:	62 e9       	ldi	r22, 0x92	; 146
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	80 ee       	ldi	r24, 0xE0	; 224
     324:	94 e0       	ldi	r25, 0x04	; 4
     326:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN18CANControllerClass19beginExtendedPacketElib>
	  CAN.write(Kommando_Get_ID_LIST_FROM_HUB);
     32a:	62 e0       	ldi	r22, 0x02	; 2
     32c:	80 ee       	ldi	r24, 0xE0	; 224
     32e:	94 e0       	ldi	r25, 0x04	; 4
     330:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN18CANControllerClass5writeEh>
	  CAN.endPacket();
     334:	80 ee       	ldi	r24, 0xE0	; 224
     336:	94 e0       	ldi	r25, 0x04	; 4
     338:	0e 94 b5 08 	call	0x116a	; 0x116a <_ZN12MCP2515Class9endPacketEv>
	  
	  Serial.println("Die Liste aller zu belauschenden IDs");
     33c:	60 e2       	ldi	r22, 0x20	; 32
     33e:	73 e0       	ldi	r23, 0x03	; 3
     340:	83 e2       	ldi	r24, 0x23	; 35
     342:	95 e0       	ldi	r25, 0x05	; 5
     344:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_ZN5Print7printlnEPKc>
	  //_delay_ms(1000);
		uint8_t buffer[4];
		uint8_t ID_List_numerator = 0;
     348:	10 e0       	ldi	r17, 0x00	; 0
				ID = ID_Zusammensetzen(buffer);
				//ID_Ausgeben(ID);
				//Serial.println("ID fertig");
				if (ID == 0) //Falls in der CAN Nachricht eine 0x0000 steht, zeigt das an, dass die UID Liste komplett Ã¼bertragen wurde
				{
					CAN_UID_LIST_Complete = true;
     34a:	01 e0       	ldi	r16, 0x01	; 1
	  //_delay_ms(1000);
		uint8_t buffer[4];
		uint8_t ID_List_numerator = 0;
		uint32_t ID = 0;
		uint32_t temp = 0;
		while((CAN_UID_LIST_Complete == false) && (ID_List_numerator < ID_LIST_MAXIMUM))
     34c:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <CAN_UID_LIST_Complete>
     350:	81 11       	cpse	r24, r1
     352:	2f c0       	rjmp	.+94     	; 0x3b2 <setup+0x1aa>
     354:	14 31       	cpi	r17, 0x14	; 20
     356:	68 f5       	brcc	.+90     	; 0x3b2 <setup+0x1aa>
		{
				while(CAN.parsePacket() == 0)
     358:	80 ee       	ldi	r24, 0xE0	; 224
     35a:	94 e0       	ldi	r25, 0x04	; 4
     35c:	0e 94 ed 04 	call	0x9da	; 0x9da <_ZN12MCP2515Class11parsePacketEv>
     360:	89 2b       	or	r24, r25
     362:	d1 f3       	breq	.-12     	; 0x358 <setup+0x150>

  float parseFloat(LookaheadMode lookahead = SKIP_ALL, char ignore = NO_IGNORE_CHAR);
  // float version of parseInt

  size_t readBytes( char *buffer, size_t length); // read chars from stream into buffer
  size_t readBytes( uint8_t *buffer, size_t length) { return readBytes((char *)buffer, length); }
     364:	44 e0       	ldi	r20, 0x04	; 4
     366:	50 e0       	ldi	r21, 0x00	; 0
     368:	be 01       	movw	r22, r28
     36a:	6f 5f       	subi	r22, 0xFF	; 255
     36c:	7f 4f       	sbci	r23, 0xFF	; 255
     36e:	80 ee       	ldi	r24, 0xE0	; 224
     370:	94 e0       	ldi	r25, 0x04	; 4
     372:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <_ZN6Stream9readBytesEPcj>
				buffer[0] = 0;
				buffer[1] = 0;
				buffer[2] = 0;
				buffer[3] = 0;
				*/
				ID = ID_Zusammensetzen(buffer);
     376:	ce 01       	movw	r24, r28
     378:	01 96       	adiw	r24, 0x01	; 1
     37a:	0e 94 89 00 	call	0x112	; 0x112 <_Z17ID_ZusammensetzenPh>
				//ID_Ausgeben(ID);
				//Serial.println("ID fertig");
				if (ID == 0) //Falls in der CAN Nachricht eine 0x0000 steht, zeigt das an, dass die UID Liste komplett Ã¼bertragen wurde
     37e:	61 15       	cp	r22, r1
     380:	71 05       	cpc	r23, r1
     382:	81 05       	cpc	r24, r1
     384:	91 05       	cpc	r25, r1
     386:	49 f4       	brne	.+18     	; 0x39a <setup+0x192>
				{
					CAN_UID_LIST_Complete = true;
     388:	00 93 8f 04 	sts	0x048F, r16	; 0x80048f <CAN_UID_LIST_Complete>
					Serial.println("Uebertragung der UID Liste beendet");
     38c:	65 e4       	ldi	r22, 0x45	; 69
     38e:	73 e0       	ldi	r23, 0x03	; 3
     390:	83 e2       	ldi	r24, 0x23	; 35
     392:	95 e0       	ldi	r25, 0x05	; 5
     394:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_ZN5Print7printlnEPKc>
     398:	d9 cf       	rjmp	.-78     	; 0x34c <setup+0x144>
				}
				else
				{
					CAN_UID_List[ID_List_numerator] = ID;
     39a:	24 e0       	ldi	r18, 0x04	; 4
     39c:	12 9f       	mul	r17, r18
     39e:	f0 01       	movw	r30, r0
     3a0:	11 24       	eor	r1, r1
     3a2:	e0 57       	subi	r30, 0x70	; 112
     3a4:	fb 4f       	sbci	r31, 0xFB	; 251
     3a6:	60 83       	st	Z, r22
     3a8:	71 83       	std	Z+1, r23	; 0x01
     3aa:	82 83       	std	Z+2, r24	; 0x02
     3ac:	93 83       	std	Z+3, r25	; 0x03
					ID_List_numerator++;
     3ae:	1f 5f       	subi	r17, 0xFF	; 255
     3b0:	cd cf       	rjmp	.-102    	; 0x34c <setup+0x144>
     3b2:	80 e9       	ldi	r24, 0x90	; 144
     3b4:	c8 2e       	mov	r12, r24
     3b6:	84 e0       	ldi	r24, 0x04	; 4
     3b8:	d8 2e       	mov	r13, r24
	  CAN.endPacket();
	  
	  Serial.println("Die Liste aller zu belauschenden IDs");
	  //_delay_ms(1000);
		uint8_t buffer[4];
		uint8_t ID_List_numerator = 0;
     3ba:	e1 2c       	mov	r14, r1
     3bc:	f1 2c       	mov	r15, r1
				}
				ID = 0;
			
		}
				//Testausgaben aller UIDs
				for (int i=0; i<=ID_List_numerator; i++)
     3be:	a1 2e       	mov	r10, r17
     3c0:	b1 2c       	mov	r11, r1
     3c2:	ae 14       	cp	r10, r14
     3c4:	bf 04       	cpc	r11, r15
     3c6:	54 f1       	brlt	.+84     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
				{
					Serial.print("Ausgabe Arduino: ");
     3c8:	68 e6       	ldi	r22, 0x68	; 104
     3ca:	73 e0       	ldi	r23, 0x03	; 3
     3cc:	83 e2       	ldi	r24, 0x23	; 35
     3ce:	95 e0       	ldi	r25, 0x05	; 5
     3d0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <_ZN5Print5printEPKc>
     3d4:	46 01       	movw	r8, r12
					Serial.println(CAN_UID_List[i], BIN);
     3d6:	f6 01       	movw	r30, r12
     3d8:	41 91       	ld	r20, Z+
     3da:	51 91       	ld	r21, Z+
     3dc:	61 91       	ld	r22, Z+
     3de:	71 91       	ld	r23, Z+
     3e0:	6f 01       	movw	r12, r30
     3e2:	22 e0       	ldi	r18, 0x02	; 2
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	83 e2       	ldi	r24, 0x23	; 35
     3e8:	95 e0       	ldi	r25, 0x05	; 5
     3ea:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <_ZN5Print7printlnEmi>
					Serial.print("Ausgabe eigene Funktion: ");
     3ee:	6a e7       	ldi	r22, 0x7A	; 122
     3f0:	73 e0       	ldi	r23, 0x03	; 3
     3f2:	83 e2       	ldi	r24, 0x23	; 35
     3f4:	95 e0       	ldi	r25, 0x05	; 5
     3f6:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <_ZN5Print5printEPKc>
					ID_Ausgeben(CAN_UID_List[i]);
     3fa:	f4 01       	movw	r30, r8
     3fc:	60 81       	ld	r22, Z
     3fe:	71 81       	ldd	r23, Z+1	; 0x01
     400:	82 81       	ldd	r24, Z+2	; 0x02
     402:	93 81       	ldd	r25, Z+3	; 0x03
     404:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_Z11ID_Ausgebenm>
					Serial.println(" ");
     408:	6b eb       	ldi	r22, 0xBB	; 187
     40a:	73 e0       	ldi	r23, 0x03	; 3
     40c:	83 e2       	ldi	r24, 0x23	; 35
     40e:	95 e0       	ldi	r25, 0x05	; 5
     410:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_ZN5Print7printlnEPKc>
				}
				ID = 0;
			
		}
				//Testausgaben aller UIDs
				for (int i=0; i<=ID_List_numerator; i++)
     414:	ff ef       	ldi	r31, 0xFF	; 255
     416:	ef 1a       	sub	r14, r31
     418:	ff 0a       	sbc	r15, r31
     41a:	d3 cf       	rjmp	.-90     	; 0x3c2 <setup+0x1ba>
					Serial.println(CAN_UID_List[i], BIN);
					Serial.print("Ausgabe eigene Funktion: ");
					ID_Ausgeben(CAN_UID_List[i]);
					Serial.println(" ");
				}
				Serial.print("Es wurden insgesammt ");
     41c:	64 e9       	ldi	r22, 0x94	; 148
     41e:	73 e0       	ldi	r23, 0x03	; 3
     420:	83 e2       	ldi	r24, 0x23	; 35
     422:	95 e0       	ldi	r25, 0x05	; 5
     424:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <_ZN5Print5printEPKc>
				Serial.print(ID_List_numerator);
     428:	4a e0       	ldi	r20, 0x0A	; 10
     42a:	50 e0       	ldi	r21, 0x00	; 0
     42c:	61 2f       	mov	r22, r17
     42e:	83 e2       	ldi	r24, 0x23	; 35
     430:	95 e0       	ldi	r25, 0x05	; 5
     432:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <_ZN5Print5printEhi>
				Serial.print(" IDs uebertragen. ");
     436:	6a ea       	ldi	r22, 0xAA	; 170
     438:	73 e0       	ldi	r23, 0x03	; 3
     43a:	83 e2       	ldi	r24, 0x23	; 35
     43c:	95 e0       	ldi	r25, 0x05	; 5
     43e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <_ZN5Print5printEPKc>
				Serial.println();
     442:	83 e2       	ldi	r24, 0x23	; 35
     444:	95 e0       	ldi	r25, 0x05	; 5
     446:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN5Print7printlnEv>
				
				
	//Nachdem alle zu belauschenden IDs empfangen wurde, wird die Maske berechnet und auf den CAN Controller angewandt
	//ID_Maske_berechnen(CAN_UID_List);
	CAN.filterExtended(ID_Maske_berechnen(CAN_UID_List, 2), UID_MASK_ONE);
     44a:	62 e0       	ldi	r22, 0x02	; 2
     44c:	80 e9       	ldi	r24, 0x90	; 144
     44e:	94 e0       	ldi	r25, 0x04	; 4
     450:	0e 94 b8 00 	call	0x170	; 0x170 <_Z18ID_Maske_berechnenPmh>
     454:	ab 01       	movw	r20, r22
     456:	bc 01       	movw	r22, r24
     458:	0f ef       	ldi	r16, 0xFF	; 255
     45a:	1f ef       	ldi	r17, 0xFF	; 255
     45c:	2f ef       	ldi	r18, 0xFF	; 255
     45e:	33 e0       	ldi	r19, 0x03	; 3
     460:	80 ee       	ldi	r24, 0xE0	; 224
     462:	94 e0       	ldi	r25, 0x04	; 4
     464:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN12MCP2515Class14filterExtendedEll>
	
				
	
}
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	1f 91       	pop	r17
     476:	0f 91       	pop	r16
     478:	ff 90       	pop	r15
     47a:	ef 90       	pop	r14
     47c:	df 90       	pop	r13
     47e:	cf 90       	pop	r12
     480:	bf 90       	pop	r11
     482:	af 90       	pop	r10
     484:	9f 90       	pop	r9
     486:	8f 90       	pop	r8
     488:	08 95       	ret

0000048a <loop>:



void loop() {
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
  // put your main code here, to run repeatedly:
  // try to parse packet
  int packetSize = CAN.parsePacket();
     48e:	80 ee       	ldi	r24, 0xE0	; 224
     490:	94 e0       	ldi	r25, 0x04	; 4
     492:	0e 94 ed 04 	call	0x9da	; 0x9da <_ZN12MCP2515Class11parsePacketEv>
     496:	ec 01       	movw	r28, r24

  if (packetSize) {
     498:	89 2b       	or	r24, r25
     49a:	09 f4       	brne	.+2      	; 0x49e <loop+0x14>
     49c:	6f c0       	rjmp	.+222    	; 0x57c <loop+0xf2>
	  // received a packet
	  Serial.print("Received ");
     49e:	6d eb       	ldi	r22, 0xBD	; 189
     4a0:	73 e0       	ldi	r23, 0x03	; 3
     4a2:	83 e2       	ldi	r24, 0x23	; 35
     4a4:	95 e0       	ldi	r25, 0x05	; 5
     4a6:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <_ZN5Print5printEPKc>

	  if (CAN.packetExtended()) {
     4aa:	80 ee       	ldi	r24, 0xE0	; 224
     4ac:	94 e0       	ldi	r25, 0x04	; 4
     4ae:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <_ZN18CANControllerClass14packetExtendedEv>
     4b2:	88 23       	and	r24, r24
     4b4:	31 f0       	breq	.+12     	; 0x4c2 <loop+0x38>
		  Serial.print("extended ");
     4b6:	67 ec       	ldi	r22, 0xC7	; 199
     4b8:	73 e0       	ldi	r23, 0x03	; 3
     4ba:	83 e2       	ldi	r24, 0x23	; 35
     4bc:	95 e0       	ldi	r25, 0x05	; 5
     4be:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <_ZN5Print5printEPKc>
	  }

	  if (CAN.packetRtr()) {
     4c2:	80 ee       	ldi	r24, 0xE0	; 224
     4c4:	94 e0       	ldi	r25, 0x04	; 4
     4c6:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_ZN18CANControllerClass9packetRtrEv>
     4ca:	88 23       	and	r24, r24
     4cc:	31 f0       	breq	.+12     	; 0x4da <loop+0x50>
		  // Remote transmission request, packet contains no data
		  Serial.print("RTR ");
     4ce:	61 ed       	ldi	r22, 0xD1	; 209
     4d0:	73 e0       	ldi	r23, 0x03	; 3
     4d2:	83 e2       	ldi	r24, 0x23	; 35
     4d4:	95 e0       	ldi	r25, 0x05	; 5
     4d6:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <_ZN5Print5printEPKc>
	  }

	  Serial.print("packet with id 0x");
     4da:	66 ed       	ldi	r22, 0xD6	; 214
     4dc:	73 e0       	ldi	r23, 0x03	; 3
     4de:	83 e2       	ldi	r24, 0x23	; 35
     4e0:	95 e0       	ldi	r25, 0x05	; 5
     4e2:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <_ZN5Print5printEPKc>
	  Serial.print(CAN.packetId(), HEX);
     4e6:	80 ee       	ldi	r24, 0xE0	; 224
     4e8:	94 e0       	ldi	r25, 0x04	; 4
     4ea:	0e 94 ee 03 	call	0x7dc	; 0x7dc <_ZN18CANControllerClass8packetIdEv>
     4ee:	ab 01       	movw	r20, r22
     4f0:	bc 01       	movw	r22, r24
     4f2:	20 e1       	ldi	r18, 0x10	; 16
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	83 e2       	ldi	r24, 0x23	; 35
     4f8:	95 e0       	ldi	r25, 0x05	; 5
     4fa:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <_ZN5Print5printEli>

	  if (CAN.packetRtr()) {
     4fe:	80 ee       	ldi	r24, 0xE0	; 224
     500:	94 e0       	ldi	r25, 0x04	; 4
     502:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_ZN18CANControllerClass9packetRtrEv>
     506:	88 23       	and	r24, r24
     508:	91 f0       	breq	.+36     	; 0x52e <loop+0xa4>
		  Serial.print(" and requested length ");
     50a:	68 ee       	ldi	r22, 0xE8	; 232
     50c:	73 e0       	ldi	r23, 0x03	; 3
     50e:	83 e2       	ldi	r24, 0x23	; 35
     510:	95 e0       	ldi	r25, 0x05	; 5
     512:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <_ZN5Print5printEPKc>
		  Serial.println(CAN.packetDlc());
     516:	80 ee       	ldi	r24, 0xE0	; 224
     518:	94 e0       	ldi	r25, 0x04	; 4
     51a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <_ZN18CANControllerClass9packetDlcEv>
     51e:	4a e0       	ldi	r20, 0x0A	; 10
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	bc 01       	movw	r22, r24
     524:	83 e2       	ldi	r24, 0x23	; 35
     526:	95 e0       	ldi	r25, 0x05	; 5
     528:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN5Print7printlnEii>
     52c:	21 c0       	rjmp	.+66     	; 0x570 <loop+0xe6>
		  } else {
		  Serial.print(" and length ");
     52e:	6f ef       	ldi	r22, 0xFF	; 255
     530:	73 e0       	ldi	r23, 0x03	; 3
     532:	83 e2       	ldi	r24, 0x23	; 35
     534:	95 e0       	ldi	r25, 0x05	; 5
     536:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <_ZN5Print5printEPKc>
		  Serial.println(packetSize);
     53a:	4a e0       	ldi	r20, 0x0A	; 10
     53c:	50 e0       	ldi	r21, 0x00	; 0
     53e:	be 01       	movw	r22, r28
     540:	83 e2       	ldi	r24, 0x23	; 35
     542:	95 e0       	ldi	r25, 0x05	; 5
     544:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN5Print7printlnEii>

		  // only print packet data for non-RTR packets
		  while (CAN.available()) {
     548:	80 ee       	ldi	r24, 0xE0	; 224
     54a:	94 e0       	ldi	r25, 0x04	; 4
     54c:	0e 94 10 03 	call	0x620	; 0x620 <_ZN18CANControllerClass9availableEv>
     550:	89 2b       	or	r24, r25
     552:	51 f0       	breq	.+20     	; 0x568 <loop+0xde>
			  Serial.print((char)CAN.read());
     554:	80 ee       	ldi	r24, 0xE0	; 224
     556:	94 e0       	ldi	r25, 0x04	; 4
     558:	0e 94 18 03 	call	0x630	; 0x630 <_ZN18CANControllerClass4readEv>
     55c:	68 2f       	mov	r22, r24
     55e:	83 e2       	ldi	r24, 0x23	; 35
     560:	95 e0       	ldi	r25, 0x05	; 5
     562:	0e 94 6d 0c 	call	0x18da	; 0x18da <_ZN5Print5printEc>
		  } else {
		  Serial.print(" and length ");
		  Serial.println(packetSize);

		  // only print packet data for non-RTR packets
		  while (CAN.available()) {
     566:	f0 cf       	rjmp	.-32     	; 0x548 <loop+0xbe>
			  Serial.print((char)CAN.read());
		  }
		  Serial.println();
     568:	83 e2       	ldi	r24, 0x23	; 35
     56a:	95 e0       	ldi	r25, 0x05	; 5
     56c:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN5Print7printlnEv>
	  }

	  Serial.println();
     570:	83 e2       	ldi	r24, 0x23	; 35
     572:	95 e0       	ldi	r25, 0x05	; 5
  }
}
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
			  Serial.print((char)CAN.read());
		  }
		  Serial.println();
	  }

	  Serial.println();
     578:	0c 94 74 0c 	jmp	0x18e8	; 0x18e8 <_ZN5Print7printlnEv>
  }
}
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	08 95       	ret

00000582 <_ZN5Print17availableForWriteEv>:
  _txLength = 0;

  memset(_txData, 0x00, sizeof(_txData));

  return 1;
}
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	08 95       	ret

00000588 <_ZN18CANControllerClass6filterEi>:
     588:	dc 01       	movw	r26, r24
     58a:	ed 91       	ld	r30, X+
     58c:	fc 91       	ld	r31, X
     58e:	02 8c       	ldd	r0, Z+26	; 0x1a
     590:	f3 8d       	ldd	r31, Z+27	; 0x1b
     592:	e0 2d       	mov	r30, r0
     594:	4f ef       	ldi	r20, 0xFF	; 255
     596:	57 e0       	ldi	r21, 0x07	; 7
     598:	09 94       	ijmp

0000059a <_ZN18CANControllerClass14filterExtendedEl>:
     59a:	0f 93       	push	r16
     59c:	1f 93       	push	r17
     59e:	dc 01       	movw	r26, r24
     5a0:	ed 91       	ld	r30, X+
     5a2:	fc 91       	ld	r31, X
     5a4:	06 8c       	ldd	r0, Z+30	; 0x1e
     5a6:	f7 8d       	ldd	r31, Z+31	; 0x1f
     5a8:	e0 2d       	mov	r30, r0
     5aa:	0f ef       	ldi	r16, 0xFF	; 255
     5ac:	1f ef       	ldi	r17, 0xFF	; 255
     5ae:	2f ef       	ldi	r18, 0xFF	; 255
     5b0:	3f e1       	ldi	r19, 0x1F	; 31
     5b2:	09 95       	icall
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	08 95       	ret

000005ba <_ZN18CANControllerClassD1Ev>:
     5ba:	08 95       	ret

000005bc <_ZN18CANControllerClass5beginEl>:
     5bc:	fc 01       	movw	r30, r24
     5be:	16 86       	std	Z+14, r1	; 0x0e
     5c0:	8f ef       	ldi	r24, 0xFF	; 255
     5c2:	9f ef       	ldi	r25, 0xFF	; 255
     5c4:	dc 01       	movw	r26, r24
     5c6:	87 87       	std	Z+15, r24	; 0x0f
     5c8:	90 8b       	std	Z+16, r25	; 0x10
     5ca:	a1 8b       	std	Z+17, r26	; 0x11
     5cc:	b2 8b       	std	Z+18, r27	; 0x12
     5ce:	14 8a       	std	Z+20, r1	; 0x14
     5d0:	16 8a       	std	Z+22, r1	; 0x16
     5d2:	15 8a       	std	Z+21, r1	; 0x15
     5d4:	10 8e       	std	Z+24, r1	; 0x18
     5d6:	17 8a       	std	Z+23, r1	; 0x17
     5d8:	81 a3       	std	Z+33, r24	; 0x21
     5da:	92 a3       	std	Z+34, r25	; 0x22
     5dc:	a3 a3       	std	Z+35, r26	; 0x23
     5de:	b4 a3       	std	Z+36, r27	; 0x24
     5e0:	16 a2       	std	Z+38, r1	; 0x26
     5e2:	10 a6       	std	Z+40, r1	; 0x28
     5e4:	17 a2       	std	Z+39, r1	; 0x27
     5e6:	12 a6       	std	Z+42, r1	; 0x2a
     5e8:	11 a6       	std	Z+41, r1	; 0x29
     5ea:	14 a6       	std	Z+44, r1	; 0x2c
     5ec:	13 a6       	std	Z+43, r1	; 0x2b
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	08 95       	ret

000005f4 <_ZN18CANControllerClass5writeEh>:
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	1f 92       	push	r1
     5fa:	cd b7       	in	r28, 0x3d	; 61
     5fc:	de b7       	in	r29, 0x3e	; 62
     5fe:	69 83       	std	Y+1, r22	; 0x01
     600:	dc 01       	movw	r26, r24
     602:	ed 91       	ld	r30, X+
     604:	fc 91       	ld	r31, X
     606:	02 80       	ldd	r0, Z+2	; 0x02
     608:	f3 81       	ldd	r31, Z+3	; 0x03
     60a:	e0 2d       	mov	r30, r0
     60c:	41 e0       	ldi	r20, 0x01	; 1
     60e:	50 e0       	ldi	r21, 0x00	; 0
     610:	be 01       	movw	r22, r28
     612:	6f 5f       	subi	r22, 0xFF	; 255
     614:	7f 4f       	sbci	r23, 0xFF	; 255
     616:	09 95       	icall
     618:	0f 90       	pop	r0
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	08 95       	ret

00000620 <_ZN18CANControllerClass9availableEv>:
     620:	fc 01       	movw	r30, r24
     622:	81 a5       	ldd	r24, Z+41	; 0x29
     624:	92 a5       	ldd	r25, Z+42	; 0x2a
     626:	23 a5       	ldd	r18, Z+43	; 0x2b
     628:	34 a5       	ldd	r19, Z+44	; 0x2c
     62a:	82 1b       	sub	r24, r18
     62c:	93 0b       	sbc	r25, r19
     62e:	08 95       	ret

00000630 <_ZN18CANControllerClass4readEv>:
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	ec 01       	movw	r28, r24
     636:	e8 81       	ld	r30, Y
     638:	f9 81       	ldd	r31, Y+1	; 0x01
     63a:	00 84       	ldd	r0, Z+8	; 0x08
     63c:	f1 85       	ldd	r31, Z+9	; 0x09
     63e:	e0 2d       	mov	r30, r0
     640:	09 95       	icall
     642:	89 2b       	or	r24, r25
     644:	61 f0       	breq	.+24     	; 0x65e <_ZN18CANControllerClass4readEv+0x2e>
     646:	8b a5       	ldd	r24, Y+43	; 0x2b
     648:	9c a5       	ldd	r25, Y+44	; 0x2c
     64a:	9c 01       	movw	r18, r24
     64c:	2f 5f       	subi	r18, 0xFF	; 255
     64e:	3f 4f       	sbci	r19, 0xFF	; 255
     650:	3c a7       	std	Y+44, r19	; 0x2c
     652:	2b a7       	std	Y+43, r18	; 0x2b
     654:	c8 0f       	add	r28, r24
     656:	d9 1f       	adc	r29, r25
     658:	8d a5       	ldd	r24, Y+45	; 0x2d
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	02 c0       	rjmp	.+4      	; 0x662 <_ZN18CANControllerClass4readEv+0x32>
     65e:	8f ef       	ldi	r24, 0xFF	; 255
     660:	9f ef       	ldi	r25, 0xFF	; 255
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	08 95       	ret

00000668 <_ZN18CANControllerClass4peekEv>:
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	ec 01       	movw	r28, r24
     66e:	e8 81       	ld	r30, Y
     670:	f9 81       	ldd	r31, Y+1	; 0x01
     672:	00 84       	ldd	r0, Z+8	; 0x08
     674:	f1 85       	ldd	r31, Z+9	; 0x09
     676:	e0 2d       	mov	r30, r0
     678:	09 95       	icall
     67a:	89 2b       	or	r24, r25
     67c:	39 f0       	breq	.+14     	; 0x68c <_ZN18CANControllerClass4peekEv+0x24>
     67e:	8b a5       	ldd	r24, Y+43	; 0x2b
     680:	9c a5       	ldd	r25, Y+44	; 0x2c
     682:	c8 0f       	add	r28, r24
     684:	d9 1f       	adc	r29, r25
     686:	8d a5       	ldd	r24, Y+45	; 0x2d
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	02 c0       	rjmp	.+4      	; 0x690 <_ZN18CANControllerClass4peekEv+0x28>
     68c:	8f ef       	ldi	r24, 0xFF	; 255
     68e:	9f ef       	ldi	r25, 0xFF	; 255
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <_ZN18CANControllerClass3endEv>:
     696:	08 95       	ret

00000698 <_ZN18CANControllerClass9onReceiveEPFviE>:
     698:	fc 01       	movw	r30, r24
     69a:	75 87       	std	Z+13, r23	; 0x0d
     69c:	64 87       	std	Z+12, r22	; 0x0c
     69e:	08 95       	ret

000006a0 <_ZN18CANControllerClass6filterEii>:
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	08 95       	ret

000006a6 <_ZN18CANControllerClass14filterExtendedEll>:
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	08 95       	ret

000006ac <_ZN18CANControllerClass11parsePacketEv>:
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	08 95       	ret

000006b2 <_ZN18CANControllerClassD0Ev>:
     6b2:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <_ZdlPv>

000006b6 <_ZN18CANControllerClass5writeEPKhj>:
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	fc 01       	movw	r30, r24
     6c0:	26 85       	ldd	r18, Z+14	; 0x0e
     6c2:	22 23       	and	r18, r18
     6c4:	e1 f0       	breq	.+56     	; 0x6fe <_ZN18CANControllerClass5writeEPKhj+0x48>
     6c6:	27 89       	ldd	r18, Z+23	; 0x17
     6c8:	30 8d       	ldd	r19, Z+24	; 0x18
     6ca:	e8 e0       	ldi	r30, 0x08	; 8
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	e2 1b       	sub	r30, r18
     6d0:	f3 0b       	sbc	r31, r19
     6d2:	ea 01       	movw	r28, r20
     6d4:	e4 17       	cp	r30, r20
     6d6:	f5 07       	cpc	r31, r21
     6d8:	08 f4       	brcc	.+2      	; 0x6dc <_ZN18CANControllerClass5writeEPKhj+0x26>
     6da:	ef 01       	movw	r28, r30
     6dc:	8c 01       	movw	r16, r24
     6de:	c9 01       	movw	r24, r18
     6e0:	49 96       	adiw	r24, 0x19	; 25
     6e2:	ae 01       	movw	r20, r28
     6e4:	80 0f       	add	r24, r16
     6e6:	91 1f       	adc	r25, r17
     6e8:	0e 94 af 10 	call	0x215e	; 0x215e <memcpy>
     6ec:	f8 01       	movw	r30, r16
     6ee:	87 89       	ldd	r24, Z+23	; 0x17
     6f0:	90 8d       	ldd	r25, Z+24	; 0x18
     6f2:	8c 0f       	add	r24, r28
     6f4:	9d 1f       	adc	r25, r29
     6f6:	90 8f       	std	Z+24, r25	; 0x18
     6f8:	87 8b       	std	Z+23, r24	; 0x17
     6fa:	ce 01       	movw	r24, r28
     6fc:	02 c0       	rjmp	.+4      	; 0x702 <_ZN18CANControllerClass5writeEPKhj+0x4c>
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	0f 91       	pop	r16
     70a:	08 95       	ret

0000070c <_ZN18CANControllerClass9endPacketEv>:
     70c:	fc 01       	movw	r30, r24
     70e:	86 85       	ldd	r24, Z+14	; 0x0e
     710:	88 23       	and	r24, r24
     712:	41 f0       	breq	.+16     	; 0x724 <_ZN18CANControllerClass9endPacketEv+0x18>
     714:	16 86       	std	Z+14, r1	; 0x0e
     716:	85 89       	ldd	r24, Z+21	; 0x15
     718:	96 89       	ldd	r25, Z+22	; 0x16
     71a:	97 fd       	sbrc	r25, 7
     71c:	06 c0       	rjmp	.+12     	; 0x72a <_ZN18CANControllerClass9endPacketEv+0x1e>
     71e:	90 8f       	std	Z+24, r25	; 0x18
     720:	87 8b       	std	Z+23, r24	; 0x17
     722:	03 c0       	rjmp	.+6      	; 0x72a <_ZN18CANControllerClass9endPacketEv+0x1e>
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	08 95       	ret
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	08 95       	ret

00000730 <_ZN18CANControllerClassC1Ev>:
     730:	fc 01       	movw	r30, r24
     732:	13 82       	std	Z+3, r1	; 0x03
     734:	12 82       	std	Z+2, r1	; 0x02
     736:	88 ee       	ldi	r24, 0xE8	; 232
     738:	93 e0       	ldi	r25, 0x03	; 3
     73a:	a0 e0       	ldi	r26, 0x00	; 0
     73c:	b0 e0       	ldi	r27, 0x00	; 0
     73e:	84 83       	std	Z+4, r24	; 0x04
     740:	95 83       	std	Z+5, r25	; 0x05
     742:	a6 83       	std	Z+6, r26	; 0x06
     744:	b7 83       	std	Z+7, r27	; 0x07
     746:	80 e1       	ldi	r24, 0x10	; 16
     748:	94 e0       	ldi	r25, 0x04	; 4
     74a:	91 83       	std	Z+1, r25	; 0x01
     74c:	80 83       	st	Z, r24
     74e:	15 86       	std	Z+13, r1	; 0x0d
     750:	14 86       	std	Z+12, r1	; 0x0c
     752:	16 86       	std	Z+14, r1	; 0x0e
     754:	8f ef       	ldi	r24, 0xFF	; 255
     756:	9f ef       	ldi	r25, 0xFF	; 255
     758:	dc 01       	movw	r26, r24
     75a:	87 87       	std	Z+15, r24	; 0x0f
     75c:	90 8b       	std	Z+16, r25	; 0x10
     75e:	a1 8b       	std	Z+17, r26	; 0x11
     760:	b2 8b       	std	Z+18, r27	; 0x12
     762:	21 e0       	ldi	r18, 0x01	; 1
     764:	23 8b       	std	Z+19, r18	; 0x13
     766:	14 8a       	std	Z+20, r1	; 0x14
     768:	16 8a       	std	Z+22, r1	; 0x16
     76a:	15 8a       	std	Z+21, r1	; 0x15
     76c:	10 8e       	std	Z+24, r1	; 0x18
     76e:	17 8a       	std	Z+23, r1	; 0x17
     770:	81 a3       	std	Z+33, r24	; 0x21
     772:	92 a3       	std	Z+34, r25	; 0x22
     774:	a3 a3       	std	Z+35, r26	; 0x23
     776:	b4 a3       	std	Z+36, r27	; 0x24
     778:	15 a2       	std	Z+37, r1	; 0x25
     77a:	16 a2       	std	Z+38, r1	; 0x26
     77c:	10 a6       	std	Z+40, r1	; 0x28
     77e:	17 a2       	std	Z+39, r1	; 0x27
     780:	12 a6       	std	Z+42, r1	; 0x2a
     782:	11 a6       	std	Z+41, r1	; 0x29
     784:	14 a6       	std	Z+44, r1	; 0x2c
     786:	13 a6       	std	Z+43, r1	; 0x2b
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	50 e0       	ldi	r21, 0x00	; 0
     78c:	ba 01       	movw	r22, r20
     78e:	cf 01       	movw	r24, r30
     790:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <_ZN6Stream10setTimeoutEm>

00000794 <_ZN18CANControllerClass19beginExtendedPacketElib>:

int CANControllerClass::beginExtendedPacket(long id, int dlc, bool rtr)
{
     794:	0f 93       	push	r16
     796:	fc 01       	movw	r30, r24
  if (id < 0 || id > 0x1FFFFFFF) {
     798:	41 15       	cp	r20, r1
     79a:	51 05       	cpc	r21, r1
     79c:	61 05       	cpc	r22, r1
     79e:	80 e2       	ldi	r24, 0x20	; 32
     7a0:	78 07       	cpc	r23, r24
     7a2:	c0 f4       	brcc	.+48     	; 0x7d4 <_ZN18CANControllerClass19beginExtendedPacketElib+0x40>
    return 0;
  }

  if (dlc > 8) {
     7a4:	29 30       	cpi	r18, 0x09	; 9
     7a6:	31 05       	cpc	r19, r1
     7a8:	ac f4       	brge	.+42     	; 0x7d4 <_ZN18CANControllerClass19beginExtendedPacketElib+0x40>
    return 0;
  }

  _packetBegun = true;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	86 87       	std	Z+14, r24	; 0x0e
  _txId = id;
     7ae:	47 87       	std	Z+15, r20	; 0x0f
     7b0:	50 8b       	std	Z+16, r21	; 0x10
     7b2:	61 8b       	std	Z+17, r22	; 0x11
     7b4:	72 8b       	std	Z+18, r23	; 0x12
  _txExtended = true;
     7b6:	83 8b       	std	Z+19, r24	; 0x13
  _txRtr = rtr;
     7b8:	04 8b       	std	Z+20, r16	; 0x14
  _txDlc = dlc;
     7ba:	36 8b       	std	Z+22, r19	; 0x16
     7bc:	25 8b       	std	Z+21, r18	; 0x15
  _txLength = 0;
     7be:	10 8e       	std	Z+24, r1	; 0x18
     7c0:	17 8a       	std	Z+23, r1	; 0x17

  memset(_txData, 0x00, sizeof(_txData));
     7c2:	79 96       	adiw	r30, 0x19	; 25
     7c4:	88 e0       	ldi	r24, 0x08	; 8
     7c6:	df 01       	movw	r26, r30
     7c8:	1d 92       	st	X+, r1
     7ca:	8a 95       	dec	r24
     7cc:	e9 f7       	brne	.-6      	; 0x7c8 <_ZN18CANControllerClass19beginExtendedPacketElib+0x34>

  return 1;
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <_ZN18CANControllerClass19beginExtendedPacketElib+0x44>
}

int CANControllerClass::beginExtendedPacket(long id, int dlc, bool rtr)
{
  if (id < 0 || id > 0x1FFFFFFF) {
    return 0;
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	90 e0       	ldi	r25, 0x00	; 0
  _txLength = 0;

  memset(_txData, 0x00, sizeof(_txData));

  return 1;
}
     7d8:	0f 91       	pop	r16
     7da:	08 95       	ret

000007dc <_ZN18CANControllerClass8packetIdEv>:
  return 0;
}

long CANControllerClass::packetId()
{
  return _rxId;
     7dc:	fc 01       	movw	r30, r24
     7de:	61 a1       	ldd	r22, Z+33	; 0x21
     7e0:	72 a1       	ldd	r23, Z+34	; 0x22
     7e2:	83 a1       	ldd	r24, Z+35	; 0x23
     7e4:	94 a1       	ldd	r25, Z+36	; 0x24
}
     7e6:	08 95       	ret

000007e8 <_ZN18CANControllerClass14packetExtendedEv>:

bool CANControllerClass::packetExtended()
{
  return _rxExtended;
}
     7e8:	fc 01       	movw	r30, r24
     7ea:	85 a1       	ldd	r24, Z+37	; 0x25
     7ec:	08 95       	ret

000007ee <_ZN18CANControllerClass9packetRtrEv>:

bool CANControllerClass::packetRtr()
{
  return _rxRtr;
}
     7ee:	fc 01       	movw	r30, r24
     7f0:	86 a1       	ldd	r24, Z+38	; 0x26
     7f2:	08 95       	ret

000007f4 <_ZN18CANControllerClass9packetDlcEv>:

int CANControllerClass::packetDlc()
{
  return _rxDlc;
}
     7f4:	fc 01       	movw	r30, r24
     7f6:	87 a1       	ldd	r24, Z+39	; 0x27
     7f8:	90 a5       	ldd	r25, Z+40	; 0x28
     7fa:	08 95       	ret

000007fc <_ZN12MCP2515ClassD1Ev>:
    if (b < 16) {
      out.print('0');
    }
    out.println(b, HEX);
  }
}
     7fc:	20 e4       	ldi	r18, 0x40	; 64
     7fe:	34 e0       	ldi	r19, 0x04	; 4
     800:	fc 01       	movw	r30, r24
     802:	31 83       	std	Z+1, r19	; 0x01
     804:	20 83       	st	Z, r18
     806:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <_ZN18CANControllerClassD1Ev>

0000080a <_ZN12MCP2515ClassD0Ev>:
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	ec 01       	movw	r28, r24
     810:	0e 94 fe 03 	call	0x7fc	; 0x7fc <_ZN12MCP2515ClassD1Ev>
     814:	ce 01       	movw	r24, r28
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <_ZdlPv>

0000081e <_ZN8SPIClass16beginTransactionE11SPISettings>:
     81e:	20 91 21 05 	lds	r18, 0x0521	; 0x800521 <_ZN8SPIClass13interruptModeE>
     822:	22 23       	and	r18, r18
     824:	99 f0       	breq	.+38     	; 0x84c <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     826:	4f b7       	in	r20, 0x3f	; 63
     828:	f8 94       	cli
     82a:	20 91 21 05 	lds	r18, 0x0521	; 0x800521 <_ZN8SPIClass13interruptModeE>
     82e:	21 30       	cpi	r18, 0x01	; 1
     830:	59 f4       	brne	.+22     	; 0x848 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
     832:	2d b3       	in	r18, 0x1d	; 29
     834:	20 93 1f 05 	sts	0x051F, r18	; 0x80051f <_ZN8SPIClass13interruptSaveE>
     838:	3d b3       	in	r19, 0x1d	; 29
     83a:	20 91 20 05 	lds	r18, 0x0520	; 0x800520 <_ZN8SPIClass13interruptMaskE>
     83e:	20 95       	com	r18
     840:	23 23       	and	r18, r19
     842:	2d bb       	out	0x1d, r18	; 29
     844:	4f bf       	out	0x3f, r20	; 63
     846:	02 c0       	rjmp	.+4      	; 0x84c <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     848:	40 93 1f 05 	sts	0x051F, r20	; 0x80051f <_ZN8SPIClass13interruptSaveE>
     84c:	8c bd       	out	0x2c, r24	; 44
     84e:	9d bd       	out	0x2d, r25	; 45
     850:	08 95       	ret

00000852 <_ZN8SPIClass8transferEh>:
     852:	8e bd       	out	0x2e, r24	; 46
     854:	00 00       	nop
     856:	0d b4       	in	r0, 0x2d	; 45
     858:	07 fe       	sbrs	r0, 7
     85a:	fd cf       	rjmp	.-6      	; 0x856 <_ZN8SPIClass8transferEh+0x4>
     85c:	8e b5       	in	r24, 0x2e	; 46
     85e:	08 95       	ret

00000860 <_ZN8SPIClass14endTransactionEv>:
     860:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <_ZN8SPIClass13interruptModeE>
     864:	88 23       	and	r24, r24
     866:	61 f0       	breq	.+24     	; 0x880 <_ZN8SPIClass14endTransactionEv+0x20>
     868:	9f b7       	in	r25, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	20 91 21 05 	lds	r18, 0x0521	; 0x800521 <_ZN8SPIClass13interruptModeE>
     870:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <_ZN8SPIClass13interruptSaveE>
     874:	21 30       	cpi	r18, 0x01	; 1
     876:	19 f4       	brne	.+6      	; 0x87e <_ZN8SPIClass14endTransactionEv+0x1e>
     878:	8d bb       	out	0x1d, r24	; 29
     87a:	9f bf       	out	0x3f, r25	; 63
     87c:	08 95       	ret
     87e:	8f bf       	out	0x3f, r24	; 63
     880:	08 95       	ret

00000882 <_ZN12MCP2515ClassC1Ev>:
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	ec 01       	movw	r28, r24
     888:	0e 94 98 03 	call	0x730	; 0x730 <_ZN18CANControllerClassC1Ev>
     88c:	80 e4       	ldi	r24, 0x40	; 64
     88e:	94 e0       	ldi	r25, 0x04	; 4
     890:	99 83       	std	Y+1, r25	; 0x01
     892:	88 83       	st	Y, r24
     894:	80 e5       	ldi	r24, 0x50	; 80
     896:	8d ab       	std	Y+53, r24	; 0x35
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	8e ab       	std	Y+54, r24	; 0x36
     89c:	8a e0       	ldi	r24, 0x0A	; 10
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	98 af       	std	Y+56, r25	; 0x38
     8a2:	8f ab       	std	Y+55, r24	; 0x37
     8a4:	82 e0       	ldi	r24, 0x02	; 2
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	9a af       	std	Y+58, r25	; 0x3a
     8aa:	89 af       	std	Y+57, r24	; 0x39
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	94 e2       	ldi	r25, 0x24	; 36
     8b0:	a4 ef       	ldi	r26, 0xF4	; 244
     8b2:	b0 e0       	ldi	r27, 0x00	; 0
     8b4:	8b af       	std	Y+59, r24	; 0x3b
     8b6:	9c af       	std	Y+60, r25	; 0x3c
     8b8:	ad af       	std	Y+61, r26	; 0x3d
     8ba:	be af       	std	Y+62, r27	; 0x3e
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	08 95       	ret

000008c2 <_ZN12MCP2515Class5resetEv>:
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	ec 01       	movw	r28, r24
     8c8:	8d a9       	ldd	r24, Y+53	; 0x35
     8ca:	9e a9       	ldd	r25, Y+54	; 0x36
     8cc:	0e 94 0f 04 	call	0x81e	; 0x81e <_ZN8SPIClass16beginTransactionE11SPISettings>
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	8f a9       	ldd	r24, Y+55	; 0x37
     8d4:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <digitalWrite>
     8d8:	80 ec       	ldi	r24, 0xC0	; 192
     8da:	0e 94 29 04 	call	0x852	; 0x852 <_ZN8SPIClass8transferEh>
     8de:	61 e0       	ldi	r22, 0x01	; 1
     8e0:	8f a9       	ldd	r24, Y+55	; 0x37
     8e2:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <digitalWrite>
     8e6:	0e 94 30 04 	call	0x860	; 0x860 <_ZN8SPIClass14endTransactionEv>
     8ea:	8a e0       	ldi	r24, 0x0A	; 10
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <delayMicroseconds>

000008f6 <_ZN12MCP2515Class12readRegisterEh>:
     8f6:	1f 93       	push	r17
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	ec 01       	movw	r28, r24
     8fe:	16 2f       	mov	r17, r22
     900:	8d a9       	ldd	r24, Y+53	; 0x35
     902:	9e a9       	ldd	r25, Y+54	; 0x36
     904:	0e 94 0f 04 	call	0x81e	; 0x81e <_ZN8SPIClass16beginTransactionE11SPISettings>
     908:	60 e0       	ldi	r22, 0x00	; 0
     90a:	8f a9       	ldd	r24, Y+55	; 0x37
     90c:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <digitalWrite>
     910:	83 e0       	ldi	r24, 0x03	; 3
     912:	0e 94 29 04 	call	0x852	; 0x852 <_ZN8SPIClass8transferEh>
     916:	81 2f       	mov	r24, r17
     918:	0e 94 29 04 	call	0x852	; 0x852 <_ZN8SPIClass8transferEh>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	0e 94 29 04 	call	0x852	; 0x852 <_ZN8SPIClass8transferEh>
     922:	18 2f       	mov	r17, r24
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	8f a9       	ldd	r24, Y+55	; 0x37
     928:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <digitalWrite>
     92c:	0e 94 30 04 	call	0x860	; 0x860 <_ZN8SPIClass14endTransactionEv>
     930:	81 2f       	mov	r24, r17
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	1f 91       	pop	r17
     938:	08 95       	ret

0000093a <_ZN12MCP2515Class15handleInterruptEv>:

  delayMicroseconds(10);
}

void MCP2515Class::handleInterrupt()
{
     93a:	0f 93       	push	r16
     93c:	1f 93       	push	r17
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	ec 01       	movw	r28, r24
  if (readRegister(REG_CANINTF) == 0) {
     944:	6c e2       	ldi	r22, 0x2C	; 44
     946:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12MCP2515Class12readRegisterEh>
     94a:	88 23       	and	r24, r24
     94c:	a9 f0       	breq	.+42     	; 0x978 <_ZN12MCP2515Class15handleInterruptEv+0x3e>
    return;
  }

  while (parsePacket()) {
     94e:	e8 81       	ld	r30, Y
     950:	f9 81       	ldd	r31, Y+1	; 0x01
     952:	04 88       	ldd	r0, Z+20	; 0x14
     954:	f5 89       	ldd	r31, Z+21	; 0x15
     956:	e0 2d       	mov	r30, r0
     958:	ce 01       	movw	r24, r28
     95a:	09 95       	icall
     95c:	89 2b       	or	r24, r25
     95e:	61 f0       	breq	.+24     	; 0x978 <_ZN12MCP2515Class15handleInterruptEv+0x3e>
    _onReceive(available());
     960:	0c 85       	ldd	r16, Y+12	; 0x0c
     962:	1d 85       	ldd	r17, Y+13	; 0x0d
     964:	e8 81       	ld	r30, Y
     966:	f9 81       	ldd	r31, Y+1	; 0x01
     968:	00 84       	ldd	r0, Z+8	; 0x08
     96a:	f1 85       	ldd	r31, Z+9	; 0x09
     96c:	e0 2d       	mov	r30, r0
     96e:	ce 01       	movw	r24, r28
     970:	09 95       	icall
     972:	f8 01       	movw	r30, r16
     974:	09 95       	icall
     976:	eb cf       	rjmp	.-42     	; 0x94e <_ZN12MCP2515Class15handleInterruptEv+0x14>
  }
}
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	08 95       	ret

00000982 <_ZN12MCP2515Class11onInterruptEv>:
  SPI.endTransaction();
}

void MCP2515Class::onInterrupt()
{
  CAN.handleInterrupt();
     982:	80 ee       	ldi	r24, 0xE0	; 224
     984:	94 e0       	ldi	r25, 0x04	; 4
     986:	0c 94 9d 04 	jmp	0x93a	; 0x93a <_ZN12MCP2515Class15handleInterruptEv>

0000098a <_ZN12MCP2515Class14modifyRegisterEhhh>:

  return value;
}

void MCP2515Class::modifyRegister(uint8_t address, uint8_t mask, uint8_t value)
{
     98a:	ff 92       	push	r15
     98c:	0f 93       	push	r16
     98e:	1f 93       	push	r17
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	ec 01       	movw	r28, r24
     996:	f6 2e       	mov	r15, r22
     998:	04 2f       	mov	r16, r20
     99a:	12 2f       	mov	r17, r18
  SPI.beginTransaction(_spiSettings);
     99c:	8d a9       	ldd	r24, Y+53	; 0x35
     99e:	9e a9       	ldd	r25, Y+54	; 0x36
     9a0:	0e 94 0f 04 	call	0x81e	; 0x81e <_ZN8SPIClass16beginTransactionE11SPISettings>
  digitalWrite(_csPin, LOW);
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	8f a9       	ldd	r24, Y+55	; 0x37
     9a8:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <digitalWrite>
  SPI.transfer(0x05);
     9ac:	85 e0       	ldi	r24, 0x05	; 5
     9ae:	0e 94 29 04 	call	0x852	; 0x852 <_ZN8SPIClass8transferEh>
  SPI.transfer(address);
     9b2:	8f 2d       	mov	r24, r15
     9b4:	0e 94 29 04 	call	0x852	; 0x852 <_ZN8SPIClass8transferEh>
  SPI.transfer(mask);
     9b8:	80 2f       	mov	r24, r16
     9ba:	0e 94 29 04 	call	0x852	; 0x852 <_ZN8SPIClass8transferEh>
  SPI.transfer(value);
     9be:	81 2f       	mov	r24, r17
     9c0:	0e 94 29 04 	call	0x852	; 0x852 <_ZN8SPIClass8transferEh>
  digitalWrite(_csPin, HIGH);
     9c4:	61 e0       	ldi	r22, 0x01	; 1
     9c6:	8f a9       	ldd	r24, Y+55	; 0x37
     9c8:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <digitalWrite>
  SPI.endTransaction();
}
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	ff 90       	pop	r15
  SPI.transfer(0x05);
  SPI.transfer(address);
  SPI.transfer(mask);
  SPI.transfer(value);
  digitalWrite(_csPin, HIGH);
  SPI.endTransaction();
     9d6:	0c 94 30 04 	jmp	0x860	; 0x860 <_ZN8SPIClass14endTransactionEv>

000009da <_ZN12MCP2515Class11parsePacketEv>:

  return (readRegister(REG_TXBnCTRL(n)) & 0x70) ? 0 : 1;
}

int MCP2515Class::parsePacket()
{
     9da:	9f 92       	push	r9
     9dc:	af 92       	push	r10
     9de:	bf 92       	push	r11
     9e0:	cf 92       	push	r12
     9e2:	df 92       	push	r13
     9e4:	ef 92       	push	r14
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	ec 01       	movw	r28, r24
  int n;

  uint8_t intf = readRegister(REG_CANINTF);
     9f2:	6c e2       	ldi	r22, 0x2C	; 44
     9f4:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12MCP2515Class12readRegisterEh>

  if (intf & FLAG_RXnIF(0)) {
     9f8:	80 fd       	sbrc	r24, 0
     9fa:	10 c0       	rjmp	.+32     	; 0xa1c <_ZN12MCP2515Class11parsePacketEv+0x42>
    n = 0;
  } else if (intf & FLAG_RXnIF(1)) {
     9fc:	81 fd       	sbrc	r24, 1
     9fe:	10 c0       	rjmp	.+32     	; 0xa20 <_ZN12MCP2515Class11parsePacketEv+0x46>
    n = 1;
  } else {
    _rxId = -1;
     a00:	8f ef       	ldi	r24, 0xFF	; 255
     a02:	9f ef       	ldi	r25, 0xFF	; 255
     a04:	dc 01       	movw	r26, r24
     a06:	89 a3       	std	Y+33, r24	; 0x21
     a08:	9a a3       	std	Y+34, r25	; 0x22
     a0a:	ab a3       	std	Y+35, r26	; 0x23
     a0c:	bc a3       	std	Y+36, r27	; 0x24
    _rxExtended = false;
     a0e:	1d a2       	std	Y+37, r1	; 0x25
    _rxRtr = false;
     a10:	1e a2       	std	Y+38, r1	; 0x26
    _rxLength = 0;
     a12:	1a a6       	std	Y+42, r1	; 0x2a
     a14:	19 a6       	std	Y+41, r1	; 0x29
    return 0;
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	a0 c0       	rjmp	.+320    	; 0xb5c <_ZN12MCP2515Class11parsePacketEv+0x182>
  int n;

  uint8_t intf = readRegister(REG_CANINTF);

  if (intf & FLAG_RXnIF(0)) {
    n = 0;
     a1c:	00 e0       	ldi	r16, 0x00	; 0
     a1e:	01 c0       	rjmp	.+2      	; 0xa22 <_ZN12MCP2515Class11parsePacketEv+0x48>
  } else if (intf & FLAG_RXnIF(1)) {
    n = 1;
     a20:	01 e0       	ldi	r16, 0x01	; 1
    _rxRtr = false;
    _rxLength = 0;
    return 0;
  }

  _rxExtended = (readRegister(REG_RXBnSIDL(n)) & FLAG_IDE) ? true : false;
     a22:	10 2f       	mov	r17, r16
     a24:	12 95       	swap	r17
     a26:	10 7f       	andi	r17, 0xF0	; 240
     a28:	42 e6       	ldi	r20, 0x62	; 98
     a2a:	a4 2e       	mov	r10, r20
     a2c:	a1 0e       	add	r10, r17
     a2e:	6a 2d       	mov	r22, r10
     a30:	ce 01       	movw	r24, r28
     a32:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12MCP2515Class12readRegisterEh>
     a36:	83 fb       	bst	r24, 3
     a38:	88 27       	eor	r24, r24
     a3a:	80 f9       	bld	r24, 0
     a3c:	8d a3       	std	Y+37, r24	; 0x25

  uint32_t idA = ((readRegister(REG_RXBnSIDH(n)) << 3) & 0x07f8) | ((readRegister(REG_RXBnSIDL(n)) >> 5) & 0x07);
     a3e:	61 e6       	ldi	r22, 0x61	; 97
     a40:	61 0f       	add	r22, r17
     a42:	ce 01       	movw	r24, r28
     a44:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12MCP2515Class12readRegisterEh>
     a48:	c8 2e       	mov	r12, r24
     a4a:	6a 2d       	mov	r22, r10
     a4c:	ce 01       	movw	r24, r28
     a4e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12MCP2515Class12readRegisterEh>
     a52:	98 e0       	ldi	r25, 0x08	; 8
     a54:	c9 9e       	mul	r12, r25
     a56:	60 01       	movw	r12, r0
     a58:	11 24       	eor	r1, r1
     a5a:	82 95       	swap	r24
     a5c:	86 95       	lsr	r24
     a5e:	87 70       	andi	r24, 0x07	; 7
     a60:	c8 2a       	or	r12, r24
  if (_rxExtended) {
     a62:	8d a1       	ldd	r24, Y+37	; 0x25
     a64:	0d 2c       	mov	r0, r13
     a66:	00 0c       	add	r0, r0
     a68:	ee 08       	sbc	r14, r14
     a6a:	ff 08       	sbc	r15, r15
     a6c:	55 e6       	ldi	r21, 0x65	; 101
     a6e:	b5 2e       	mov	r11, r21
     a70:	b1 0e       	add	r11, r17
     a72:	88 23       	and	r24, r24
     a74:	89 f1       	breq	.+98     	; 0xad8 <_ZN12MCP2515Class11parsePacketEv+0xfe>
    uint32_t idB = (((uint32_t)(readRegister(REG_RXBnSIDL(n)) & 0x03) << 16) & 0x30000) | ((readRegister(REG_RXBnEID8(n)) << 8) & 0xff00) | readRegister(REG_RXBnEID0(n));
     a76:	6a 2d       	mov	r22, r10
     a78:	ce 01       	movw	r24, r28
     a7a:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12MCP2515Class12readRegisterEh>
     a7e:	98 2e       	mov	r9, r24
     a80:	63 e6       	ldi	r22, 0x63	; 99
     a82:	61 0f       	add	r22, r17
     a84:	ce 01       	movw	r24, r28
     a86:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12MCP2515Class12readRegisterEh>
     a8a:	a8 2e       	mov	r10, r24
     a8c:	64 e6       	ldi	r22, 0x64	; 100
     a8e:	61 0f       	add	r22, r17
     a90:	ce 01       	movw	r24, r28
     a92:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12MCP2515Class12readRegisterEh>

    _rxId = (idA << 18) | idB;
     a96:	99 2d       	mov	r25, r9
     a98:	93 70       	andi	r25, 0x03	; 3
     a9a:	22 e1       	ldi	r18, 0x12	; 18
     a9c:	cc 0c       	add	r12, r12
     a9e:	dd 1c       	adc	r13, r13
     aa0:	ee 1c       	adc	r14, r14
     aa2:	ff 1c       	adc	r15, r15
     aa4:	2a 95       	dec	r18
     aa6:	d1 f7       	brne	.-12     	; 0xa9c <_ZN12MCP2515Class11parsePacketEv+0xc2>
     aa8:	c8 2a       	or	r12, r24
     aaa:	e9 2a       	or	r14, r25
     aac:	8a 2d       	mov	r24, r10
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	98 2f       	mov	r25, r24
     ab2:	88 27       	eor	r24, r24
     ab4:	a0 e0       	ldi	r26, 0x00	; 0
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	c8 2a       	or	r12, r24
     aba:	d9 2a       	or	r13, r25
     abc:	ea 2a       	or	r14, r26
     abe:	fb 2a       	or	r15, r27
     ac0:	c9 a2       	std	Y+33, r12	; 0x21
     ac2:	da a2       	std	Y+34, r13	; 0x22
     ac4:	eb a2       	std	Y+35, r14	; 0x23
     ac6:	fc a2       	std	Y+36, r15	; 0x24
    _rxRtr = (readRegister(REG_RXBnDLC(n)) & FLAG_RTR) ? true : false;
     ac8:	6b 2d       	mov	r22, r11
     aca:	ce 01       	movw	r24, r28
     acc:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12MCP2515Class12readRegisterEh>
     ad0:	86 fb       	bst	r24, 6
     ad2:	88 27       	eor	r24, r24
     ad4:	80 f9       	bld	r24, 0
     ad6:	0a c0       	rjmp	.+20     	; 0xaec <_ZN12MCP2515Class11parsePacketEv+0x112>
  } else {
    _rxId = idA;
     ad8:	c9 a2       	std	Y+33, r12	; 0x21
     ada:	da a2       	std	Y+34, r13	; 0x22
     adc:	eb a2       	std	Y+35, r14	; 0x23
     ade:	fc a2       	std	Y+36, r15	; 0x24
    _rxRtr = (readRegister(REG_RXBnSIDL(n)) & FLAG_SRR) ? true : false;
     ae0:	6a 2d       	mov	r22, r10
     ae2:	ce 01       	movw	r24, r28
     ae4:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12MCP2515Class12readRegisterEh>
     ae8:	82 95       	swap	r24
     aea:	81 70       	andi	r24, 0x01	; 1
     aec:	8e a3       	std	Y+38, r24	; 0x26
  }
  _rxDlc = readRegister(REG_RXBnDLC(n)) & 0x0f;
     aee:	6b 2d       	mov	r22, r11
     af0:	ce 01       	movw	r24, r28
     af2:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12MCP2515Class12readRegisterEh>
     af6:	8f 70       	andi	r24, 0x0F	; 15
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	98 a7       	std	Y+40, r25	; 0x28
     afc:	8f a3       	std	Y+39, r24	; 0x27
  _rxIndex = 0;
     afe:	1c a6       	std	Y+44, r1	; 0x2c
     b00:	1b a6       	std	Y+43, r1	; 0x2b

  if (_rxRtr) {
     b02:	2e a1       	ldd	r18, Y+38	; 0x26
     b04:	22 23       	and	r18, r18
     b06:	19 f0       	breq	.+6      	; 0xb0e <_ZN12MCP2515Class11parsePacketEv+0x134>
    _rxLength = 0;
     b08:	1a a6       	std	Y+42, r1	; 0x2a
     b0a:	19 a6       	std	Y+41, r1	; 0x29
     b0c:	1a c0       	rjmp	.+52     	; 0xb42 <_ZN12MCP2515Class11parsePacketEv+0x168>
  } else {
    _rxLength = _rxDlc;
     b0e:	9a a7       	std	Y+42, r25	; 0x2a
     b10:	89 a7       	std	Y+41, r24	; 0x29
     b12:	1a 59       	subi	r17, 0x9A	; 154
     b14:	6e 01       	movw	r12, r28
     b16:	ed e2       	ldi	r30, 0x2D	; 45
     b18:	ce 0e       	add	r12, r30
     b1a:	d1 1c       	adc	r13, r1

    for (int i = 0; i < _rxLength; i++) {
     b1c:	e1 2c       	mov	r14, r1
     b1e:	f1 2c       	mov	r15, r1
     b20:	89 a5       	ldd	r24, Y+41	; 0x29
     b22:	9a a5       	ldd	r25, Y+42	; 0x2a
     b24:	e8 16       	cp	r14, r24
     b26:	f9 06       	cpc	r15, r25
     b28:	64 f4       	brge	.+24     	; 0xb42 <_ZN12MCP2515Class11parsePacketEv+0x168>
      _rxData[i] = readRegister(REG_RXBnD0(n) + i);
     b2a:	61 2f       	mov	r22, r17
     b2c:	ce 01       	movw	r24, r28
     b2e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12MCP2515Class12readRegisterEh>
     b32:	f6 01       	movw	r30, r12
     b34:	81 93       	st	Z+, r24
     b36:	6f 01       	movw	r12, r30
  if (_rxRtr) {
    _rxLength = 0;
  } else {
    _rxLength = _rxDlc;

    for (int i = 0; i < _rxLength; i++) {
     b38:	ff ef       	ldi	r31, 0xFF	; 255
     b3a:	ef 1a       	sub	r14, r31
     b3c:	ff 0a       	sbc	r15, r31
     b3e:	1f 5f       	subi	r17, 0xFF	; 255
     b40:	ef cf       	rjmp	.-34     	; 0xb20 <_ZN12MCP2515Class11parsePacketEv+0x146>
      _rxData[i] = readRegister(REG_RXBnD0(n) + i);
    }
  }

  modifyRegister(REG_CANINTF, FLAG_RXnIF(n), 0x00);
     b42:	41 e0       	ldi	r20, 0x01	; 1
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	01 c0       	rjmp	.+2      	; 0xb4a <_ZN12MCP2515Class11parsePacketEv+0x170>
     b48:	44 0f       	add	r20, r20
     b4a:	0a 95       	dec	r16
     b4c:	ea f7       	brpl	.-6      	; 0xb48 <_ZN12MCP2515Class11parsePacketEv+0x16e>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	6c e2       	ldi	r22, 0x2C	; 44
     b52:	ce 01       	movw	r24, r28
     b54:	0e 94 c5 04 	call	0x98a	; 0x98a <_ZN12MCP2515Class14modifyRegisterEhhh>

  return _rxDlc;
     b58:	8f a1       	ldd	r24, Y+39	; 0x27
     b5a:	98 a5       	ldd	r25, Y+40	; 0x28
}
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	ff 90       	pop	r15
     b66:	ef 90       	pop	r14
     b68:	df 90       	pop	r13
     b6a:	cf 90       	pop	r12
     b6c:	bf 90       	pop	r11
     b6e:	af 90       	pop	r10
     b70:	9f 90       	pop	r9
     b72:	08 95       	ret

00000b74 <_ZN12MCP2515Class13writeRegisterEhh>:
  digitalWrite(_csPin, HIGH);
  SPI.endTransaction();
}

void MCP2515Class::writeRegister(uint8_t address, uint8_t value)
{
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	ec 01       	movw	r28, r24
     b7e:	06 2f       	mov	r16, r22
     b80:	14 2f       	mov	r17, r20
  SPI.beginTransaction(_spiSettings);
     b82:	8d a9       	ldd	r24, Y+53	; 0x35
     b84:	9e a9       	ldd	r25, Y+54	; 0x36
     b86:	0e 94 0f 04 	call	0x81e	; 0x81e <_ZN8SPIClass16beginTransactionE11SPISettings>
  digitalWrite(_csPin, LOW);
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	8f a9       	ldd	r24, Y+55	; 0x37
     b8e:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <digitalWrite>
  SPI.transfer(0x02);
     b92:	82 e0       	ldi	r24, 0x02	; 2
     b94:	0e 94 29 04 	call	0x852	; 0x852 <_ZN8SPIClass8transferEh>
  SPI.transfer(address);
     b98:	80 2f       	mov	r24, r16
     b9a:	0e 94 29 04 	call	0x852	; 0x852 <_ZN8SPIClass8transferEh>
  SPI.transfer(value);
     b9e:	81 2f       	mov	r24, r17
     ba0:	0e 94 29 04 	call	0x852	; 0x852 <_ZN8SPIClass8transferEh>
  digitalWrite(_csPin, HIGH);
     ba4:	61 e0       	ldi	r22, 0x01	; 1
     ba6:	8f a9       	ldd	r24, Y+55	; 0x37
     ba8:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <digitalWrite>
  SPI.endTransaction();
}
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
  digitalWrite(_csPin, LOW);
  SPI.transfer(0x02);
  SPI.transfer(address);
  SPI.transfer(value);
  digitalWrite(_csPin, HIGH);
  SPI.endTransaction();
     bb4:	0c 94 30 04 	jmp	0x860	; 0x860 <_ZN8SPIClass14endTransactionEv>

00000bb8 <_ZN12MCP2515Class6filterEii>:
#endif
  }
}

int MCP2515Class::filter(int id, int mask)
{
     bb8:	cf 92       	push	r12
     bba:	df 92       	push	r13
     bbc:	ef 92       	push	r14
     bbe:	ff 92       	push	r15
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	ec 01       	movw	r28, r24
     bca:	7b 01       	movw	r14, r22
     bcc:	8a 01       	movw	r16, r20
  id &= 0x7ff;
  mask &= 0x7ff;

  // config mode
  writeRegister(REG_CANCTRL, 0x80);
     bce:	40 e8       	ldi	r20, 0x80	; 128
     bd0:	6f e0       	ldi	r22, 0x0F	; 15
     bd2:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x80) {
     bd6:	6f e0       	ldi	r22, 0x0F	; 15
     bd8:	ce 01       	movw	r24, r28
     bda:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12MCP2515Class12readRegisterEh>
     bde:	80 38       	cpi	r24, 0x80	; 128
     be0:	09 f0       	breq	.+2      	; 0xbe4 <_ZN12MCP2515Class6filterEii+0x2c>
     be2:	7d c0       	rjmp	.+250    	; 0xcde <_ZN12MCP2515Class6filterEii+0x126>
  }
}

int MCP2515Class::filter(int id, int mask)
{
  id &= 0x7ff;
     be4:	87 e0       	ldi	r24, 0x07	; 7
     be6:	f8 22       	and	r15, r24
  mask &= 0x7ff;
     be8:	17 70       	andi	r17, 0x07	; 7
    return 0;
  }

  for (int n = 0; n < 2; n++) {
    // standard only
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM0);
     bea:	40 e2       	ldi	r20, 0x20	; 32
     bec:	60 e6       	ldi	r22, 0x60	; 96
     bee:	ce 01       	movw	r24, r28
     bf0:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM0);
     bf4:	40 e2       	ldi	r20, 0x20	; 32
     bf6:	60 e6       	ldi	r22, 0x60	; 96
     bf8:	ce 01       	movw	r24, r28
     bfa:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>

    writeRegister(REG_RXMnSIDH(n), mask >> 3);
     bfe:	68 01       	movw	r12, r16
     c00:	83 e0       	ldi	r24, 0x03	; 3
     c02:	d5 94       	asr	r13
     c04:	c7 94       	ror	r12
     c06:	8a 95       	dec	r24
     c08:	e1 f7       	brne	.-8      	; 0xc02 <_ZN12MCP2515Class6filterEii+0x4a>
     c0a:	4c 2d       	mov	r20, r12
     c0c:	60 e2       	ldi	r22, 0x20	; 32
     c0e:	ce 01       	movw	r24, r28
     c10:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnSIDL(n), mask << 5);
     c14:	02 95       	swap	r16
     c16:	00 0f       	add	r16, r16
     c18:	00 7e       	andi	r16, 0xE0	; 224
     c1a:	40 2f       	mov	r20, r16
     c1c:	61 e2       	ldi	r22, 0x21	; 33
     c1e:	ce 01       	movw	r24, r28
     c20:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID8(n), 0);
     c24:	40 e0       	ldi	r20, 0x00	; 0
     c26:	62 e2       	ldi	r22, 0x22	; 34
     c28:	ce 01       	movw	r24, r28
     c2a:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID0(n), 0);
     c2e:	40 e0       	ldi	r20, 0x00	; 0
     c30:	63 e2       	ldi	r22, 0x23	; 35
     c32:	ce 01       	movw	r24, r28
     c34:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    return 0;
  }

  for (int n = 0; n < 2; n++) {
    // standard only
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM0);
     c38:	40 e2       	ldi	r20, 0x20	; 32
     c3a:	60 e7       	ldi	r22, 0x70	; 112
     c3c:	ce 01       	movw	r24, r28
     c3e:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM0);
     c42:	40 e2       	ldi	r20, 0x20	; 32
     c44:	60 e7       	ldi	r22, 0x70	; 112
     c46:	ce 01       	movw	r24, r28
     c48:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>

    writeRegister(REG_RXMnSIDH(n), mask >> 3);
     c4c:	4c 2d       	mov	r20, r12
     c4e:	64 e2       	ldi	r22, 0x24	; 36
     c50:	ce 01       	movw	r24, r28
     c52:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnSIDL(n), mask << 5);
     c56:	40 2f       	mov	r20, r16
     c58:	65 e2       	ldi	r22, 0x25	; 37
     c5a:	ce 01       	movw	r24, r28
     c5c:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID8(n), 0);
     c60:	40 e0       	ldi	r20, 0x00	; 0
     c62:	66 e2       	ldi	r22, 0x26	; 38
     c64:	ce 01       	movw	r24, r28
     c66:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID0(n), 0);
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	67 e2       	ldi	r22, 0x27	; 39
     c6e:	ce 01       	movw	r24, r28
     c70:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
  }

  for (int n = 0; n < 6; n++) {
    writeRegister(REG_RXFnSIDH(n), id >> 3);
     c74:	a7 01       	movw	r20, r14
     c76:	93 e0       	ldi	r25, 0x03	; 3
     c78:	55 95       	asr	r21
     c7a:	47 95       	ror	r20
     c7c:	9a 95       	dec	r25
     c7e:	e1 f7       	brne	.-8      	; 0xc78 <_ZN12MCP2515Class6filterEii+0xc0>
     c80:	04 2f       	mov	r16, r20
    writeRegister(REG_RXFnSIDL(n), id << 5);
     c82:	e2 94       	swap	r14
     c84:	ee 0c       	add	r14, r14
     c86:	20 ee       	ldi	r18, 0xE0	; 224
     c88:	e2 22       	and	r14, r18
     c8a:	10 e0       	ldi	r17, 0x00	; 0
    writeRegister(REG_RXMnEID8(n), 0);
    writeRegister(REG_RXMnEID0(n), 0);
  }

  for (int n = 0; n < 6; n++) {
    writeRegister(REG_RXFnSIDH(n), id >> 3);
     c8c:	40 2f       	mov	r20, r16
     c8e:	61 2f       	mov	r22, r17
     c90:	ce 01       	movw	r24, r28
     c92:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXFnSIDL(n), id << 5);
     c96:	61 e0       	ldi	r22, 0x01	; 1
     c98:	61 0f       	add	r22, r17
     c9a:	4e 2d       	mov	r20, r14
     c9c:	ce 01       	movw	r24, r28
     c9e:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXFnEID8(n), 0);
     ca2:	62 e0       	ldi	r22, 0x02	; 2
     ca4:	61 0f       	add	r22, r17
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	ce 01       	movw	r24, r28
     caa:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXFnEID0(n), 0);
     cae:	63 e0       	ldi	r22, 0x03	; 3
     cb0:	61 0f       	add	r22, r17
     cb2:	40 e0       	ldi	r20, 0x00	; 0
     cb4:	ce 01       	movw	r24, r28
     cb6:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
     cba:	1c 5f       	subi	r17, 0xFC	; 252
    writeRegister(REG_RXMnSIDL(n), mask << 5);
    writeRegister(REG_RXMnEID8(n), 0);
    writeRegister(REG_RXMnEID0(n), 0);
  }

  for (int n = 0; n < 6; n++) {
     cbc:	18 31       	cpi	r17, 0x18	; 24
     cbe:	31 f7       	brne	.-52     	; 0xc8c <_ZN12MCP2515Class6filterEii+0xd4>
    writeRegister(REG_RXFnEID8(n), 0);
    writeRegister(REG_RXFnEID0(n), 0);
  }

  // normal mode
  writeRegister(REG_CANCTRL, 0x00);
     cc0:	40 e0       	ldi	r20, 0x00	; 0
     cc2:	6f e0       	ldi	r22, 0x0F	; 15
     cc4:	ce 01       	movw	r24, r28
     cc6:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x00) {
     cca:	6f e0       	ldi	r22, 0x0F	; 15
     ccc:	ce 01       	movw	r24, r28
     cce:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12MCP2515Class12readRegisterEh>
  mask &= 0x7ff;

  // config mode
  writeRegister(REG_CANCTRL, 0x80);
  if (readRegister(REG_CANCTRL) != 0x80) {
    return 0;
     cd2:	21 e0       	ldi	r18, 0x01	; 1
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	81 11       	cpse	r24, r1
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	82 2f       	mov	r24, r18
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <_ZN12MCP2515Class6filterEii+0x12a>
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	90 e0       	ldi	r25, 0x00	; 0
  if (readRegister(REG_CANCTRL) != 0x00) {
    return 0;
  }

  return 1;
}
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	0f 91       	pop	r16
     cea:	ff 90       	pop	r15
     cec:	ef 90       	pop	r14
     cee:	df 90       	pop	r13
     cf0:	cf 90       	pop	r12
     cf2:	08 95       	ret

00000cf4 <_ZN12MCP2515Class14filterExtendedEll>:

int MCP2515Class::filterExtended(long id, long mask)
{
     cf4:	4f 92       	push	r4
     cf6:	5f 92       	push	r5
     cf8:	6f 92       	push	r6
     cfa:	7f 92       	push	r7
     cfc:	8f 92       	push	r8
     cfe:	9f 92       	push	r9
     d00:	af 92       	push	r10
     d02:	bf 92       	push	r11
     d04:	cf 92       	push	r12
     d06:	df 92       	push	r13
     d08:	ef 92       	push	r14
     d0a:	ff 92       	push	r15
     d0c:	0f 93       	push	r16
     d0e:	1f 93       	push	r17
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	00 d0       	rcall	.+0      	; 0xd16 <_ZN12MCP2515Class14filterExtendedEll+0x22>
     d16:	00 d0       	rcall	.+0      	; 0xd18 <_ZN12MCP2515Class14filterExtendedEll+0x24>
     d18:	00 d0       	rcall	.+0      	; 0xd1a <_ZN12MCP2515Class14filterExtendedEll+0x26>
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	9e 83       	std	Y+6, r25	; 0x06
     d20:	8d 83       	std	Y+5, r24	; 0x05
     d22:	4a 01       	movw	r8, r20
     d24:	5b 01       	movw	r10, r22
     d26:	68 01       	movw	r12, r16
     d28:	79 01       	movw	r14, r18
  id &= 0x1FFFFFFF;
  mask &= 0x1FFFFFFF;

  // config mode
  writeRegister(REG_CANCTRL, 0x80);
     d2a:	40 e8       	ldi	r20, 0x80	; 128
     d2c:	6f e0       	ldi	r22, 0x0F	; 15
     d2e:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x80) {
     d32:	6f e0       	ldi	r22, 0x0F	; 15
     d34:	8d 81       	ldd	r24, Y+5	; 0x05
     d36:	9e 81       	ldd	r25, Y+6	; 0x06
     d38:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12MCP2515Class12readRegisterEh>
     d3c:	80 38       	cpi	r24, 0x80	; 128
     d3e:	09 f0       	breq	.+2      	; 0xd42 <_ZN12MCP2515Class14filterExtendedEll+0x4e>
     d40:	be c0       	rjmp	.+380    	; 0xebe <_ZN12MCP2515Class14filterExtendedEll+0x1ca>
}

int MCP2515Class::filterExtended(long id, long mask)
{
  id &= 0x1FFFFFFF;
  mask &= 0x1FFFFFFF;
     d42:	8f e1       	ldi	r24, 0x1F	; 31
     d44:	f8 22       	and	r15, r24
  for (int n = 0; n < 2; n++) {
    // extended only
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM1);
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM1);

    writeRegister(REG_RXMnSIDH(n), mask >> 21);
     d46:	d7 01       	movw	r26, r14
     d48:	c6 01       	movw	r24, r12
     d4a:	25 e1       	ldi	r18, 0x15	; 21
     d4c:	b5 95       	asr	r27
     d4e:	a7 95       	ror	r26
     d50:	97 95       	ror	r25
     d52:	87 95       	ror	r24
     d54:	2a 95       	dec	r18
     d56:	d1 f7       	brne	.-12     	; 0xd4c <_ZN12MCP2515Class14filterExtendedEll+0x58>
     d58:	89 83       	std	Y+1, r24	; 0x01
     d5a:	9a 83       	std	Y+2, r25	; 0x02
     d5c:	ab 83       	std	Y+3, r26	; 0x03
     d5e:	bc 83       	std	Y+4, r27	; 0x04
    writeRegister(REG_RXMnSIDL(n), (((mask >> 18) & 0x03) << 5) | FLAG_EXIDE | ((mask >> 16) & 0x03));
     d60:	d7 01       	movw	r26, r14
     d62:	c6 01       	movw	r24, r12
     d64:	3d e0       	ldi	r19, 0x0D	; 13
     d66:	b6 95       	lsr	r27
     d68:	a7 95       	ror	r26
     d6a:	97 95       	ror	r25
     d6c:	87 95       	ror	r24
     d6e:	3a 95       	dec	r19
     d70:	d1 f7       	brne	.-12     	; 0xd66 <_ZN12MCP2515Class14filterExtendedEll+0x72>
     d72:	80 76       	andi	r24, 0x60	; 96
     d74:	99 27       	eor	r25, r25
     d76:	aa 27       	eor	r26, r26
     d78:	bb 27       	eor	r27, r27
     d7a:	1e 2d       	mov	r17, r14
     d7c:	13 70       	andi	r17, 0x03	; 3
     d7e:	18 60       	ori	r17, 0x08	; 8
     d80:	18 2b       	or	r17, r24
    writeRegister(REG_RXMnEID8(n), (mask >> 8) & 0xff);
     d82:	4d 2c       	mov	r4, r13
     d84:	5e 2c       	mov	r5, r14
     d86:	6f 2c       	mov	r6, r15
     d88:	77 24       	eor	r7, r7
     d8a:	67 fc       	sbrc	r6, 7
     d8c:	7a 94       	dec	r7
    return 0;
  }

  for (int n = 0; n < 2; n++) {
    // extended only
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM1);
     d8e:	40 e4       	ldi	r20, 0x40	; 64
     d90:	60 e6       	ldi	r22, 0x60	; 96
     d92:	8d 81       	ldd	r24, Y+5	; 0x05
     d94:	9e 81       	ldd	r25, Y+6	; 0x06
     d96:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM1);
     d9a:	40 e4       	ldi	r20, 0x40	; 64
     d9c:	60 e6       	ldi	r22, 0x60	; 96
     d9e:	8d 81       	ldd	r24, Y+5	; 0x05
     da0:	9e 81       	ldd	r25, Y+6	; 0x06
     da2:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>

    writeRegister(REG_RXMnSIDH(n), mask >> 21);
     da6:	49 81       	ldd	r20, Y+1	; 0x01
     da8:	60 e2       	ldi	r22, 0x20	; 32
     daa:	8d 81       	ldd	r24, Y+5	; 0x05
     dac:	9e 81       	ldd	r25, Y+6	; 0x06
     dae:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnSIDL(n), (((mask >> 18) & 0x03) << 5) | FLAG_EXIDE | ((mask >> 16) & 0x03));
     db2:	41 2f       	mov	r20, r17
     db4:	61 e2       	ldi	r22, 0x21	; 33
     db6:	8d 81       	ldd	r24, Y+5	; 0x05
     db8:	9e 81       	ldd	r25, Y+6	; 0x06
     dba:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID8(n), (mask >> 8) & 0xff);
     dbe:	44 2d       	mov	r20, r4
     dc0:	62 e2       	ldi	r22, 0x22	; 34
     dc2:	8d 81       	ldd	r24, Y+5	; 0x05
     dc4:	9e 81       	ldd	r25, Y+6	; 0x06
     dc6:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID0(n), mask & 0xff);
     dca:	4c 2d       	mov	r20, r12
     dcc:	63 e2       	ldi	r22, 0x23	; 35
     dce:	8d 81       	ldd	r24, Y+5	; 0x05
     dd0:	9e 81       	ldd	r25, Y+6	; 0x06
     dd2:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    return 0;
  }

  for (int n = 0; n < 2; n++) {
    // extended only
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM1);
     dd6:	40 e4       	ldi	r20, 0x40	; 64
     dd8:	60 e7       	ldi	r22, 0x70	; 112
     dda:	8d 81       	ldd	r24, Y+5	; 0x05
     ddc:	9e 81       	ldd	r25, Y+6	; 0x06
     dde:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM1);
     de2:	40 e4       	ldi	r20, 0x40	; 64
     de4:	60 e7       	ldi	r22, 0x70	; 112
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
     dea:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>

    writeRegister(REG_RXMnSIDH(n), mask >> 21);
     dee:	49 81       	ldd	r20, Y+1	; 0x01
     df0:	64 e2       	ldi	r22, 0x24	; 36
     df2:	8d 81       	ldd	r24, Y+5	; 0x05
     df4:	9e 81       	ldd	r25, Y+6	; 0x06
     df6:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnSIDL(n), (((mask >> 18) & 0x03) << 5) | FLAG_EXIDE | ((mask >> 16) & 0x03));
     dfa:	41 2f       	mov	r20, r17
     dfc:	65 e2       	ldi	r22, 0x25	; 37
     dfe:	8d 81       	ldd	r24, Y+5	; 0x05
     e00:	9e 81       	ldd	r25, Y+6	; 0x06
     e02:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID8(n), (mask >> 8) & 0xff);
     e06:	44 2d       	mov	r20, r4
     e08:	66 e2       	ldi	r22, 0x26	; 38
     e0a:	8d 81       	ldd	r24, Y+5	; 0x05
     e0c:	9e 81       	ldd	r25, Y+6	; 0x06
     e0e:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID0(n), mask & 0xff);
     e12:	4c 2d       	mov	r20, r12
     e14:	67 e2       	ldi	r22, 0x27	; 39
     e16:	8d 81       	ldd	r24, Y+5	; 0x05
     e18:	9e 81       	ldd	r25, Y+6	; 0x06
     e1a:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
  return 1;
}

int MCP2515Class::filterExtended(long id, long mask)
{
  id &= 0x1FFFFFFF;
     e1e:	9f e1       	ldi	r25, 0x1F	; 31
     e20:	b9 22       	and	r11, r25
    writeRegister(REG_RXMnEID8(n), (mask >> 8) & 0xff);
    writeRegister(REG_RXMnEID0(n), mask & 0xff);
  }

  for (int n = 0; n < 6; n++) {
    writeRegister(REG_RXFnSIDH(n), id >> 21);
     e22:	d5 01       	movw	r26, r10
     e24:	c4 01       	movw	r24, r8
     e26:	55 e1       	ldi	r21, 0x15	; 21
     e28:	b5 95       	asr	r27
     e2a:	a7 95       	ror	r26
     e2c:	97 95       	ror	r25
     e2e:	87 95       	ror	r24
     e30:	5a 95       	dec	r21
     e32:	d1 f7       	brne	.-12     	; 0xe28 <_ZN12MCP2515Class14filterExtendedEll+0x134>
     e34:	e8 2e       	mov	r14, r24
    writeRegister(REG_RXFnSIDL(n), (((id >> 18) & 0x03) << 5) | FLAG_EXIDE | ((id >> 16) & 0x03));
     e36:	8a 2d       	mov	r24, r10
     e38:	83 70       	andi	r24, 0x03	; 3
     e3a:	28 2f       	mov	r18, r24
     e3c:	28 60       	ori	r18, 0x08	; 8
     e3e:	d5 01       	movw	r26, r10
     e40:	c4 01       	movw	r24, r8
     e42:	6d e0       	ldi	r22, 0x0D	; 13
     e44:	b6 95       	lsr	r27
     e46:	a7 95       	ror	r26
     e48:	97 95       	ror	r25
     e4a:	87 95       	ror	r24
     e4c:	6a 95       	dec	r22
     e4e:	d1 f7       	brne	.-12     	; 0xe44 <_ZN12MCP2515Class14filterExtendedEll+0x150>
     e50:	80 76       	andi	r24, 0x60	; 96
     e52:	99 27       	eor	r25, r25
     e54:	aa 27       	eor	r26, r26
     e56:	bb 27       	eor	r27, r27
     e58:	f2 2e       	mov	r15, r18
     e5a:	f8 2a       	or	r15, r24
    writeRegister(REG_RXFnEID8(n), (id >> 8) & 0xff);
     e5c:	d9 2c       	mov	r13, r9
     e5e:	10 e0       	ldi	r17, 0x00	; 0
    writeRegister(REG_RXMnEID8(n), (mask >> 8) & 0xff);
    writeRegister(REG_RXMnEID0(n), mask & 0xff);
  }

  for (int n = 0; n < 6; n++) {
    writeRegister(REG_RXFnSIDH(n), id >> 21);
     e60:	4e 2d       	mov	r20, r14
     e62:	61 2f       	mov	r22, r17
     e64:	8d 81       	ldd	r24, Y+5	; 0x05
     e66:	9e 81       	ldd	r25, Y+6	; 0x06
     e68:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXFnSIDL(n), (((id >> 18) & 0x03) << 5) | FLAG_EXIDE | ((id >> 16) & 0x03));
     e6c:	61 e0       	ldi	r22, 0x01	; 1
     e6e:	61 0f       	add	r22, r17
     e70:	4f 2d       	mov	r20, r15
     e72:	8d 81       	ldd	r24, Y+5	; 0x05
     e74:	9e 81       	ldd	r25, Y+6	; 0x06
     e76:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXFnEID8(n), (id >> 8) & 0xff);
     e7a:	62 e0       	ldi	r22, 0x02	; 2
     e7c:	61 0f       	add	r22, r17
     e7e:	4d 2d       	mov	r20, r13
     e80:	8d 81       	ldd	r24, Y+5	; 0x05
     e82:	9e 81       	ldd	r25, Y+6	; 0x06
     e84:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXFnEID0(n), id & 0xff);
     e88:	63 e0       	ldi	r22, 0x03	; 3
     e8a:	61 0f       	add	r22, r17
     e8c:	48 2d       	mov	r20, r8
     e8e:	8d 81       	ldd	r24, Y+5	; 0x05
     e90:	9e 81       	ldd	r25, Y+6	; 0x06
     e92:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
     e96:	1c 5f       	subi	r17, 0xFC	; 252
    writeRegister(REG_RXMnSIDL(n), (((mask >> 18) & 0x03) << 5) | FLAG_EXIDE | ((mask >> 16) & 0x03));
    writeRegister(REG_RXMnEID8(n), (mask >> 8) & 0xff);
    writeRegister(REG_RXMnEID0(n), mask & 0xff);
  }

  for (int n = 0; n < 6; n++) {
     e98:	18 31       	cpi	r17, 0x18	; 24
     e9a:	11 f7       	brne	.-60     	; 0xe60 <_ZN12MCP2515Class14filterExtendedEll+0x16c>
    writeRegister(REG_RXFnEID8(n), (id >> 8) & 0xff);
    writeRegister(REG_RXFnEID0(n), id & 0xff);
  }

  // normal mode
  writeRegister(REG_CANCTRL, 0x00);
     e9c:	40 e0       	ldi	r20, 0x00	; 0
     e9e:	6f e0       	ldi	r22, 0x0F	; 15
     ea0:	8d 81       	ldd	r24, Y+5	; 0x05
     ea2:	9e 81       	ldd	r25, Y+6	; 0x06
     ea4:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x00) {
     ea8:	6f e0       	ldi	r22, 0x0F	; 15
     eaa:	8d 81       	ldd	r24, Y+5	; 0x05
     eac:	9e 81       	ldd	r25, Y+6	; 0x06
     eae:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12MCP2515Class12readRegisterEh>
  mask &= 0x1FFFFFFF;

  // config mode
  writeRegister(REG_CANCTRL, 0x80);
  if (readRegister(REG_CANCTRL) != 0x80) {
    return 0;
     eb2:	21 e0       	ldi	r18, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	81 11       	cpse	r24, r1
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	82 2f       	mov	r24, r18
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <_ZN12MCP2515Class14filterExtendedEll+0x1ce>
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	90 e0       	ldi	r25, 0x00	; 0
  if (readRegister(REG_CANCTRL) != 0x00) {
    return 0;
  }

  return 1;
}
     ec2:	26 96       	adiw	r28, 0x06	; 6
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	ff 90       	pop	r15
     ed8:	ef 90       	pop	r14
     eda:	df 90       	pop	r13
     edc:	cf 90       	pop	r12
     ede:	bf 90       	pop	r11
     ee0:	af 90       	pop	r10
     ee2:	9f 90       	pop	r9
     ee4:	8f 90       	pop	r8
     ee6:	7f 90       	pop	r7
     ee8:	6f 90       	pop	r6
     eea:	5f 90       	pop	r5
     eec:	4f 90       	pop	r4
     eee:	08 95       	ret

00000ef0 <_ZN12MCP2515Class7observeEv>:

int MCP2515Class::observe()
{
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	ec 01       	movw	r28, r24
  writeRegister(REG_CANCTRL, 0x80);
     ef6:	40 e8       	ldi	r20, 0x80	; 128
     ef8:	6f e0       	ldi	r22, 0x0F	; 15
     efa:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x80) {
     efe:	6f e0       	ldi	r22, 0x0F	; 15
     f00:	ce 01       	movw	r24, r28
     f02:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12MCP2515Class12readRegisterEh>
     f06:	21 e0       	ldi	r18, 0x01	; 1
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	80 38       	cpi	r24, 0x80	; 128
     f0c:	11 f0       	breq	.+4      	; 0xf12 <_ZN12MCP2515Class7observeEv+0x22>
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
  }

  return 1;
}
     f12:	c9 01       	movw	r24, r18
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	08 95       	ret

00000f1a <_ZN12MCP2515Class8loopbackEv>:

int MCP2515Class::loopback()
{
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	ec 01       	movw	r28, r24
  writeRegister(REG_CANCTRL, 0x40);
     f20:	40 e4       	ldi	r20, 0x40	; 64
     f22:	6f e0       	ldi	r22, 0x0F	; 15
     f24:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x40) {
     f28:	6f e0       	ldi	r22, 0x0F	; 15
     f2a:	ce 01       	movw	r24, r28
     f2c:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12MCP2515Class12readRegisterEh>
     f30:	21 e0       	ldi	r18, 0x01	; 1
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	80 34       	cpi	r24, 0x40	; 64
     f36:	11 f0       	breq	.+4      	; 0xf3c <_ZN12MCP2515Class8loopbackEv+0x22>
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
  }

  return 1;
}
     f3c:	c9 01       	movw	r24, r18
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <_ZN12MCP2515Class5sleepEv>:

int MCP2515Class::sleep()
{
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	ec 01       	movw	r28, r24
  writeRegister(REG_CANCTRL, 0x01);
     f4a:	41 e0       	ldi	r20, 0x01	; 1
     f4c:	6f e0       	ldi	r22, 0x0F	; 15
     f4e:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x01) {
     f52:	6f e0       	ldi	r22, 0x0F	; 15
     f54:	ce 01       	movw	r24, r28
     f56:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12MCP2515Class12readRegisterEh>
     f5a:	21 e0       	ldi	r18, 0x01	; 1
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	11 f0       	breq	.+4      	; 0xf66 <_ZN12MCP2515Class5sleepEv+0x22>
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
  }

  return 1;
}
     f66:	c9 01       	movw	r24, r18
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	08 95       	ret

00000f6e <_ZN12MCP2515Class6wakeupEv>:

int MCP2515Class::wakeup()
{
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	ec 01       	movw	r28, r24
  writeRegister(REG_CANCTRL, 0x00);
     f74:	40 e0       	ldi	r20, 0x00	; 0
     f76:	6f e0       	ldi	r22, 0x0F	; 15
     f78:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x00) {
     f7c:	6f e0       	ldi	r22, 0x0F	; 15
     f7e:	ce 01       	movw	r24, r28
     f80:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12MCP2515Class12readRegisterEh>
     f84:	21 e0       	ldi	r18, 0x01	; 1
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	88 23       	and	r24, r24
     f8a:	11 f0       	breq	.+4      	; 0xf90 <_ZN12MCP2515Class6wakeupEv+0x22>
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
  }

  return 1;
}
     f90:	c9 01       	movw	r24, r18
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	08 95       	ret

00000f98 <_ZN12MCP2515Class5beginEl.part.3.constprop.6>:

MCP2515Class::~MCP2515Class()
{
}

int MCP2515Class::begin(long baudRate)
     f98:	8f 92       	push	r8
     f9a:	9f 92       	push	r9
     f9c:	af 92       	push	r10
     f9e:	bf 92       	push	r11
     fa0:	cf 92       	push	r12
     fa2:	df 92       	push	r13
     fa4:	ef 92       	push	r14
     fa6:	ff 92       	push	r15
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	c8 50       	subi	r28, 0x08	; 8
     fb6:	d1 40       	sbci	r29, 0x01	; 1
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
    { (long)16E6,   (long)50E3, { 0x07, 0xfa, 0x87 } },
    { (long)16E6,   (long)40E3, { 0x07, 0xff, 0x87 } },
    { (long)16E6,   (long)20E3, { 0x0f, 0xff, 0x87 } },
    { (long)16E6,   (long)10E3, { 0x1f, 0xff, 0x87 } },
    { (long)16E6,    (long)5E3, { 0x3f, 0xff, 0x87 } },
  };
     fc2:	28 e0       	ldi	r18, 0x08	; 8
     fc4:	31 e0       	ldi	r19, 0x01	; 1
     fc6:	ea e8       	ldi	r30, 0x8A	; 138
     fc8:	f1 e0       	ldi	r31, 0x01	; 1
     fca:	de 01       	movw	r26, r28
     fcc:	11 96       	adiw	r26, 0x01	; 1
     fce:	01 90       	ld	r0, Z+
     fd0:	0d 92       	st	X+, r0
     fd2:	21 50       	subi	r18, 0x01	; 1
     fd4:	30 40       	sbci	r19, 0x00	; 0
     fd6:	d9 f7       	brne	.-10     	; 0xfce <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x36>

  const uint8_t* cnf = NULL;

  for (unsigned int i = 0; i < (sizeof(CNF_MAPPER) / sizeof(CNF_MAPPER[0])); i++) {
    if (CNF_MAPPER[i].clockFrequency == _clockFrequency && CNF_MAPPER[i].baudRate == baudRate) {
     fd8:	fc 01       	movw	r30, r24
     fda:	c3 ac       	ldd	r12, Z+59	; 0x3b
     fdc:	d4 ac       	ldd	r13, Z+60	; 0x3c
     fde:	e5 ac       	ldd	r14, Z+61	; 0x3d
     fe0:	f6 ac       	ldd	r15, Z+62	; 0x3e
     fe2:	fe 01       	movw	r30, r28
     fe4:	31 96       	adiw	r30, 0x01	; 1
    { (long)16E6,    (long)5E3, { 0x3f, 0xff, 0x87 } },
  };

  const uint8_t* cnf = NULL;

  for (unsigned int i = 0; i < (sizeof(CNF_MAPPER) / sizeof(CNF_MAPPER[0])); i++) {
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
    if (CNF_MAPPER[i].clockFrequency == _clockFrequency && CNF_MAPPER[i].baudRate == baudRate) {
     fea:	80 80       	ld	r8, Z
     fec:	91 80       	ldd	r9, Z+1	; 0x01
     fee:	a2 80       	ldd	r10, Z+2	; 0x02
     ff0:	b3 80       	ldd	r11, Z+3	; 0x03
     ff2:	8c 14       	cp	r8, r12
     ff4:	9d 04       	cpc	r9, r13
     ff6:	ae 04       	cpc	r10, r14
     ff8:	bf 04       	cpc	r11, r15
     ffa:	09 f0       	breq	.+2      	; 0xffe <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x66>
     ffc:	54 c0       	rjmp	.+168    	; 0x10a6 <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x10e>
     ffe:	84 80       	ldd	r8, Z+4	; 0x04
    1000:	95 80       	ldd	r9, Z+5	; 0x05
    1002:	a6 80       	ldd	r10, Z+6	; 0x06
    1004:	b7 80       	ldd	r11, Z+7	; 0x07
    1006:	84 16       	cp	r8, r20
    1008:	95 06       	cpc	r9, r21
    100a:	a6 06       	cpc	r10, r22
    100c:	b7 06       	cpc	r11, r23
    100e:	09 f0       	breq	.+2      	; 0x1012 <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x7a>
    1010:	4a c0       	rjmp	.+148    	; 0x10a6 <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x10e>
    1012:	8c 01       	movw	r16, r24
      cnf = CNF_MAPPER[i].cnf;
    1014:	8b e0       	ldi	r24, 0x0B	; 11
    1016:	82 9f       	mul	r24, r18
    1018:	70 01       	movw	r14, r0
    101a:	83 9f       	mul	r24, r19
    101c:	f0 0c       	add	r15, r0
    101e:	11 24       	eor	r1, r1
    1020:	f8 e0       	ldi	r31, 0x08	; 8
    1022:	ef 0e       	add	r14, r31
    1024:	f1 1c       	adc	r15, r1
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	8c 0f       	add	r24, r28
    102c:	9d 1f       	adc	r25, r29
    102e:	e8 0e       	add	r14, r24
    1030:	f9 1e       	adc	r15, r25

  if (cnf == NULL) {
    return 0;
  }

  writeRegister(REG_CNF1, cnf[0]);
    1032:	f7 01       	movw	r30, r14
    1034:	40 81       	ld	r20, Z
    1036:	6a e2       	ldi	r22, 0x2A	; 42
    1038:	c8 01       	movw	r24, r16
    103a:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
  writeRegister(REG_CNF2, cnf[1]);
    103e:	f7 01       	movw	r30, r14
    1040:	41 81       	ldd	r20, Z+1	; 0x01
    1042:	69 e2       	ldi	r22, 0x29	; 41
    1044:	c8 01       	movw	r24, r16
    1046:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
  writeRegister(REG_CNF3, cnf[2]);
    104a:	f7 01       	movw	r30, r14
    104c:	42 81       	ldd	r20, Z+2	; 0x02
    104e:	68 e2       	ldi	r22, 0x28	; 40
    1050:	c8 01       	movw	r24, r16
    1052:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>

  writeRegister(REG_CANINTE, FLAG_RXnIE(1) | FLAG_RXnIE(0));
    1056:	43 e0       	ldi	r20, 0x03	; 3
    1058:	6b e2       	ldi	r22, 0x2B	; 43
    105a:	c8 01       	movw	r24, r16
    105c:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
  writeRegister(REG_BFPCTRL, 0x00);
    1060:	40 e0       	ldi	r20, 0x00	; 0
    1062:	6c e0       	ldi	r22, 0x0C	; 12
    1064:	c8 01       	movw	r24, r16
    1066:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
  writeRegister(REG_TXRTSCTRL, 0x00);
    106a:	40 e0       	ldi	r20, 0x00	; 0
    106c:	6d e0       	ldi	r22, 0x0D	; 13
    106e:	c8 01       	movw	r24, r16
    1070:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
  writeRegister(REG_RXBnCTRL(0), FLAG_RXM1 | FLAG_RXM0);
    1074:	40 e6       	ldi	r20, 0x60	; 96
    1076:	60 e6       	ldi	r22, 0x60	; 96
    1078:	c8 01       	movw	r24, r16
    107a:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
  writeRegister(REG_RXBnCTRL(1), FLAG_RXM1 | FLAG_RXM0);
    107e:	40 e6       	ldi	r20, 0x60	; 96
    1080:	60 e7       	ldi	r22, 0x70	; 112
    1082:	c8 01       	movw	r24, r16
    1084:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>

  writeRegister(REG_CANCTRL, 0x00);
    1088:	40 e0       	ldi	r20, 0x00	; 0
    108a:	6f e0       	ldi	r22, 0x0F	; 15
    108c:	c8 01       	movw	r24, r16
    108e:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x00) {
    1092:	6f e0       	ldi	r22, 0x0F	; 15
    1094:	c8 01       	movw	r24, r16
    1096:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12MCP2515Class12readRegisterEh>
      break;
    }
  }

  if (cnf == NULL) {
    return 0;
    109a:	21 e0       	ldi	r18, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	81 11       	cpse	r24, r1
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	82 2f       	mov	r24, r18
    10a4:	09 c0       	rjmp	.+18     	; 0x10b8 <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x120>
    { (long)16E6,    (long)5E3, { 0x3f, 0xff, 0x87 } },
  };

  const uint8_t* cnf = NULL;

  for (unsigned int i = 0; i < (sizeof(CNF_MAPPER) / sizeof(CNF_MAPPER[0])); i++) {
    10a6:	2f 5f       	subi	r18, 0xFF	; 255
    10a8:	3f 4f       	sbci	r19, 0xFF	; 255
    10aa:	3b 96       	adiw	r30, 0x0b	; 11
    10ac:	28 31       	cpi	r18, 0x18	; 24
    10ae:	31 05       	cpc	r19, r1
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x11c>
    10b2:	9b cf       	rjmp	.-202    	; 0xfea <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x52>
      break;
    }
  }

  if (cnf == NULL) {
    return 0;
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
  if (readRegister(REG_CANCTRL) != 0x00) {
    return 0;
  }

  return 1;
}
    10b8:	c8 5f       	subi	r28, 0xF8	; 248
    10ba:	de 4f       	sbci	r29, 0xFE	; 254
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	ff 90       	pop	r15
    10d0:	ef 90       	pop	r14
    10d2:	df 90       	pop	r13
    10d4:	cf 90       	pop	r12
    10d6:	bf 90       	pop	r11
    10d8:	af 90       	pop	r10
    10da:	9f 90       	pop	r9
    10dc:	8f 90       	pop	r8
    10de:	08 95       	ret

000010e0 <_GLOBAL__sub_I__ZN12MCP2515ClassC2Ev>:
void MCP2515Class::onInterrupt()
{
  CAN.handleInterrupt();
}

MCP2515Class CAN;
    10e0:	80 ee       	ldi	r24, 0xE0	; 224
    10e2:	94 e0       	ldi	r25, 0x04	; 4
    10e4:	0c 94 41 04 	jmp	0x882	; 0x882 <_ZN12MCP2515ClassC1Ev>

000010e8 <_GLOBAL__sub_D__ZN12MCP2515ClassC2Ev>:
    10e8:	80 ee       	ldi	r24, 0xE0	; 224
    10ea:	94 e0       	ldi	r25, 0x04	; 4
    10ec:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <_ZN12MCP2515ClassD1Ev>

000010f0 <_ZN12MCP2515Class5beginEl>:
MCP2515Class::~MCP2515Class()
{
}

int MCP2515Class::begin(long baudRate)
{
    10f0:	cf 92       	push	r12
    10f2:	df 92       	push	r13
    10f4:	ef 92       	push	r14
    10f6:	ff 92       	push	r15
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	ec 01       	movw	r28, r24
    10fe:	6a 01       	movw	r12, r20
    1100:	7b 01       	movw	r14, r22
  CANControllerClass::begin(baudRate);
    1102:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN18CANControllerClass5beginEl>

  pinMode(_csPin, OUTPUT);
    1106:	61 e0       	ldi	r22, 0x01	; 1
    1108:	8f a9       	ldd	r24, Y+55	; 0x37
    110a:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <pinMode>

  // start SPI
  SPI.begin();
    110e:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN8SPIClass5beginEv>

  reset();
    1112:	ce 01       	movw	r24, r28
    1114:	0e 94 61 04 	call	0x8c2	; 0x8c2 <_ZN12MCP2515Class5resetEv>

  writeRegister(REG_CANCTRL, 0x80);
    1118:	40 e8       	ldi	r20, 0x80	; 128
    111a:	6f e0       	ldi	r22, 0x0F	; 15
    111c:	ce 01       	movw	r24, r28
    111e:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x80) {
    1122:	6f e0       	ldi	r22, 0x0F	; 15
    1124:	ce 01       	movw	r24, r28
    1126:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12MCP2515Class12readRegisterEh>
    112a:	80 38       	cpi	r24, 0x80	; 128
    112c:	59 f4       	brne	.+22     	; 0x1144 <_ZN12MCP2515Class5beginEl+0x54>
    112e:	b7 01       	movw	r22, r14
    1130:	a6 01       	movw	r20, r12
    1132:	ce 01       	movw	r24, r28
  if (readRegister(REG_CANCTRL) != 0x00) {
    return 0;
  }

  return 1;
}
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	ff 90       	pop	r15
    113a:	ef 90       	pop	r14
    113c:	df 90       	pop	r13
    113e:	cf 90       	pop	r12
    1140:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <_ZN12MCP2515Class5beginEl.part.3.constprop.6>
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	ff 90       	pop	r15
    114e:	ef 90       	pop	r14
    1150:	df 90       	pop	r13
    1152:	cf 90       	pop	r12
    1154:	08 95       	ret

00001156 <_ZN12MCP2515Class3endEv>:

void MCP2515Class::end()
{
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	ec 01       	movw	r28, r24
  SPI.end();
    115c:	0e 94 02 0a 	call	0x1404	; 0x1404 <_ZN8SPIClass3endEv>

  CANControllerClass::end();
    1160:	ce 01       	movw	r24, r28
}
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28

void MCP2515Class::end()
{
  SPI.end();

  CANControllerClass::end();
    1166:	0c 94 4b 03 	jmp	0x696	; 0x696 <_ZN18CANControllerClass3endEv>

0000116a <_ZN12MCP2515Class9endPacketEv>:
}

int MCP2515Class::endPacket()
{
    116a:	ef 92       	push	r14
    116c:	ff 92       	push	r15
    116e:	0f 93       	push	r16
    1170:	1f 93       	push	r17
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	ec 01       	movw	r28, r24
  if (!CANControllerClass::endPacket()) {
    1178:	0e 94 86 03 	call	0x70c	; 0x70c <_ZN18CANControllerClass9endPacketEv>
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	09 f4       	brne	.+2      	; 0x1182 <_ZN12MCP2515Class9endPacketEv+0x18>
    1180:	b4 c0       	rjmp	.+360    	; 0x12ea <_ZN12MCP2515Class9endPacketEv+0x180>
    return 0;
  }

  int n = 0;

  if (_txExtended) {
    1182:	8b 89       	ldd	r24, Y+19	; 0x13
    1184:	4f 85       	ldd	r20, Y+15	; 0x0f
    1186:	58 89       	ldd	r21, Y+16	; 0x10
    1188:	69 89       	ldd	r22, Y+17	; 0x11
    118a:	7a 89       	ldd	r23, Y+18	; 0x12
    118c:	88 23       	and	r24, r24
    118e:	b9 f1       	breq	.+110    	; 0x11fe <_ZN12MCP2515Class9endPacketEv+0x94>
    writeRegister(REG_TXBnSIDH(n), _txId >> 21);
    1190:	95 e1       	ldi	r25, 0x15	; 21
    1192:	75 95       	asr	r23
    1194:	67 95       	ror	r22
    1196:	57 95       	ror	r21
    1198:	47 95       	ror	r20
    119a:	9a 95       	dec	r25
    119c:	d1 f7       	brne	.-12     	; 0x1192 <_ZN12MCP2515Class9endPacketEv+0x28>
    119e:	61 e3       	ldi	r22, 0x31	; 49
    11a0:	ce 01       	movw	r24, r28
    11a2:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_TXBnSIDL(n), (((_txId >> 18) & 0x07) << 5) | FLAG_EXIDE | ((_txId >> 16) & 0x03));
    11a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    11a8:	98 89       	ldd	r25, Y+16	; 0x10
    11aa:	a9 89       	ldd	r26, Y+17	; 0x11
    11ac:	ba 89       	ldd	r27, Y+18	; 0x12
    11ae:	ac 01       	movw	r20, r24
    11b0:	bd 01       	movw	r22, r26
    11b2:	22 e1       	ldi	r18, 0x12	; 18
    11b4:	75 95       	asr	r23
    11b6:	67 95       	ror	r22
    11b8:	57 95       	ror	r21
    11ba:	47 95       	ror	r20
    11bc:	2a 95       	dec	r18
    11be:	d1 f7       	brne	.-12     	; 0x11b4 <_ZN12MCP2515Class9endPacketEv+0x4a>
    11c0:	35 e0       	ldi	r19, 0x05	; 5
    11c2:	44 0f       	add	r20, r20
    11c4:	55 1f       	adc	r21, r21
    11c6:	66 1f       	adc	r22, r22
    11c8:	77 1f       	adc	r23, r23
    11ca:	3a 95       	dec	r19
    11cc:	d1 f7       	brne	.-12     	; 0x11c2 <_ZN12MCP2515Class9endPacketEv+0x58>
    11ce:	8a 2f       	mov	r24, r26
    11d0:	83 70       	andi	r24, 0x03	; 3
    11d2:	48 2b       	or	r20, r24
    11d4:	48 60       	ori	r20, 0x08	; 8
    11d6:	62 e3       	ldi	r22, 0x32	; 50
    11d8:	ce 01       	movw	r24, r28
    11da:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_TXBnEID8(n), (_txId >> 8) & 0xff);
    11de:	4f 85       	ldd	r20, Y+15	; 0x0f
    11e0:	58 89       	ldd	r21, Y+16	; 0x10
    11e2:	69 89       	ldd	r22, Y+17	; 0x11
    11e4:	7a 89       	ldd	r23, Y+18	; 0x12
    11e6:	45 2f       	mov	r20, r21
    11e8:	56 2f       	mov	r21, r22
    11ea:	67 2f       	mov	r22, r23
    11ec:	77 27       	eor	r23, r23
    11ee:	67 fd       	sbrc	r22, 7
    11f0:	7a 95       	dec	r23
    11f2:	63 e3       	ldi	r22, 0x33	; 51
    11f4:	ce 01       	movw	r24, r28
    11f6:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_TXBnEID0(n), _txId & 0xff);
    11fa:	4f 85       	ldd	r20, Y+15	; 0x0f
    11fc:	19 c0       	rjmp	.+50     	; 0x1230 <_ZN12MCP2515Class9endPacketEv+0xc6>
  } else {
    writeRegister(REG_TXBnSIDH(n), _txId >> 3);
    11fe:	83 e0       	ldi	r24, 0x03	; 3
    1200:	75 95       	asr	r23
    1202:	67 95       	ror	r22
    1204:	57 95       	ror	r21
    1206:	47 95       	ror	r20
    1208:	8a 95       	dec	r24
    120a:	d1 f7       	brne	.-12     	; 0x1200 <_ZN12MCP2515Class9endPacketEv+0x96>
    120c:	61 e3       	ldi	r22, 0x31	; 49
    120e:	ce 01       	movw	r24, r28
    1210:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_TXBnSIDL(n), _txId << 5);
    1214:	4f 85       	ldd	r20, Y+15	; 0x0f
    1216:	42 95       	swap	r20
    1218:	44 0f       	add	r20, r20
    121a:	40 7e       	andi	r20, 0xE0	; 224
    121c:	62 e3       	ldi	r22, 0x32	; 50
    121e:	ce 01       	movw	r24, r28
    1220:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_TXBnEID8(n), 0x00);
    1224:	40 e0       	ldi	r20, 0x00	; 0
    1226:	63 e3       	ldi	r22, 0x33	; 51
    1228:	ce 01       	movw	r24, r28
    122a:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_TXBnEID0(n), 0x00);
    122e:	40 e0       	ldi	r20, 0x00	; 0
    1230:	64 e3       	ldi	r22, 0x34	; 52
    1232:	ce 01       	movw	r24, r28
    1234:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
  }

  if (_txRtr) {
    1238:	8c 89       	ldd	r24, Y+20	; 0x14
    writeRegister(REG_TXBnDLC(n), 0x40 | _txLength);
    123a:	4f 89       	ldd	r20, Y+23	; 0x17
    writeRegister(REG_TXBnSIDL(n), _txId << 5);
    writeRegister(REG_TXBnEID8(n), 0x00);
    writeRegister(REG_TXBnEID0(n), 0x00);
  }

  if (_txRtr) {
    123c:	88 23       	and	r24, r24
    123e:	31 f0       	breq	.+12     	; 0x124c <_ZN12MCP2515Class9endPacketEv+0xe2>
    writeRegister(REG_TXBnDLC(n), 0x40 | _txLength);
    1240:	40 64       	ori	r20, 0x40	; 64
    1242:	65 e3       	ldi	r22, 0x35	; 53
    1244:	ce 01       	movw	r24, r28
    1246:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    124a:	1a c0       	rjmp	.+52     	; 0x1280 <_ZN12MCP2515Class9endPacketEv+0x116>
  } else {
    writeRegister(REG_TXBnDLC(n), _txLength);
    124c:	65 e3       	ldi	r22, 0x35	; 53
    124e:	ce 01       	movw	r24, r28
    1250:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
    1254:	7e 01       	movw	r14, r28
    1256:	89 e1       	ldi	r24, 0x19	; 25
    1258:	e8 0e       	add	r14, r24
    125a:	f1 1c       	adc	r15, r1

    for (int i = 0; i < _txLength; i++) {
    125c:	00 e0       	ldi	r16, 0x00	; 0
    125e:	10 e0       	ldi	r17, 0x00	; 0
    1260:	8f 89       	ldd	r24, Y+23	; 0x17
    1262:	98 8d       	ldd	r25, Y+24	; 0x18
    1264:	08 17       	cp	r16, r24
    1266:	19 07       	cpc	r17, r25
    1268:	5c f4       	brge	.+22     	; 0x1280 <_ZN12MCP2515Class9endPacketEv+0x116>
      writeRegister(REG_TXBnD0(n) + i, _txData[i]);
    126a:	f7 01       	movw	r30, r14
    126c:	41 91       	ld	r20, Z+
    126e:	7f 01       	movw	r14, r30
    1270:	66 e3       	ldi	r22, 0x36	; 54
    1272:	60 0f       	add	r22, r16
    1274:	ce 01       	movw	r24, r28
    1276:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>
  if (_txRtr) {
    writeRegister(REG_TXBnDLC(n), 0x40 | _txLength);
  } else {
    writeRegister(REG_TXBnDLC(n), _txLength);

    for (int i = 0; i < _txLength; i++) {
    127a:	0f 5f       	subi	r16, 0xFF	; 255
    127c:	1f 4f       	sbci	r17, 0xFF	; 255
    127e:	f0 cf       	rjmp	.-32     	; 0x1260 <_ZN12MCP2515Class9endPacketEv+0xf6>
      writeRegister(REG_TXBnD0(n) + i, _txData[i]);
    }
  }

  writeRegister(REG_TXBnCTRL(n), 0x08);
    1280:	48 e0       	ldi	r20, 0x08	; 8
    1282:	60 e3       	ldi	r22, 0x30	; 48
    1284:	ce 01       	movw	r24, r28
    1286:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN12MCP2515Class13writeRegisterEhh>

  bool aborted = false;
    128a:	10 e0       	ldi	r17, 0x00	; 0

  while (readRegister(REG_TXBnCTRL(n)) & 0x08) {
    128c:	60 e3       	ldi	r22, 0x30	; 48
    128e:	ce 01       	movw	r24, r28
    1290:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12MCP2515Class12readRegisterEh>
    1294:	83 ff       	sbrs	r24, 3
    1296:	10 c0       	rjmp	.+32     	; 0x12b8 <_ZN12MCP2515Class9endPacketEv+0x14e>
    if (readRegister(REG_TXBnCTRL(n)) & 0x10) {
    1298:	60 e3       	ldi	r22, 0x30	; 48
    129a:	ce 01       	movw	r24, r28
    129c:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12MCP2515Class12readRegisterEh>
    12a0:	84 ff       	sbrs	r24, 4
    12a2:	07 c0       	rjmp	.+14     	; 0x12b2 <_ZN12MCP2515Class9endPacketEv+0x148>
      // abort
      aborted = true;

      modifyRegister(REG_CANCTRL, 0x10, 0x10);
    12a4:	20 e1       	ldi	r18, 0x10	; 16
    12a6:	40 e1       	ldi	r20, 0x10	; 16
    12a8:	6f e0       	ldi	r22, 0x0F	; 15
    12aa:	ce 01       	movw	r24, r28
    12ac:	0e 94 c5 04 	call	0x98a	; 0x98a <_ZN12MCP2515Class14modifyRegisterEhhh>
  bool aborted = false;

  while (readRegister(REG_TXBnCTRL(n)) & 0x08) {
    if (readRegister(REG_TXBnCTRL(n)) & 0x10) {
      // abort
      aborted = true;
    12b0:	11 e0       	ldi	r17, 0x01	; 1

      modifyRegister(REG_CANCTRL, 0x10, 0x10);
    }

    yield();
    12b2:	0e 94 19 0c 	call	0x1832	; 0x1832 <yield>
    12b6:	ea cf       	rjmp	.-44     	; 0x128c <_ZN12MCP2515Class9endPacketEv+0x122>
  }

  if (aborted) {
    12b8:	11 23       	and	r17, r17
    12ba:	31 f0       	breq	.+12     	; 0x12c8 <_ZN12MCP2515Class9endPacketEv+0x15e>
    // clear abort command
    modifyRegister(REG_CANCTRL, 0x10, 0x00);
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	40 e1       	ldi	r20, 0x10	; 16
    12c0:	6f e0       	ldi	r22, 0x0F	; 15
    12c2:	ce 01       	movw	r24, r28
    12c4:	0e 94 c5 04 	call	0x98a	; 0x98a <_ZN12MCP2515Class14modifyRegisterEhhh>
  }

  modifyRegister(REG_CANINTF, FLAG_TXnIF(n), 0x00);
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	44 e0       	ldi	r20, 0x04	; 4
    12cc:	6c e2       	ldi	r22, 0x2C	; 44
    12ce:	ce 01       	movw	r24, r28
    12d0:	0e 94 c5 04 	call	0x98a	; 0x98a <_ZN12MCP2515Class14modifyRegisterEhhh>

  return (readRegister(REG_TXBnCTRL(n)) & 0x70) ? 0 : 1;
    12d4:	60 e3       	ldi	r22, 0x30	; 48
    12d6:	ce 01       	movw	r24, r28
    12d8:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN12MCP2515Class12readRegisterEh>
    12dc:	80 77       	andi	r24, 0x70	; 112
    12de:	31 e0       	ldi	r19, 0x01	; 1
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	09 f0       	breq	.+2      	; 0x12e6 <_ZN12MCP2515Class9endPacketEv+0x17c>
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	83 2f       	mov	r24, r19
    12e8:	92 2f       	mov	r25, r18
}
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	1f 91       	pop	r17
    12f0:	0f 91       	pop	r16
    12f2:	ff 90       	pop	r15
    12f4:	ef 90       	pop	r14
    12f6:	08 95       	ret

000012f8 <_ZN12MCP2515Class9onReceiveEPFviE>:

  return _rxDlc;
}

void MCP2515Class::onReceive(void(*callback)(int))
{
    12f8:	0f 93       	push	r16
    12fa:	1f 93       	push	r17
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	ec 01       	movw	r28, r24
    1302:	8b 01       	movw	r16, r22
  CANControllerClass::onReceive(callback);
    1304:	0e 94 4c 03 	call	0x698	; 0x698 <_ZN18CANControllerClass9onReceiveEPFviE>

  pinMode(_intPin, INPUT);
    1308:	60 e0       	ldi	r22, 0x00	; 0
    130a:	89 ad       	ldd	r24, Y+57	; 0x39
    130c:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <pinMode>
    1310:	89 ad       	ldd	r24, Y+57	; 0x39
    1312:	9a ad       	ldd	r25, Y+58	; 0x3a

  if (callback) {
    1314:	01 2b       	or	r16, r17
    1316:	11 f1       	breq	.+68     	; 0x135c <_ZN12MCP2515Class9onReceiveEPFviE+0x64>
    SPI.usingInterrupt(digitalPinToInterrupt(_intPin));
    1318:	82 30       	cpi	r24, 0x02	; 2
    131a:	91 05       	cpc	r25, r1
    131c:	21 f0       	breq	.+8      	; 0x1326 <_ZN12MCP2515Class9onReceiveEPFviE+0x2e>
    131e:	03 97       	sbiw	r24, 0x03	; 3
    1320:	21 f0       	breq	.+8      	; 0x132a <_ZN12MCP2515Class9onReceiveEPFviE+0x32>
    1322:	8f ef       	ldi	r24, 0xFF	; 255
    1324:	03 c0       	rjmp	.+6      	; 0x132c <_ZN12MCP2515Class9onReceiveEPFviE+0x34>
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	01 c0       	rjmp	.+2      	; 0x132c <_ZN12MCP2515Class9onReceiveEPFviE+0x34>
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	0e 94 16 0a 	call	0x142c	; 0x142c <_ZN8SPIClass14usingInterruptEh>
    attachInterrupt(digitalPinToInterrupt(_intPin), MCP2515Class::onInterrupt, LOW);
    1330:	89 ad       	ldd	r24, Y+57	; 0x39
    1332:	9a ad       	ldd	r25, Y+58	; 0x3a
    1334:	82 30       	cpi	r24, 0x02	; 2
    1336:	91 05       	cpc	r25, r1
    1338:	21 f0       	breq	.+8      	; 0x1342 <_ZN12MCP2515Class9onReceiveEPFviE+0x4a>
    133a:	03 97       	sbiw	r24, 0x03	; 3
    133c:	21 f0       	breq	.+8      	; 0x1346 <_ZN12MCP2515Class9onReceiveEPFviE+0x4e>
    133e:	8f ef       	ldi	r24, 0xFF	; 255
    1340:	03 c0       	rjmp	.+6      	; 0x1348 <_ZN12MCP2515Class9onReceiveEPFviE+0x50>
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	01 c0       	rjmp	.+2      	; 0x1348 <_ZN12MCP2515Class9onReceiveEPFviE+0x50>
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	40 e0       	ldi	r20, 0x00	; 0
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	61 ec       	ldi	r22, 0xC1	; 193
    134e:	74 e0       	ldi	r23, 0x04	; 4
    detachInterrupt(digitalPinToInterrupt(_intPin));
#ifdef SPI_HAS_NOTUSINGINTERRUPT
    SPI.notUsingInterrupt(digitalPinToInterrupt(_intPin));
#endif
  }
}
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16

  pinMode(_intPin, INPUT);

  if (callback) {
    SPI.usingInterrupt(digitalPinToInterrupt(_intPin));
    attachInterrupt(digitalPinToInterrupt(_intPin), MCP2515Class::onInterrupt, LOW);
    1358:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <attachInterrupt>
  } else {
    detachInterrupt(digitalPinToInterrupt(_intPin));
    135c:	82 30       	cpi	r24, 0x02	; 2
    135e:	91 05       	cpc	r25, r1
    1360:	21 f0       	breq	.+8      	; 0x136a <_ZN12MCP2515Class9onReceiveEPFviE+0x72>
    1362:	03 97       	sbiw	r24, 0x03	; 3
    1364:	21 f0       	breq	.+8      	; 0x136e <_ZN12MCP2515Class9onReceiveEPFviE+0x76>
    1366:	8f ef       	ldi	r24, 0xFF	; 255
    1368:	03 c0       	rjmp	.+6      	; 0x1370 <_ZN12MCP2515Class9onReceiveEPFviE+0x78>
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <_ZN12MCP2515Class9onReceiveEPFviE+0x78>
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <detachInterrupt>
#ifdef SPI_HAS_NOTUSINGINTERRUPT
    SPI.notUsingInterrupt(digitalPinToInterrupt(_intPin));
    1374:	89 ad       	ldd	r24, Y+57	; 0x39
    1376:	9a ad       	ldd	r25, Y+58	; 0x3a
    1378:	82 30       	cpi	r24, 0x02	; 2
    137a:	91 05       	cpc	r25, r1
    137c:	21 f0       	breq	.+8      	; 0x1386 <_ZN12MCP2515Class9onReceiveEPFviE+0x8e>
    137e:	03 97       	sbiw	r24, 0x03	; 3
    1380:	21 f0       	breq	.+8      	; 0x138a <_ZN12MCP2515Class9onReceiveEPFviE+0x92>
    1382:	8f ef       	ldi	r24, 0xFF	; 255
    1384:	03 c0       	rjmp	.+6      	; 0x138c <_ZN12MCP2515Class9onReceiveEPFviE+0x94>
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	01 c0       	rjmp	.+2      	; 0x138c <_ZN12MCP2515Class9onReceiveEPFviE+0x94>
    138a:	81 e0       	ldi	r24, 0x01	; 1
#endif
  }
}
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	1f 91       	pop	r17
    1392:	0f 91       	pop	r16
    SPI.usingInterrupt(digitalPinToInterrupt(_intPin));
    attachInterrupt(digitalPinToInterrupt(_intPin), MCP2515Class::onInterrupt, LOW);
  } else {
    detachInterrupt(digitalPinToInterrupt(_intPin));
#ifdef SPI_HAS_NOTUSINGINTERRUPT
    SPI.notUsingInterrupt(digitalPinToInterrupt(_intPin));
    1394:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <_ZN8SPIClass17notUsingInterruptEh>

00001398 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    1398:	cf 93       	push	r28
  uint8_t sreg = SREG;
    139a:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    139c:	f8 94       	cli
  if (!initialized) {
    139e:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <_ZN8SPIClass11initializedE>
    13a2:	81 11       	cpse	r24, r1
    13a4:	27 c0       	rjmp	.+78     	; 0x13f4 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    13a6:	ea e9       	ldi	r30, 0x9A	; 154
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    13ac:	e6 e8       	ldi	r30, 0x86	; 134
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    13b2:	e8 2f       	mov	r30, r24
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	ee 0f       	add	r30, r30
    13b8:	ff 1f       	adc	r31, r31
    13ba:	e2 55       	subi	r30, 0x52	; 82
    13bc:	ff 4f       	sbci	r31, 0xFF	; 255
    13be:	a5 91       	lpm	r26, Z+
    13c0:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    13c2:	ec 91       	ld	r30, X
    13c4:	e9 23       	and	r30, r25
    13c6:	21 f4       	brne	.+8      	; 0x13d0 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    13c8:	61 e0       	ldi	r22, 0x01	; 1
    13ca:	8a e0       	ldi	r24, 0x0A	; 10
    13cc:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    13d0:	61 e0       	ldi	r22, 0x01	; 1
    13d2:	8a e0       	ldi	r24, 0x0A	; 10
    13d4:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    13d8:	8c b5       	in	r24, 0x2c	; 44
    13da:	80 61       	ori	r24, 0x10	; 16
    13dc:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    13de:	8c b5       	in	r24, 0x2c	; 44
    13e0:	80 64       	ori	r24, 0x40	; 64
    13e2:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    13e4:	61 e0       	ldi	r22, 0x01	; 1
    13e6:	8d e0       	ldi	r24, 0x0D	; 13
    13e8:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <pinMode>
    pinMode(MOSI, OUTPUT);
    13ec:	61 e0       	ldi	r22, 0x01	; 1
    13ee:	8b e0       	ldi	r24, 0x0B	; 11
    13f0:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <pinMode>
  }
  initialized++; // reference count
    13f4:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <_ZN8SPIClass11initializedE>
    13f8:	8f 5f       	subi	r24, 0xFF	; 255
    13fa:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    13fe:	cf bf       	out	0x3f, r28	; 63
}
    1400:	cf 91       	pop	r28
    1402:	08 95       	ret

00001404 <_ZN8SPIClass3endEv>:

void SPIClass::end() {
  uint8_t sreg = SREG;
    1404:	9f b7       	in	r25, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    1406:	f8 94       	cli
  // Decrease the reference counter
  if (initialized)
    1408:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <_ZN8SPIClass11initializedE>
    140c:	88 23       	and	r24, r24
    140e:	19 f0       	breq	.+6      	; 0x1416 <_ZN8SPIClass3endEv+0x12>
    initialized--;
    1410:	81 50       	subi	r24, 0x01	; 1
    1412:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <_ZN8SPIClass11initializedE>
  // If there are no more references disable SPI
  if (!initialized) {
    1416:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <_ZN8SPIClass11initializedE>
    141a:	81 11       	cpse	r24, r1
    141c:	05 c0       	rjmp	.+10     	; 0x1428 <_ZN8SPIClass3endEv+0x24>
    SPCR &= ~_BV(SPE);
    141e:	8c b5       	in	r24, 0x2c	; 44
    1420:	8f 7b       	andi	r24, 0xBF	; 191
    1422:	8c bd       	out	0x2c, r24	; 44
    interruptMode = 0;
    1424:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <_ZN8SPIClass13interruptModeE>
    #ifdef SPI_TRANSACTION_MISMATCH_LED
    inTransactionFlag = 0;
    #endif
  }
  SREG = sreg;
    1428:	9f bf       	out	0x3f, r25	; 63
    142a:	08 95       	ret

0000142c <_ZN8SPIClass14usingInterruptEh>:
#endif

void SPIClass::usingInterrupt(uint8_t interruptNumber)
{
  uint8_t mask = 0;
  uint8_t sreg = SREG;
    142c:	9f b7       	in	r25, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    142e:	f8 94       	cli
  switch (interruptNumber) {
    1430:	88 23       	and	r24, r24
    1432:	49 f0       	breq	.+18     	; 0x1446 <_ZN8SPIClass14usingInterruptEh+0x1a>
    1434:	81 30       	cpi	r24, 0x01	; 1
    1436:	11 f4       	brne	.+4      	; 0x143c <_ZN8SPIClass14usingInterruptEh+0x10>
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
  #endif
  #ifdef SPI_INT1_MASK
  case 1: mask = SPI_INT1_MASK; break;
    1438:	82 e0       	ldi	r24, 0x02	; 2
    143a:	06 c0       	rjmp	.+12     	; 0x1448 <_ZN8SPIClass14usingInterruptEh+0x1c>
  #endif
  #ifdef SPI_INT7_MASK
  case 7: mask = SPI_INT7_MASK; break;
  #endif
  default:
    interruptMode = 2;
    143c:	82 e0       	ldi	r24, 0x02	; 2
    143e:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <_ZN8SPIClass13interruptModeE>
  #endif
#endif

void SPIClass::usingInterrupt(uint8_t interruptNumber)
{
  uint8_t mask = 0;
    1442:	80 e0       	ldi	r24, 0x00	; 0
  #ifdef SPI_INT7_MASK
  case 7: mask = SPI_INT7_MASK; break;
  #endif
  default:
    interruptMode = 2;
    break;
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <_ZN8SPIClass14usingInterruptEh+0x1c>
  uint8_t mask = 0;
  uint8_t sreg = SREG;
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
  switch (interruptNumber) {
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
    1446:	81 e0       	ldi	r24, 0x01	; 1
  #endif
  default:
    interruptMode = 2;
    break;
  }
  interruptMask |= mask;
    1448:	20 91 20 05 	lds	r18, 0x0520	; 0x800520 <_ZN8SPIClass13interruptMaskE>
    144c:	82 2b       	or	r24, r18
    144e:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <_ZN8SPIClass13interruptMaskE>
  if (!interruptMode)
    1452:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <_ZN8SPIClass13interruptModeE>
    1456:	81 11       	cpse	r24, r1
    1458:	03 c0       	rjmp	.+6      	; 0x1460 <_ZN8SPIClass14usingInterruptEh+0x34>
    interruptMode = 1;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <_ZN8SPIClass13interruptModeE>
  SREG = sreg;
    1460:	9f bf       	out	0x3f, r25	; 63
    1462:	08 95       	ret

00001464 <_ZN8SPIClass17notUsingInterruptEh>:
}

void SPIClass::notUsingInterrupt(uint8_t interruptNumber)
{
  // Once in mode 2 we can't go back to 0 without a proper reference count
  if (interruptMode == 2)
    1464:	90 91 21 05 	lds	r25, 0x0521	; 0x800521 <_ZN8SPIClass13interruptModeE>
    1468:	92 30       	cpi	r25, 0x02	; 2
    146a:	b1 f0       	breq	.+44     	; 0x1498 <_ZN8SPIClass17notUsingInterruptEh+0x34>
    return;
  uint8_t mask = 0;
  uint8_t sreg = SREG;
    146c:	2f b7       	in	r18, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    146e:	f8 94       	cli
  switch (interruptNumber) {
    1470:	88 23       	and	r24, r24
    1472:	21 f0       	breq	.+8      	; 0x147c <_ZN8SPIClass17notUsingInterruptEh+0x18>
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	21 f4       	brne	.+8      	; 0x1480 <_ZN8SPIClass17notUsingInterruptEh+0x1c>
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
  #endif
  #ifdef SPI_INT1_MASK
  case 1: mask = SPI_INT1_MASK; break;
    1478:	82 e0       	ldi	r24, 0x02	; 2
    147a:	03 c0       	rjmp	.+6      	; 0x1482 <_ZN8SPIClass17notUsingInterruptEh+0x1e>
  uint8_t mask = 0;
  uint8_t sreg = SREG;
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
  switch (interruptNumber) {
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	01 c0       	rjmp	.+2      	; 0x1482 <_ZN8SPIClass17notUsingInterruptEh+0x1e>
void SPIClass::notUsingInterrupt(uint8_t interruptNumber)
{
  // Once in mode 2 we can't go back to 0 without a proper reference count
  if (interruptMode == 2)
    return;
  uint8_t mask = 0;
    1480:	80 e0       	ldi	r24, 0x00	; 0
  #endif
  default:
    break;
    // this case can't be reached
  }
  interruptMask &= ~mask;
    1482:	80 95       	com	r24
    1484:	90 91 20 05 	lds	r25, 0x0520	; 0x800520 <_ZN8SPIClass13interruptMaskE>
    1488:	89 23       	and	r24, r25
    148a:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <_ZN8SPIClass13interruptMaskE>
  if (!interruptMask)
    148e:	81 11       	cpse	r24, r1
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <_ZN8SPIClass17notUsingInterruptEh+0x32>
    interruptMode = 0;
    1492:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <_ZN8SPIClass13interruptModeE>
  SREG = sreg;
    1496:	2f bf       	out	0x3f, r18	; 63
    1498:	08 95       	ret

0000149a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    149a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    149c:	91 8d       	ldd	r25, Z+25	; 0x19
    149e:	22 8d       	ldd	r18, Z+26	; 0x1a
    14a0:	89 2f       	mov	r24, r25
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	80 5c       	subi	r24, 0xC0	; 192
    14a6:	9f 4f       	sbci	r25, 0xFF	; 255
    14a8:	82 1b       	sub	r24, r18
    14aa:	91 09       	sbc	r25, r1
}
    14ac:	8f 73       	andi	r24, 0x3F	; 63
    14ae:	99 27       	eor	r25, r25
    14b0:	08 95       	ret

000014b2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    14b2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    14b4:	91 8d       	ldd	r25, Z+25	; 0x19
    14b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    14b8:	98 17       	cp	r25, r24
    14ba:	31 f0       	breq	.+12     	; 0x14c8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    14bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    14be:	e8 0f       	add	r30, r24
    14c0:	f1 1d       	adc	r31, r1
    14c2:	85 8d       	ldd	r24, Z+29	; 0x1d
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    14c8:	8f ef       	ldi	r24, 0xFF	; 255
    14ca:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    14cc:	08 95       	ret

000014ce <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    14ce:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    14d0:	91 8d       	ldd	r25, Z+25	; 0x19
    14d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    14d4:	98 17       	cp	r25, r24
    14d6:	61 f0       	breq	.+24     	; 0x14f0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    14d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    14da:	df 01       	movw	r26, r30
    14dc:	a8 0f       	add	r26, r24
    14de:	b1 1d       	adc	r27, r1
    14e0:	5d 96       	adiw	r26, 0x1d	; 29
    14e2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    14e4:	92 8d       	ldd	r25, Z+26	; 0x1a
    14e6:	9f 5f       	subi	r25, 0xFF	; 255
    14e8:	9f 73       	andi	r25, 0x3F	; 63
    14ea:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    14f0:	8f ef       	ldi	r24, 0xFF	; 255
    14f2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    14f4:	08 95       	ret

000014f6 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    14f6:	fc 01       	movw	r30, r24
    14f8:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
    14fa:	44 8d       	ldd	r20, Z+28	; 0x1c
    14fc:	25 2f       	mov	r18, r21
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	84 2f       	mov	r24, r20
    1502:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1504:	82 1b       	sub	r24, r18
    1506:	93 0b       	sbc	r25, r19
    1508:	54 17       	cp	r21, r20
    150a:	10 f0       	brcs	.+4      	; 0x1510 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    150c:	cf 96       	adiw	r24, 0x3f	; 63
    150e:	08 95       	ret
  return tail - head - 1;
    1510:	01 97       	sbiw	r24, 0x01	; 1
}
    1512:	08 95       	ret

00001514 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1514:	82 ee       	ldi	r24, 0xE2	; 226
    1516:	9b e0       	ldi	r25, 0x0B	; 11
    1518:	89 2b       	or	r24, r25
    151a:	49 f0       	breq	.+18     	; 0x152e <_Z14serialEventRunv+0x1a>
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	89 2b       	or	r24, r25
    1522:	29 f0       	breq	.+10     	; 0x152e <_Z14serialEventRunv+0x1a>
    1524:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <_Z17Serial0_availablev>
    1528:	81 11       	cpse	r24, r1
    152a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    152e:	08 95       	ret

00001530 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1530:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1532:	84 8d       	ldd	r24, Z+28	; 0x1c
    1534:	df 01       	movw	r26, r30
    1536:	a8 0f       	add	r26, r24
    1538:	b1 1d       	adc	r27, r1
    153a:	a3 5a       	subi	r26, 0xA3	; 163
    153c:	bf 4f       	sbci	r27, 0xFF	; 255
    153e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1540:	84 8d       	ldd	r24, Z+28	; 0x1c
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	01 96       	adiw	r24, 0x01	; 1
    1546:	8f 73       	andi	r24, 0x3F	; 63
    1548:	99 27       	eor	r25, r25
    154a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    154c:	a6 89       	ldd	r26, Z+22	; 0x16
    154e:	b7 89       	ldd	r27, Z+23	; 0x17
    1550:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1552:	a0 89       	ldd	r26, Z+16	; 0x10
    1554:	b1 89       	ldd	r27, Z+17	; 0x11
    1556:	8c 91       	ld	r24, X
    1558:	80 64       	ori	r24, 0x40	; 64
    155a:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    155c:	93 8d       	ldd	r25, Z+27	; 0x1b
    155e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1560:	98 13       	cpse	r25, r24
    1562:	06 c0       	rjmp	.+12     	; 0x1570 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1564:	02 88       	ldd	r0, Z+18	; 0x12
    1566:	f3 89       	ldd	r31, Z+19	; 0x13
    1568:	e0 2d       	mov	r30, r0
    156a:	80 81       	ld	r24, Z
    156c:	8f 7d       	andi	r24, 0xDF	; 223
    156e:	80 83       	st	Z, r24
    1570:	08 95       	ret

00001572 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1572:	ef 92       	push	r14
    1574:	ff 92       	push	r15
    1576:	0f 93       	push	r16
    1578:	1f 93       	push	r17
    157a:	cf 93       	push	r28
    157c:	df 93       	push	r29
    157e:	ec 01       	movw	r28, r24
  _written = true;
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1584:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1586:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1588:	98 13       	cpse	r25, r24
    158a:	05 c0       	rjmp	.+10     	; 0x1596 <_ZN14HardwareSerial5writeEh+0x24>
    158c:	e8 89       	ldd	r30, Y+16	; 0x10
    158e:	f9 89       	ldd	r31, Y+17	; 0x11
    1590:	80 81       	ld	r24, Z
    1592:	85 fd       	sbrc	r24, 5
    1594:	24 c0       	rjmp	.+72     	; 0x15de <_ZN14HardwareSerial5writeEh+0x6c>
    1596:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1598:	0b 8d       	ldd	r16, Y+27	; 0x1b
    159a:	10 e0       	ldi	r17, 0x00	; 0
    159c:	0f 5f       	subi	r16, 0xFF	; 255
    159e:	1f 4f       	sbci	r17, 0xFF	; 255
    15a0:	0f 73       	andi	r16, 0x3F	; 63
    15a2:	11 27       	eor	r17, r17
    15a4:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    15a6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15a8:	e8 12       	cpse	r14, r24
    15aa:	0c c0       	rjmp	.+24     	; 0x15c4 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	07 fc       	sbrc	r0, 7
    15b0:	fa cf       	rjmp	.-12     	; 0x15a6 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    15b2:	e8 89       	ldd	r30, Y+16	; 0x10
    15b4:	f9 89       	ldd	r31, Y+17	; 0x11
    15b6:	80 81       	ld	r24, Z
    15b8:	85 ff       	sbrs	r24, 5
    15ba:	f5 cf       	rjmp	.-22     	; 0x15a6 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    15bc:	ce 01       	movw	r24, r28
    15be:	0e 94 98 0a 	call	0x1530	; 0x1530 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    15c2:	f1 cf       	rjmp	.-30     	; 0x15a6 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    15c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15c6:	fe 01       	movw	r30, r28
    15c8:	e8 0f       	add	r30, r24
    15ca:	f1 1d       	adc	r31, r1
    15cc:	e3 5a       	subi	r30, 0xA3	; 163
    15ce:	ff 4f       	sbci	r31, 0xFF	; 255
    15d0:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    15d2:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    15d4:	ea 89       	ldd	r30, Y+18	; 0x12
    15d6:	fb 89       	ldd	r31, Y+19	; 0x13
    15d8:	80 81       	ld	r24, Z
    15da:	80 62       	ori	r24, 0x20	; 32
    15dc:	07 c0       	rjmp	.+14     	; 0x15ec <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    15de:	ee 89       	ldd	r30, Y+22	; 0x16
    15e0:	ff 89       	ldd	r31, Y+23	; 0x17
    15e2:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    15e4:	e8 89       	ldd	r30, Y+16	; 0x10
    15e6:	f9 89       	ldd	r31, Y+17	; 0x11
    15e8:	80 81       	ld	r24, Z
    15ea:	80 64       	ori	r24, 0x40	; 64
    15ec:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	1f 91       	pop	r17
    15f8:	0f 91       	pop	r16
    15fa:	ff 90       	pop	r15
    15fc:	ef 90       	pop	r14
    15fe:	08 95       	ret

00001600 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1600:	cf 93       	push	r28
    1602:	df 93       	push	r29
    1604:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1606:	88 8d       	ldd	r24, Y+24	; 0x18
    1608:	88 23       	and	r24, r24
    160a:	c9 f0       	breq	.+50     	; 0x163e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    160c:	ea 89       	ldd	r30, Y+18	; 0x12
    160e:	fb 89       	ldd	r31, Y+19	; 0x13
    1610:	80 81       	ld	r24, Z
    1612:	85 fd       	sbrc	r24, 5
    1614:	05 c0       	rjmp	.+10     	; 0x1620 <_ZN14HardwareSerial5flushEv+0x20>
    1616:	a8 89       	ldd	r26, Y+16	; 0x10
    1618:	b9 89       	ldd	r27, Y+17	; 0x11
    161a:	8c 91       	ld	r24, X
    161c:	86 fd       	sbrc	r24, 6
    161e:	0f c0       	rjmp	.+30     	; 0x163e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	07 fc       	sbrc	r0, 7
    1624:	f5 cf       	rjmp	.-22     	; 0x1610 <_ZN14HardwareSerial5flushEv+0x10>
    1626:	80 81       	ld	r24, Z
    1628:	85 ff       	sbrs	r24, 5
    162a:	f2 cf       	rjmp	.-28     	; 0x1610 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    162c:	a8 89       	ldd	r26, Y+16	; 0x10
    162e:	b9 89       	ldd	r27, Y+17	; 0x11
    1630:	8c 91       	ld	r24, X
    1632:	85 ff       	sbrs	r24, 5
    1634:	ed cf       	rjmp	.-38     	; 0x1610 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1636:	ce 01       	movw	r24, r28
    1638:	0e 94 98 0a 	call	0x1530	; 0x1530 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    163c:	e7 cf       	rjmp	.-50     	; 0x160c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	08 95       	ret

00001644 <_ZN14HardwareSerial5beginEmh>:
	begin(baud, SERIAL_8N1); 
}


void HardwareSerial::begin(unsigned long baud, byte config)
{
    1644:	cf 92       	push	r12
    1646:	df 92       	push	r13
    1648:	ef 92       	push	r14
    164a:	ff 92       	push	r15
    164c:	1f 93       	push	r17
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
    1652:	ec 01       	movw	r28, r24
    1654:	6a 01       	movw	r12, r20
    1656:	7b 01       	movw	r14, r22
    1658:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    165a:	e8 89       	ldd	r30, Y+16	; 0x10
    165c:	f9 89       	ldd	r31, Y+17	; 0x11
    165e:	82 e0       	ldi	r24, 0x02	; 2
    1660:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1662:	41 15       	cp	r20, r1
    1664:	51 4e       	sbci	r21, 0xE1	; 225
    1666:	61 05       	cpc	r22, r1
    1668:	71 05       	cpc	r23, r1
    166a:	b1 f0       	breq	.+44     	; 0x1698 <_ZN14HardwareSerial5beginEmh+0x54>


void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	79 e0       	ldi	r23, 0x09	; 9
    1670:	8d e3       	ldi	r24, 0x3D	; 61
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	a7 01       	movw	r20, r14
    1676:	96 01       	movw	r18, r12
    1678:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__udivmodsi4>
    167c:	da 01       	movw	r26, r20
    167e:	c9 01       	movw	r24, r18
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	a1 09       	sbc	r26, r1
    1684:	b1 09       	sbc	r27, r1
    1686:	b6 95       	lsr	r27
    1688:	a7 95       	ror	r26
    168a:	97 95       	ror	r25
    168c:	87 95       	ror	r24
    168e:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1690:	21 15       	cp	r18, r1
    1692:	80 e1       	ldi	r24, 0x10	; 16
    1694:	38 07       	cpc	r19, r24
    1696:	a8 f0       	brcs	.+42     	; 0x16c2 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1698:	e8 89       	ldd	r30, Y+16	; 0x10
    169a:	f9 89       	ldd	r31, Y+17	; 0x11
    169c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    169e:	60 e8       	ldi	r22, 0x80	; 128
    16a0:	74 e8       	ldi	r23, 0x84	; 132
    16a2:	8e e1       	ldi	r24, 0x1E	; 30
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	a7 01       	movw	r20, r14
    16a8:	96 01       	movw	r18, r12
    16aa:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__udivmodsi4>
    16ae:	da 01       	movw	r26, r20
    16b0:	c9 01       	movw	r24, r18
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	a1 09       	sbc	r26, r1
    16b6:	b1 09       	sbc	r27, r1
    16b8:	b6 95       	lsr	r27
    16ba:	a7 95       	ror	r26
    16bc:	97 95       	ror	r25
    16be:	87 95       	ror	r24
    16c0:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    16c2:	ec 85       	ldd	r30, Y+12	; 0x0c
    16c4:	fd 85       	ldd	r31, Y+13	; 0x0d
    16c6:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    16c8:	ee 85       	ldd	r30, Y+14	; 0x0e
    16ca:	ff 85       	ldd	r31, Y+15	; 0x0f
    16cc:	20 83       	st	Z, r18

  _written = false;
    16ce:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    16d0:	ec 89       	ldd	r30, Y+20	; 0x14
    16d2:	fd 89       	ldd	r31, Y+21	; 0x15
    16d4:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    16d6:	ea 89       	ldd	r30, Y+18	; 0x12
    16d8:	fb 89       	ldd	r31, Y+19	; 0x13
    16da:	80 81       	ld	r24, Z
    16dc:	80 61       	ori	r24, 0x10	; 16
    16de:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    16e0:	ea 89       	ldd	r30, Y+18	; 0x12
    16e2:	fb 89       	ldd	r31, Y+19	; 0x13
    16e4:	80 81       	ld	r24, Z
    16e6:	88 60       	ori	r24, 0x08	; 8
    16e8:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    16ea:	ea 89       	ldd	r30, Y+18	; 0x12
    16ec:	fb 89       	ldd	r31, Y+19	; 0x13
    16ee:	80 81       	ld	r24, Z
    16f0:	80 68       	ori	r24, 0x80	; 128
    16f2:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    16f4:	ea 89       	ldd	r30, Y+18	; 0x12
    16f6:	fb 89       	ldd	r31, Y+19	; 0x13
    16f8:	80 81       	ld	r24, Z
    16fa:	8f 7d       	andi	r24, 0xDF	; 223
    16fc:	80 83       	st	Z, r24
}
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	1f 91       	pop	r17
    1704:	ff 90       	pop	r15
    1706:	ef 90       	pop	r14
    1708:	df 90       	pop	r13
    170a:	cf 90       	pop	r12
    170c:	08 95       	ret

0000170e <_ZN14HardwareSerial5beginEm>:

// Public Methods //////////////////////////////////////////////////////////////
//selbst erstellt da inline Methoden irgendwie nicht immer funktionieren
void HardwareSerial::begin(unsigned long baud) 
{ 
	begin(baud, SERIAL_8N1); 
    170e:	26 e0       	ldi	r18, 0x06	; 6
    1710:	0c 94 22 0b 	jmp	0x1644	; 0x1644 <_ZN14HardwareSerial5beginEmh>

00001714 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1714:	1f 92       	push	r1
    1716:	0f 92       	push	r0
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	0f 92       	push	r0
    171c:	11 24       	eor	r1, r1
    171e:	2f 93       	push	r18
    1720:	8f 93       	push	r24
    1722:	9f 93       	push	r25
    1724:	ef 93       	push	r30
    1726:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1728:	e0 91 33 05 	lds	r30, 0x0533	; 0x800533 <Serial+0x10>
    172c:	f0 91 34 05 	lds	r31, 0x0534	; 0x800534 <Serial+0x11>
    1730:	80 81       	ld	r24, Z
    1732:	e0 91 39 05 	lds	r30, 0x0539	; 0x800539 <Serial+0x16>
    1736:	f0 91 3a 05 	lds	r31, 0x053A	; 0x80053a <Serial+0x17>
    173a:	82 fd       	sbrc	r24, 2
    173c:	12 c0       	rjmp	.+36     	; 0x1762 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    173e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1740:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <Serial+0x19>
    1744:	8f 5f       	subi	r24, 0xFF	; 255
    1746:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1748:	20 91 3d 05 	lds	r18, 0x053D	; 0x80053d <Serial+0x1a>
    174c:	82 17       	cp	r24, r18
    174e:	51 f0       	breq	.+20     	; 0x1764 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1750:	e0 91 3c 05 	lds	r30, 0x053C	; 0x80053c <Serial+0x19>
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	ed 5d       	subi	r30, 0xDD	; 221
    1758:	fa 4f       	sbci	r31, 0xFA	; 250
    175a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    175c:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <Serial+0x19>
    1760:	01 c0       	rjmp	.+2      	; 0x1764 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1762:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1764:	ff 91       	pop	r31
    1766:	ef 91       	pop	r30
    1768:	9f 91       	pop	r25
    176a:	8f 91       	pop	r24
    176c:	2f 91       	pop	r18
    176e:	0f 90       	pop	r0
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	0f 90       	pop	r0
    1774:	1f 90       	pop	r1
    1776:	18 95       	reti

00001778 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1778:	1f 92       	push	r1
    177a:	0f 92       	push	r0
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	0f 92       	push	r0
    1780:	11 24       	eor	r1, r1
    1782:	2f 93       	push	r18
    1784:	3f 93       	push	r19
    1786:	4f 93       	push	r20
    1788:	5f 93       	push	r21
    178a:	6f 93       	push	r22
    178c:	7f 93       	push	r23
    178e:	8f 93       	push	r24
    1790:	9f 93       	push	r25
    1792:	af 93       	push	r26
    1794:	bf 93       	push	r27
    1796:	ef 93       	push	r30
    1798:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    179a:	83 e2       	ldi	r24, 0x23	; 35
    179c:	95 e0       	ldi	r25, 0x05	; 5
    179e:	0e 94 98 0a 	call	0x1530	; 0x1530 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    17a2:	ff 91       	pop	r31
    17a4:	ef 91       	pop	r30
    17a6:	bf 91       	pop	r27
    17a8:	af 91       	pop	r26
    17aa:	9f 91       	pop	r25
    17ac:	8f 91       	pop	r24
    17ae:	7f 91       	pop	r23
    17b0:	6f 91       	pop	r22
    17b2:	5f 91       	pop	r21
    17b4:	4f 91       	pop	r20
    17b6:	3f 91       	pop	r19
    17b8:	2f 91       	pop	r18
    17ba:	0f 90       	pop	r0
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	0f 90       	pop	r0
    17c0:	1f 90       	pop	r1
    17c2:	18 95       	reti

000017c4 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    17c4:	83 e2       	ldi	r24, 0x23	; 35
    17c6:	95 e0       	ldi	r25, 0x05	; 5
    17c8:	0e 94 4d 0a 	call	0x149a	; 0x149a <_ZN14HardwareSerial9availableEv>
    17cc:	21 e0       	ldi	r18, 0x01	; 1
    17ce:	89 2b       	or	r24, r25
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <_Z17Serial0_availablev+0x10>
    17d2:	20 e0       	ldi	r18, 0x00	; 0
}
    17d4:	82 2f       	mov	r24, r18
    17d6:	08 95       	ret

000017d8 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    17d8:	e3 e2       	ldi	r30, 0x23	; 35
    17da:	f5 e0       	ldi	r31, 0x05	; 5
    17dc:	13 82       	std	Z+3, r1	; 0x03
    17de:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    17e0:	88 ee       	ldi	r24, 0xE8	; 232
    17e2:	93 e0       	ldi	r25, 0x03	; 3
    17e4:	a0 e0       	ldi	r26, 0x00	; 0
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	84 83       	std	Z+4, r24	; 0x04
    17ea:	95 83       	std	Z+5, r25	; 0x05
    17ec:	a6 83       	std	Z+6, r26	; 0x06
    17ee:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    17f0:	80 e7       	ldi	r24, 0x70	; 112
    17f2:	94 e0       	ldi	r25, 0x04	; 4
    17f4:	91 83       	std	Z+1, r25	; 0x01
    17f6:	80 83       	st	Z, r24
    17f8:	85 ec       	ldi	r24, 0xC5	; 197
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	95 87       	std	Z+13, r25	; 0x0d
    17fe:	84 87       	std	Z+12, r24	; 0x0c
    1800:	84 ec       	ldi	r24, 0xC4	; 196
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	97 87       	std	Z+15, r25	; 0x0f
    1806:	86 87       	std	Z+14, r24	; 0x0e
    1808:	80 ec       	ldi	r24, 0xC0	; 192
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	91 8b       	std	Z+17, r25	; 0x11
    180e:	80 8b       	std	Z+16, r24	; 0x10
    1810:	81 ec       	ldi	r24, 0xC1	; 193
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	93 8b       	std	Z+19, r25	; 0x13
    1816:	82 8b       	std	Z+18, r24	; 0x12
    1818:	82 ec       	ldi	r24, 0xC2	; 194
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	95 8b       	std	Z+21, r25	; 0x15
    181e:	84 8b       	std	Z+20, r24	; 0x14
    1820:	86 ec       	ldi	r24, 0xC6	; 198
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	97 8b       	std	Z+23, r25	; 0x17
    1826:	86 8b       	std	Z+22, r24	; 0x16
    1828:	11 8e       	std	Z+25, r1	; 0x19
    182a:	12 8e       	std	Z+26, r1	; 0x1a
    182c:	13 8e       	std	Z+27, r1	; 0x1b
    182e:	14 8e       	std	Z+28, r1	; 0x1c
    1830:	08 95       	ret

00001832 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1832:	08 95       	ret

00001834 <initVariant>:
    1834:	08 95       	ret

00001836 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1836:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <init>

	initVariant();
    183a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    183e:	0e 94 04 01 	call	0x208	; 0x208 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1842:	ca e8       	ldi	r28, 0x8A	; 138
    1844:	da e0       	ldi	r29, 0x0A	; 10
#endif
	
	setup();
    
	for (;;) {
		loop();
    1846:	0e 94 45 02 	call	0x48a	; 0x48a <loop>
		if (serialEventRun) serialEventRun();
    184a:	20 97       	sbiw	r28, 0x00	; 0
    184c:	e1 f3       	breq	.-8      	; 0x1846 <main+0x10>
    184e:	0e 94 8a 0a 	call	0x1514	; 0x1514 <_Z14serialEventRunv>
    1852:	f9 cf       	rjmp	.-14     	; 0x1846 <main+0x10>

00001854 <_ZdlPv>:
    1854:	0c 94 26 10 	jmp	0x204c	; 0x204c <free>

00001858 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1858:	cf 92       	push	r12
    185a:	df 92       	push	r13
    185c:	ef 92       	push	r14
    185e:	ff 92       	push	r15
    1860:	0f 93       	push	r16
    1862:	1f 93       	push	r17
    1864:	cf 93       	push	r28
    1866:	df 93       	push	r29
    1868:	6c 01       	movw	r12, r24
    186a:	7a 01       	movw	r14, r20
    186c:	8b 01       	movw	r16, r22
    186e:	c0 e0       	ldi	r28, 0x00	; 0
    1870:	d0 e0       	ldi	r29, 0x00	; 0
    1872:	ce 15       	cp	r28, r14
    1874:	df 05       	cpc	r29, r15
    1876:	81 f0       	breq	.+32     	; 0x1898 <_ZN5Print5writeEPKhj+0x40>
    1878:	d8 01       	movw	r26, r16
    187a:	6d 91       	ld	r22, X+
    187c:	8d 01       	movw	r16, r26
    187e:	d6 01       	movw	r26, r12
    1880:	ed 91       	ld	r30, X+
    1882:	fc 91       	ld	r31, X
    1884:	01 90       	ld	r0, Z+
    1886:	f0 81       	ld	r31, Z
    1888:	e0 2d       	mov	r30, r0
    188a:	c6 01       	movw	r24, r12
    188c:	09 95       	icall
    188e:	89 2b       	or	r24, r25
    1890:	11 f0       	breq	.+4      	; 0x1896 <_ZN5Print5writeEPKhj+0x3e>
    1892:	21 96       	adiw	r28, 0x01	; 1
    1894:	ee cf       	rjmp	.-36     	; 0x1872 <_ZN5Print5writeEPKhj+0x1a>
    1896:	7e 01       	movw	r14, r28
    1898:	c7 01       	movw	r24, r14
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	1f 91       	pop	r17
    18a0:	0f 91       	pop	r16
    18a2:	ff 90       	pop	r15
    18a4:	ef 90       	pop	r14
    18a6:	df 90       	pop	r13
    18a8:	cf 90       	pop	r12
    18aa:	08 95       	ret

000018ac <_ZN5Print5writeEPKc>:
    18ac:	61 15       	cp	r22, r1
    18ae:	71 05       	cpc	r23, r1
    18b0:	79 f0       	breq	.+30     	; 0x18d0 <_ZN5Print5writeEPKc+0x24>
    18b2:	fb 01       	movw	r30, r22
    18b4:	01 90       	ld	r0, Z+
    18b6:	00 20       	and	r0, r0
    18b8:	e9 f7       	brne	.-6      	; 0x18b4 <_ZN5Print5writeEPKc+0x8>
    18ba:	31 97       	sbiw	r30, 0x01	; 1
    18bc:	af 01       	movw	r20, r30
    18be:	46 1b       	sub	r20, r22
    18c0:	57 0b       	sbc	r21, r23
    18c2:	dc 01       	movw	r26, r24
    18c4:	ed 91       	ld	r30, X+
    18c6:	fc 91       	ld	r31, X
    18c8:	02 80       	ldd	r0, Z+2	; 0x02
    18ca:	f3 81       	ldd	r31, Z+3	; 0x03
    18cc:	e0 2d       	mov	r30, r0
    18ce:	09 94       	ijmp
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	08 95       	ret

000018d6 <_ZN5Print5printEPKc>:
    18d6:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <_ZN5Print5writeEPKc>

000018da <_ZN5Print5printEc>:
    18da:	dc 01       	movw	r26, r24
    18dc:	ed 91       	ld	r30, X+
    18de:	fc 91       	ld	r31, X
    18e0:	01 90       	ld	r0, Z+
    18e2:	f0 81       	ld	r31, Z
    18e4:	e0 2d       	mov	r30, r0
    18e6:	09 94       	ijmp

000018e8 <_ZN5Print7printlnEv>:
    18e8:	6e e7       	ldi	r22, 0x7E	; 126
    18ea:	74 e0       	ldi	r23, 0x04	; 4
    18ec:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <_ZN5Print5writeEPKc>

000018f0 <_ZN5Print7printlnEPKc>:
    18f0:	0f 93       	push	r16
    18f2:	1f 93       	push	r17
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
    18f8:	ec 01       	movw	r28, r24
    18fa:	0e 94 56 0c 	call	0x18ac	; 0x18ac <_ZN5Print5writeEPKc>
    18fe:	8c 01       	movw	r16, r24
    1900:	ce 01       	movw	r24, r28
    1902:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN5Print7printlnEv>
    1906:	80 0f       	add	r24, r16
    1908:	91 1f       	adc	r25, r17
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	1f 91       	pop	r17
    1910:	0f 91       	pop	r16
    1912:	08 95       	ret

00001914 <_ZN5Print11printNumberEmh>:
    1914:	8f 92       	push	r8
    1916:	9f 92       	push	r9
    1918:	af 92       	push	r10
    191a:	bf 92       	push	r11
    191c:	ef 92       	push	r14
    191e:	ff 92       	push	r15
    1920:	0f 93       	push	r16
    1922:	1f 93       	push	r17
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	a1 97       	sbiw	r28, 0x21	; 33
    192e:	0f b6       	in	r0, 0x3f	; 63
    1930:	f8 94       	cli
    1932:	de bf       	out	0x3e, r29	; 62
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	cd bf       	out	0x3d, r28	; 61
    1938:	7c 01       	movw	r14, r24
    193a:	fa 01       	movw	r30, r20
    193c:	cb 01       	movw	r24, r22
    193e:	19 a2       	std	Y+33, r1	; 0x21
    1940:	22 30       	cpi	r18, 0x02	; 2
    1942:	08 f4       	brcc	.+2      	; 0x1946 <_ZN5Print11printNumberEmh+0x32>
    1944:	2a e0       	ldi	r18, 0x0A	; 10
    1946:	8e 01       	movw	r16, r28
    1948:	0f 5d       	subi	r16, 0xDF	; 223
    194a:	1f 4f       	sbci	r17, 0xFF	; 255
    194c:	82 2e       	mov	r8, r18
    194e:	91 2c       	mov	r9, r1
    1950:	a1 2c       	mov	r10, r1
    1952:	b1 2c       	mov	r11, r1
    1954:	bf 01       	movw	r22, r30
    1956:	a5 01       	movw	r20, r10
    1958:	94 01       	movw	r18, r8
    195a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__udivmodsi4>
    195e:	f9 01       	movw	r30, r18
    1960:	ca 01       	movw	r24, r20
    1962:	01 50       	subi	r16, 0x01	; 1
    1964:	11 09       	sbc	r17, r1
    1966:	6a 30       	cpi	r22, 0x0A	; 10
    1968:	10 f4       	brcc	.+4      	; 0x196e <_ZN5Print11printNumberEmh+0x5a>
    196a:	60 5d       	subi	r22, 0xD0	; 208
    196c:	01 c0       	rjmp	.+2      	; 0x1970 <_ZN5Print11printNumberEmh+0x5c>
    196e:	69 5c       	subi	r22, 0xC9	; 201
    1970:	d8 01       	movw	r26, r16
    1972:	6c 93       	st	X, r22
    1974:	23 2b       	or	r18, r19
    1976:	24 2b       	or	r18, r20
    1978:	25 2b       	or	r18, r21
    197a:	61 f7       	brne	.-40     	; 0x1954 <_ZN5Print11printNumberEmh+0x40>
    197c:	b8 01       	movw	r22, r16
    197e:	c7 01       	movw	r24, r14
    1980:	0e 94 56 0c 	call	0x18ac	; 0x18ac <_ZN5Print5writeEPKc>
    1984:	a1 96       	adiw	r28, 0x21	; 33
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	1f 91       	pop	r17
    1996:	0f 91       	pop	r16
    1998:	ff 90       	pop	r15
    199a:	ef 90       	pop	r14
    199c:	bf 90       	pop	r11
    199e:	af 90       	pop	r10
    19a0:	9f 90       	pop	r9
    19a2:	8f 90       	pop	r8
    19a4:	08 95       	ret

000019a6 <_ZN5Print5printEmi>:
    19a6:	21 15       	cp	r18, r1
    19a8:	31 05       	cpc	r19, r1
    19aa:	41 f4       	brne	.+16     	; 0x19bc <_ZN5Print5printEmi+0x16>
    19ac:	dc 01       	movw	r26, r24
    19ae:	ed 91       	ld	r30, X+
    19b0:	fc 91       	ld	r31, X
    19b2:	01 90       	ld	r0, Z+
    19b4:	f0 81       	ld	r31, Z
    19b6:	e0 2d       	mov	r30, r0
    19b8:	64 2f       	mov	r22, r20
    19ba:	09 94       	ijmp
    19bc:	0c 94 8a 0c 	jmp	0x1914	; 0x1914 <_ZN5Print11printNumberEmh>

000019c0 <_ZN5Print5printEhi>:
    19c0:	9a 01       	movw	r18, r20
    19c2:	46 2f       	mov	r20, r22
    19c4:	50 e0       	ldi	r21, 0x00	; 0
    19c6:	60 e0       	ldi	r22, 0x00	; 0
    19c8:	70 e0       	ldi	r23, 0x00	; 0
    19ca:	0c 94 d3 0c 	jmp	0x19a6	; 0x19a6 <_ZN5Print5printEmi>

000019ce <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    19ce:	0f 93       	push	r16
    19d0:	1f 93       	push	r17
    19d2:	cf 93       	push	r28
    19d4:	df 93       	push	r29
    19d6:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    19d8:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <_ZN5Print5printEmi>
    19dc:	8c 01       	movw	r16, r24
  n += println();
    19de:	ce 01       	movw	r24, r28
    19e0:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN5Print7printlnEv>
  return n;
}
    19e4:	80 0f       	add	r24, r16
    19e6:	91 1f       	adc	r25, r17
    19e8:	df 91       	pop	r29
    19ea:	cf 91       	pop	r28
    19ec:	1f 91       	pop	r17
    19ee:	0f 91       	pop	r16
    19f0:	08 95       	ret

000019f2 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    19f2:	cf 92       	push	r12
    19f4:	df 92       	push	r13
    19f6:	ef 92       	push	r14
    19f8:	ff 92       	push	r15
    19fa:	0f 93       	push	r16
    19fc:	1f 93       	push	r17
    19fe:	cf 93       	push	r28
    1a00:	df 93       	push	r29
  if (base == 0) {
    1a02:	21 15       	cp	r18, r1
    1a04:	31 05       	cpc	r19, r1
    1a06:	81 f4       	brne	.+32     	; 0x1a28 <_ZN5Print5printEli+0x36>
    return write(n);
    1a08:	dc 01       	movw	r26, r24
    1a0a:	ed 91       	ld	r30, X+
    1a0c:	fc 91       	ld	r31, X
    1a0e:	01 90       	ld	r0, Z+
    1a10:	f0 81       	ld	r31, Z
    1a12:	e0 2d       	mov	r30, r0
    1a14:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1a16:	df 91       	pop	r29
    1a18:	cf 91       	pop	r28
    1a1a:	1f 91       	pop	r17
    1a1c:	0f 91       	pop	r16
    1a1e:	ff 90       	pop	r15
    1a20:	ef 90       	pop	r14
    1a22:	df 90       	pop	r13
    1a24:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    1a26:	09 94       	ijmp
  } else if (base == 10) {
    1a28:	2a 30       	cpi	r18, 0x0A	; 10
    1a2a:	31 05       	cpc	r19, r1
    1a2c:	01 f5       	brne	.+64     	; 0x1a6e <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    1a2e:	77 ff       	sbrs	r23, 7
    1a30:	1d c0       	rjmp	.+58     	; 0x1a6c <_ZN5Print5printEli+0x7a>
    1a32:	6a 01       	movw	r12, r20
    1a34:	7b 01       	movw	r14, r22
    1a36:	ec 01       	movw	r28, r24
      int t = print('-');
    1a38:	6d e2       	ldi	r22, 0x2D	; 45
    1a3a:	0e 94 6d 0c 	call	0x18da	; 0x18da <_ZN5Print5printEc>
    1a3e:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    1a40:	44 27       	eor	r20, r20
    1a42:	55 27       	eor	r21, r21
    1a44:	ba 01       	movw	r22, r20
    1a46:	4c 19       	sub	r20, r12
    1a48:	5d 09       	sbc	r21, r13
    1a4a:	6e 09       	sbc	r22, r14
    1a4c:	7f 09       	sbc	r23, r15
    1a4e:	2a e0       	ldi	r18, 0x0A	; 10
    1a50:	ce 01       	movw	r24, r28
    1a52:	0e 94 8a 0c 	call	0x1914	; 0x1914 <_ZN5Print11printNumberEmh>
    1a56:	80 0f       	add	r24, r16
    1a58:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	1f 91       	pop	r17
    1a60:	0f 91       	pop	r16
    1a62:	ff 90       	pop	r15
    1a64:	ef 90       	pop	r14
    1a66:	df 90       	pop	r13
    1a68:	cf 90       	pop	r12
    1a6a:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1a6c:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    1a6e:	df 91       	pop	r29
    1a70:	cf 91       	pop	r28
    1a72:	1f 91       	pop	r17
    1a74:	0f 91       	pop	r16
    1a76:	ff 90       	pop	r15
    1a78:	ef 90       	pop	r14
    1a7a:	df 90       	pop	r13
    1a7c:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    1a7e:	0c 94 8a 0c 	jmp	0x1914	; 0x1914 <_ZN5Print11printNumberEmh>

00001a82 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    1a82:	9a 01       	movw	r18, r20
  return print((long) n, base);
    1a84:	ab 01       	movw	r20, r22
    1a86:	77 0f       	add	r23, r23
    1a88:	66 0b       	sbc	r22, r22
    1a8a:	77 0b       	sbc	r23, r23
    1a8c:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <_ZN5Print5printEli>

00001a90 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    1a90:	0f 93       	push	r16
    1a92:	1f 93       	push	r17
    1a94:	cf 93       	push	r28
    1a96:	df 93       	push	r29
    1a98:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    1a9a:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <_ZN5Print5printEii>
    1a9e:	8c 01       	movw	r16, r24
  n += println();
    1aa0:	ce 01       	movw	r24, r28
    1aa2:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN5Print7printlnEv>
  return n;
}
    1aa6:	80 0f       	add	r24, r16
    1aa8:	91 1f       	adc	r25, r17
    1aaa:	df 91       	pop	r29
    1aac:	cf 91       	pop	r28
    1aae:	1f 91       	pop	r17
    1ab0:	0f 91       	pop	r16
    1ab2:	08 95       	ret

00001ab4 <_ZN6Stream9timedReadEv>:
    value = -value;
  if(isFraction)
    return value * fraction;
  else
    return value;
}
    1ab4:	0f 93       	push	r16
    1ab6:	1f 93       	push	r17
    1ab8:	cf 93       	push	r28
    1aba:	df 93       	push	r29
    1abc:	ec 01       	movw	r28, r24
    1abe:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <millis>
    1ac2:	68 87       	std	Y+8, r22	; 0x08
    1ac4:	79 87       	std	Y+9, r23	; 0x09
    1ac6:	8a 87       	std	Y+10, r24	; 0x0a
    1ac8:	9b 87       	std	Y+11, r25	; 0x0b
    1aca:	e8 81       	ld	r30, Y
    1acc:	f9 81       	ldd	r31, Y+1	; 0x01
    1ace:	02 84       	ldd	r0, Z+10	; 0x0a
    1ad0:	f3 85       	ldd	r31, Z+11	; 0x0b
    1ad2:	e0 2d       	mov	r30, r0
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	09 95       	icall
    1ad8:	97 ff       	sbrs	r25, 7
    1ada:	17 c0       	rjmp	.+46     	; 0x1b0a <_ZN6Stream9timedReadEv+0x56>
    1adc:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <millis>
    1ae0:	08 85       	ldd	r16, Y+8	; 0x08
    1ae2:	19 85       	ldd	r17, Y+9	; 0x09
    1ae4:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ae6:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	80 1b       	sub	r24, r16
    1aee:	91 0b       	sbc	r25, r17
    1af0:	a2 0b       	sbc	r26, r18
    1af2:	b3 0b       	sbc	r27, r19
    1af4:	0c 81       	ldd	r16, Y+4	; 0x04
    1af6:	1d 81       	ldd	r17, Y+5	; 0x05
    1af8:	2e 81       	ldd	r18, Y+6	; 0x06
    1afa:	3f 81       	ldd	r19, Y+7	; 0x07
    1afc:	80 17       	cp	r24, r16
    1afe:	91 07       	cpc	r25, r17
    1b00:	a2 07       	cpc	r26, r18
    1b02:	b3 07       	cpc	r27, r19
    1b04:	10 f3       	brcs	.-60     	; 0x1aca <_ZN6Stream9timedReadEv+0x16>
    1b06:	8f ef       	ldi	r24, 0xFF	; 255
    1b08:	9f ef       	ldi	r25, 0xFF	; 255
    1b0a:	df 91       	pop	r29
    1b0c:	cf 91       	pop	r28
    1b0e:	1f 91       	pop	r17
    1b10:	0f 91       	pop	r16
    1b12:	08 95       	ret

00001b14 <_ZN6Stream10setTimeoutEm>:
    1b14:	fc 01       	movw	r30, r24
    1b16:	44 83       	std	Z+4, r20	; 0x04
    1b18:	55 83       	std	Z+5, r21	; 0x05
    1b1a:	66 83       	std	Z+6, r22	; 0x06
    1b1c:	77 83       	std	Z+7, r23	; 0x07
    1b1e:	08 95       	ret

00001b20 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
    1b20:	cf 92       	push	r12
    1b22:	df 92       	push	r13
    1b24:	ef 92       	push	r14
    1b26:	ff 92       	push	r15
    1b28:	0f 93       	push	r16
    1b2a:	1f 93       	push	r17
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	6c 01       	movw	r12, r24
    1b32:	7a 01       	movw	r14, r20
    1b34:	8b 01       	movw	r16, r22
  size_t count = 0;
    1b36:	c0 e0       	ldi	r28, 0x00	; 0
    1b38:	d0 e0       	ldi	r29, 0x00	; 0
  while (count < length) {
    1b3a:	ce 15       	cp	r28, r14
    1b3c:	df 05       	cpc	r29, r15
    1b3e:	59 f0       	breq	.+22     	; 0x1b56 <_ZN6Stream9readBytesEPcj+0x36>
    int c = timedRead();
    1b40:	c6 01       	movw	r24, r12
    1b42:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
    1b46:	97 fd       	sbrc	r25, 7
    1b48:	05 c0       	rjmp	.+10     	; 0x1b54 <_ZN6Stream9readBytesEPcj+0x34>
    *buffer++ = (char)c;
    1b4a:	f8 01       	movw	r30, r16
    1b4c:	81 93       	st	Z+, r24
    1b4e:	8f 01       	movw	r16, r30
    count++;
    1b50:	21 96       	adiw	r28, 0x01	; 1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
    1b52:	f3 cf       	rjmp	.-26     	; 0x1b3a <_ZN6Stream9readBytesEPcj+0x1a>
    1b54:	7e 01       	movw	r14, r28
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
    1b56:	c7 01       	movw	r24, r14
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	1f 91       	pop	r17
    1b5e:	0f 91       	pop	r16
    1b60:	ff 90       	pop	r15
    1b62:	ef 90       	pop	r14
    1b64:	df 90       	pop	r13
    1b66:	cf 90       	pop	r12
    1b68:	08 95       	ret

00001b6a <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
    1b6a:	08 95       	ret

00001b6c <attachInterrupt>:
#endif
};
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    1b6c:	82 30       	cpi	r24, 0x02	; 2
    1b6e:	e8 f4       	brcc	.+58     	; 0x1baa <attachInterrupt+0x3e>
    intFunc[interruptNum] = userFunc;
    1b70:	e8 2f       	mov	r30, r24
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	ee 0f       	add	r30, r30
    1b76:	ff 1f       	adc	r31, r31
    1b78:	ea 57       	subi	r30, 0x7A	; 122
    1b7a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b7c:	71 83       	std	Z+1, r23	; 0x01
    1b7e:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    1b80:	81 30       	cpi	r24, 0x01	; 1
    1b82:	41 f0       	breq	.+16     	; 0x1b94 <attachInterrupt+0x28>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    1b84:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1b88:	8c 7f       	andi	r24, 0xFC	; 252
    1b8a:	48 2b       	or	r20, r24
    1b8c:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
      EIMSK |= (1 << INT0);
    1b90:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    1b92:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    1b94:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1b98:	83 7f       	andi	r24, 0xF3	; 243
    1b9a:	44 0f       	add	r20, r20
    1b9c:	55 1f       	adc	r21, r21
    1b9e:	44 0f       	add	r20, r20
    1ba0:	55 1f       	adc	r21, r21
    1ba2:	48 2b       	or	r20, r24
    1ba4:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
      EIMSK |= (1 << INT1);
    1ba8:	e9 9a       	sbi	0x1d, 1	; 29
    1baa:	08 95       	ret

00001bac <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    1bac:	82 30       	cpi	r24, 0x02	; 2
    1bae:	78 f4       	brcc	.+30     	; 0x1bce <detachInterrupt+0x22>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    1bb0:	81 30       	cpi	r24, 0x01	; 1
    1bb2:	11 f0       	breq	.+4      	; 0x1bb8 <detachInterrupt+0xc>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    1bb4:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
    1bb6:	01 c0       	rjmp	.+2      	; 0x1bba <detachInterrupt+0xe>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    1bb8:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    1bba:	e8 2f       	mov	r30, r24
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	ee 0f       	add	r30, r30
    1bc0:	ff 1f       	adc	r31, r31
    1bc2:	ea 57       	subi	r30, 0x7A	; 122
    1bc4:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc6:	85 eb       	ldi	r24, 0xB5	; 181
    1bc8:	9d e0       	ldi	r25, 0x0D	; 13
    1bca:	91 83       	std	Z+1, r25	; 0x01
    1bcc:	80 83       	st	Z, r24
    1bce:	08 95       	ret

00001bd0 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    1bd0:	1f 92       	push	r1
    1bd2:	0f 92       	push	r0
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	0f 92       	push	r0
    1bd8:	11 24       	eor	r1, r1
    1bda:	2f 93       	push	r18
    1bdc:	3f 93       	push	r19
    1bde:	4f 93       	push	r20
    1be0:	5f 93       	push	r21
    1be2:	6f 93       	push	r22
    1be4:	7f 93       	push	r23
    1be6:	8f 93       	push	r24
    1be8:	9f 93       	push	r25
    1bea:	af 93       	push	r26
    1bec:	bf 93       	push	r27
    1bee:	ef 93       	push	r30
    1bf0:	ff 93       	push	r31
    1bf2:	e0 91 86 01 	lds	r30, 0x0186	; 0x800186 <intFunc>
    1bf6:	f0 91 87 01 	lds	r31, 0x0187	; 0x800187 <intFunc+0x1>
    1bfa:	09 95       	icall
    1bfc:	ff 91       	pop	r31
    1bfe:	ef 91       	pop	r30
    1c00:	bf 91       	pop	r27
    1c02:	af 91       	pop	r26
    1c04:	9f 91       	pop	r25
    1c06:	8f 91       	pop	r24
    1c08:	7f 91       	pop	r23
    1c0a:	6f 91       	pop	r22
    1c0c:	5f 91       	pop	r21
    1c0e:	4f 91       	pop	r20
    1c10:	3f 91       	pop	r19
    1c12:	2f 91       	pop	r18
    1c14:	0f 90       	pop	r0
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	0f 90       	pop	r0
    1c1a:	1f 90       	pop	r1
    1c1c:	18 95       	reti

00001c1e <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    1c1e:	1f 92       	push	r1
    1c20:	0f 92       	push	r0
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	0f 92       	push	r0
    1c26:	11 24       	eor	r1, r1
    1c28:	2f 93       	push	r18
    1c2a:	3f 93       	push	r19
    1c2c:	4f 93       	push	r20
    1c2e:	5f 93       	push	r21
    1c30:	6f 93       	push	r22
    1c32:	7f 93       	push	r23
    1c34:	8f 93       	push	r24
    1c36:	9f 93       	push	r25
    1c38:	af 93       	push	r26
    1c3a:	bf 93       	push	r27
    1c3c:	ef 93       	push	r30
    1c3e:	ff 93       	push	r31
    1c40:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <intFunc+0x2>
    1c44:	f0 91 89 01 	lds	r31, 0x0189	; 0x800189 <intFunc+0x3>
    1c48:	09 95       	icall
    1c4a:	ff 91       	pop	r31
    1c4c:	ef 91       	pop	r30
    1c4e:	bf 91       	pop	r27
    1c50:	af 91       	pop	r26
    1c52:	9f 91       	pop	r25
    1c54:	8f 91       	pop	r24
    1c56:	7f 91       	pop	r23
    1c58:	6f 91       	pop	r22
    1c5a:	5f 91       	pop	r21
    1c5c:	4f 91       	pop	r20
    1c5e:	3f 91       	pop	r19
    1c60:	2f 91       	pop	r18
    1c62:	0f 90       	pop	r0
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	0f 90       	pop	r0
    1c68:	1f 90       	pop	r1
    1c6a:	18 95       	reti

00001c6c <__vector_16>:
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1c6c:	1f 92       	push	r1
    1c6e:	0f 92       	push	r0
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	0f 92       	push	r0
    1c74:	11 24       	eor	r1, r1
    1c76:	2f 93       	push	r18
    1c78:	3f 93       	push	r19
    1c7a:	8f 93       	push	r24
    1c7c:	9f 93       	push	r25
    1c7e:	af 93       	push	r26
    1c80:	bf 93       	push	r27
    1c82:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <timer0_millis>
    1c86:	90 91 c2 05 	lds	r25, 0x05C2	; 0x8005c2 <timer0_millis+0x1>
    1c8a:	a0 91 c3 05 	lds	r26, 0x05C3	; 0x8005c3 <timer0_millis+0x2>
    1c8e:	b0 91 c4 05 	lds	r27, 0x05C4	; 0x8005c4 <timer0_millis+0x3>
    1c92:	30 91 c0 05 	lds	r19, 0x05C0	; 0x8005c0 <timer0_fract>
    1c96:	23 e0       	ldi	r18, 0x03	; 3
    1c98:	23 0f       	add	r18, r19
    1c9a:	2d 37       	cpi	r18, 0x7D	; 125
    1c9c:	20 f4       	brcc	.+8      	; 0x1ca6 <__vector_16+0x3a>
    1c9e:	01 96       	adiw	r24, 0x01	; 1
    1ca0:	a1 1d       	adc	r26, r1
    1ca2:	b1 1d       	adc	r27, r1
    1ca4:	05 c0       	rjmp	.+10     	; 0x1cb0 <__vector_16+0x44>
    1ca6:	26 e8       	ldi	r18, 0x86	; 134
    1ca8:	23 0f       	add	r18, r19
    1caa:	02 96       	adiw	r24, 0x02	; 2
    1cac:	a1 1d       	adc	r26, r1
    1cae:	b1 1d       	adc	r27, r1
    1cb0:	20 93 c0 05 	sts	0x05C0, r18	; 0x8005c0 <timer0_fract>
    1cb4:	80 93 c1 05 	sts	0x05C1, r24	; 0x8005c1 <timer0_millis>
    1cb8:	90 93 c2 05 	sts	0x05C2, r25	; 0x8005c2 <timer0_millis+0x1>
    1cbc:	a0 93 c3 05 	sts	0x05C3, r26	; 0x8005c3 <timer0_millis+0x2>
    1cc0:	b0 93 c4 05 	sts	0x05C4, r27	; 0x8005c4 <timer0_millis+0x3>
    1cc4:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <timer0_overflow_count>
    1cc8:	90 91 c6 05 	lds	r25, 0x05C6	; 0x8005c6 <timer0_overflow_count+0x1>
    1ccc:	a0 91 c7 05 	lds	r26, 0x05C7	; 0x8005c7 <timer0_overflow_count+0x2>
    1cd0:	b0 91 c8 05 	lds	r27, 0x05C8	; 0x8005c8 <timer0_overflow_count+0x3>
    1cd4:	01 96       	adiw	r24, 0x01	; 1
    1cd6:	a1 1d       	adc	r26, r1
    1cd8:	b1 1d       	adc	r27, r1
    1cda:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <timer0_overflow_count>
    1cde:	90 93 c6 05 	sts	0x05C6, r25	; 0x8005c6 <timer0_overflow_count+0x1>
    1ce2:	a0 93 c7 05 	sts	0x05C7, r26	; 0x8005c7 <timer0_overflow_count+0x2>
    1ce6:	b0 93 c8 05 	sts	0x05C8, r27	; 0x8005c8 <timer0_overflow_count+0x3>
    1cea:	bf 91       	pop	r27
    1cec:	af 91       	pop	r26
    1cee:	9f 91       	pop	r25
    1cf0:	8f 91       	pop	r24
    1cf2:	3f 91       	pop	r19
    1cf4:	2f 91       	pop	r18
    1cf6:	0f 90       	pop	r0
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	0f 90       	pop	r0
    1cfc:	1f 90       	pop	r1
    1cfe:	18 95       	reti

00001d00 <millis>:
    1d00:	2f b7       	in	r18, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	60 91 c1 05 	lds	r22, 0x05C1	; 0x8005c1 <timer0_millis>
    1d08:	70 91 c2 05 	lds	r23, 0x05C2	; 0x8005c2 <timer0_millis+0x1>
    1d0c:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <timer0_millis+0x2>
    1d10:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <timer0_millis+0x3>
    1d14:	2f bf       	out	0x3f, r18	; 63
    1d16:	08 95       	ret

00001d18 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1d18:	82 30       	cpi	r24, 0x02	; 2
    1d1a:	91 05       	cpc	r25, r1
    1d1c:	38 f0       	brcs	.+14     	; 0x1d2c <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    1d1e:	88 0f       	add	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    1d26:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	f1 f7       	brne	.-4      	; 0x1d28 <delayMicroseconds+0x10>
    1d2c:	08 95       	ret

00001d2e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1d2e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1d30:	84 b5       	in	r24, 0x24	; 36
    1d32:	82 60       	ori	r24, 0x02	; 2
    1d34:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1d36:	84 b5       	in	r24, 0x24	; 36
    1d38:	81 60       	ori	r24, 0x01	; 1
    1d3a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1d3c:	85 b5       	in	r24, 0x25	; 37
    1d3e:	82 60       	ori	r24, 0x02	; 2
    1d40:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1d42:	85 b5       	in	r24, 0x25	; 37
    1d44:	81 60       	ori	r24, 0x01	; 1
    1d46:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1d48:	ee e6       	ldi	r30, 0x6E	; 110
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	81 60       	ori	r24, 0x01	; 1
    1d50:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1d52:	e1 e8       	ldi	r30, 0x81	; 129
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1d58:	80 81       	ld	r24, Z
    1d5a:	82 60       	ori	r24, 0x02	; 2
    1d5c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1d5e:	80 81       	ld	r24, Z
    1d60:	81 60       	ori	r24, 0x01	; 1
    1d62:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1d64:	e0 e8       	ldi	r30, 0x80	; 128
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	81 60       	ori	r24, 0x01	; 1
    1d6c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1d6e:	e1 eb       	ldi	r30, 0xB1	; 177
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	84 60       	ori	r24, 0x04	; 4
    1d76:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1d78:	e0 eb       	ldi	r30, 0xB0	; 176
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	81 60       	ori	r24, 0x01	; 1
    1d80:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1d82:	ea e7       	ldi	r30, 0x7A	; 122
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	84 60       	ori	r24, 0x04	; 4
    1d8a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1d8c:	80 81       	ld	r24, Z
    1d8e:	82 60       	ori	r24, 0x02	; 2
    1d90:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1d92:	80 81       	ld	r24, Z
    1d94:	81 60       	ori	r24, 0x01	; 1
    1d96:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1d98:	80 81       	ld	r24, Z
    1d9a:	80 68       	ori	r24, 0x80	; 128
    1d9c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1d9e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1da2:	08 95       	ret

00001da4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1da4:	83 30       	cpi	r24, 0x03	; 3
    1da6:	81 f0       	breq	.+32     	; 0x1dc8 <turnOffPWM+0x24>
    1da8:	28 f4       	brcc	.+10     	; 0x1db4 <turnOffPWM+0x10>
    1daa:	81 30       	cpi	r24, 0x01	; 1
    1dac:	99 f0       	breq	.+38     	; 0x1dd4 <turnOffPWM+0x30>
    1dae:	82 30       	cpi	r24, 0x02	; 2
    1db0:	a1 f0       	breq	.+40     	; 0x1dda <turnOffPWM+0x36>
    1db2:	08 95       	ret
    1db4:	87 30       	cpi	r24, 0x07	; 7
    1db6:	a9 f0       	breq	.+42     	; 0x1de2 <turnOffPWM+0x3e>
    1db8:	88 30       	cpi	r24, 0x08	; 8
    1dba:	b9 f0       	breq	.+46     	; 0x1dea <turnOffPWM+0x46>
    1dbc:	84 30       	cpi	r24, 0x04	; 4
    1dbe:	d1 f4       	brne	.+52     	; 0x1df4 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1dc0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1dc4:	8f 7d       	andi	r24, 0xDF	; 223
    1dc6:	03 c0       	rjmp	.+6      	; 0x1dce <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1dc8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1dcc:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1dce:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1dd2:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1dd4:	84 b5       	in	r24, 0x24	; 36
    1dd6:	8f 77       	andi	r24, 0x7F	; 127
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1dda:	84 b5       	in	r24, 0x24	; 36
    1ddc:	8f 7d       	andi	r24, 0xDF	; 223
    1dde:	84 bd       	out	0x24, r24	; 36
    1de0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1de2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1de6:	8f 77       	andi	r24, 0x7F	; 127
    1de8:	03 c0       	rjmp	.+6      	; 0x1df0 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1dea:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1dee:	8f 7d       	andi	r24, 0xDF	; 223
    1df0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1df4:	08 95       	ret

00001df6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	e4 58       	subi	r30, 0x84	; 132
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1e04:	fc 01       	movw	r30, r24
    1e06:	e0 57       	subi	r30, 0x70	; 112
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1e0c:	88 23       	and	r24, r24
    1e0e:	61 f1       	breq	.+88     	; 0x1e68 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	88 0f       	add	r24, r24
    1e14:	99 1f       	adc	r25, r25
    1e16:	fc 01       	movw	r30, r24
    1e18:	e2 55       	subi	r30, 0x52	; 82
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	c5 91       	lpm	r28, Z+
    1e1e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1e20:	fc 01       	movw	r30, r24
    1e22:	ec 55       	subi	r30, 0x5C	; 92
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	a5 91       	lpm	r26, Z+
    1e28:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1e2a:	61 11       	cpse	r22, r1
    1e2c:	09 c0       	rjmp	.+18     	; 0x1e40 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1e2e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1e30:	f8 94       	cli
		*reg &= ~bit;
    1e32:	88 81       	ld	r24, Y
    1e34:	20 95       	com	r18
    1e36:	82 23       	and	r24, r18
    1e38:	88 83       	st	Y, r24
		*out &= ~bit;
    1e3a:	ec 91       	ld	r30, X
    1e3c:	2e 23       	and	r18, r30
    1e3e:	0b c0       	rjmp	.+22     	; 0x1e56 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1e40:	62 30       	cpi	r22, 0x02	; 2
    1e42:	61 f4       	brne	.+24     	; 0x1e5c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1e44:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1e46:	f8 94       	cli
		*reg &= ~bit;
    1e48:	88 81       	ld	r24, Y
    1e4a:	32 2f       	mov	r19, r18
    1e4c:	30 95       	com	r19
    1e4e:	83 23       	and	r24, r19
    1e50:	88 83       	st	Y, r24
		*out |= bit;
    1e52:	ec 91       	ld	r30, X
    1e54:	2e 2b       	or	r18, r30
    1e56:	2c 93       	st	X, r18
		SREG = oldSREG;
    1e58:	9f bf       	out	0x3f, r25	; 63
    1e5a:	06 c0       	rjmp	.+12     	; 0x1e68 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1e5c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1e5e:	f8 94       	cli
		*reg |= bit;
    1e60:	e8 81       	ld	r30, Y
    1e62:	2e 2b       	or	r18, r30
    1e64:	28 83       	st	Y, r18
		SREG = oldSREG;
    1e66:	8f bf       	out	0x3f, r24	; 63
	}
}
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	08 95       	ret

00001e6e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1e6e:	1f 93       	push	r17
    1e70:	cf 93       	push	r28
    1e72:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1e74:	28 2f       	mov	r18, r24
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	f9 01       	movw	r30, r18
    1e7a:	e8 59       	subi	r30, 0x98	; 152
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1e80:	f9 01       	movw	r30, r18
    1e82:	e4 58       	subi	r30, 0x84	; 132
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1e88:	f9 01       	movw	r30, r18
    1e8a:	e0 57       	subi	r30, 0x70	; 112
    1e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1e90:	cc 23       	and	r28, r28
    1e92:	c1 f0       	breq	.+48     	; 0x1ec4 <digitalWrite+0x56>
    1e94:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1e96:	81 11       	cpse	r24, r1
    1e98:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <turnOffPWM>

	out = portOutputRegister(port);
    1e9c:	ec 2f       	mov	r30, r28
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	ee 0f       	add	r30, r30
    1ea2:	ff 1f       	adc	r31, r31
    1ea4:	ec 55       	subi	r30, 0x5C	; 92
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	a5 91       	lpm	r26, Z+
    1eaa:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1eac:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1eae:	f8 94       	cli

	if (val == LOW) {
    1eb0:	11 11       	cpse	r17, r1
    1eb2:	04 c0       	rjmp	.+8      	; 0x1ebc <digitalWrite+0x4e>
		*out &= ~bit;
    1eb4:	8c 91       	ld	r24, X
    1eb6:	d0 95       	com	r29
    1eb8:	d8 23       	and	r29, r24
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1ebc:	ec 91       	ld	r30, X
    1ebe:	de 2b       	or	r29, r30
    1ec0:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1ec2:	9f bf       	out	0x3f, r25	; 63
}
    1ec4:	df 91       	pop	r29
    1ec6:	cf 91       	pop	r28
    1ec8:	1f 91       	pop	r17
    1eca:	08 95       	ret

00001ecc <__udivmodsi4>:
    1ecc:	a1 e2       	ldi	r26, 0x21	; 33
    1ece:	1a 2e       	mov	r1, r26
    1ed0:	aa 1b       	sub	r26, r26
    1ed2:	bb 1b       	sub	r27, r27
    1ed4:	fd 01       	movw	r30, r26
    1ed6:	0d c0       	rjmp	.+26     	; 0x1ef2 <__udivmodsi4_ep>

00001ed8 <__udivmodsi4_loop>:
    1ed8:	aa 1f       	adc	r26, r26
    1eda:	bb 1f       	adc	r27, r27
    1edc:	ee 1f       	adc	r30, r30
    1ede:	ff 1f       	adc	r31, r31
    1ee0:	a2 17       	cp	r26, r18
    1ee2:	b3 07       	cpc	r27, r19
    1ee4:	e4 07       	cpc	r30, r20
    1ee6:	f5 07       	cpc	r31, r21
    1ee8:	20 f0       	brcs	.+8      	; 0x1ef2 <__udivmodsi4_ep>
    1eea:	a2 1b       	sub	r26, r18
    1eec:	b3 0b       	sbc	r27, r19
    1eee:	e4 0b       	sbc	r30, r20
    1ef0:	f5 0b       	sbc	r31, r21

00001ef2 <__udivmodsi4_ep>:
    1ef2:	66 1f       	adc	r22, r22
    1ef4:	77 1f       	adc	r23, r23
    1ef6:	88 1f       	adc	r24, r24
    1ef8:	99 1f       	adc	r25, r25
    1efa:	1a 94       	dec	r1
    1efc:	69 f7       	brne	.-38     	; 0x1ed8 <__udivmodsi4_loop>
    1efe:	60 95       	com	r22
    1f00:	70 95       	com	r23
    1f02:	80 95       	com	r24
    1f04:	90 95       	com	r25
    1f06:	9b 01       	movw	r18, r22
    1f08:	ac 01       	movw	r20, r24
    1f0a:	bd 01       	movw	r22, r26
    1f0c:	cf 01       	movw	r24, r30
    1f0e:	08 95       	ret

00001f10 <__tablejump2__>:
    1f10:	ee 0f       	add	r30, r30
    1f12:	ff 1f       	adc	r31, r31
    1f14:	05 90       	lpm	r0, Z+
    1f16:	f4 91       	lpm	r31, Z
    1f18:	e0 2d       	mov	r30, r0
    1f1a:	09 94       	ijmp

00001f1c <malloc>:
    1f1c:	0f 93       	push	r16
    1f1e:	1f 93       	push	r17
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	82 30       	cpi	r24, 0x02	; 2
    1f26:	91 05       	cpc	r25, r1
    1f28:	10 f4       	brcc	.+4      	; 0x1f2e <malloc+0x12>
    1f2a:	82 e0       	ldi	r24, 0x02	; 2
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	e0 91 cb 05 	lds	r30, 0x05CB	; 0x8005cb <__flp>
    1f32:	f0 91 cc 05 	lds	r31, 0x05CC	; 0x8005cc <__flp+0x1>
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	a0 e0       	ldi	r26, 0x00	; 0
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	30 97       	sbiw	r30, 0x00	; 0
    1f40:	19 f1       	breq	.+70     	; 0x1f88 <malloc+0x6c>
    1f42:	40 81       	ld	r20, Z
    1f44:	51 81       	ldd	r21, Z+1	; 0x01
    1f46:	02 81       	ldd	r16, Z+2	; 0x02
    1f48:	13 81       	ldd	r17, Z+3	; 0x03
    1f4a:	48 17       	cp	r20, r24
    1f4c:	59 07       	cpc	r21, r25
    1f4e:	c8 f0       	brcs	.+50     	; 0x1f82 <malloc+0x66>
    1f50:	84 17       	cp	r24, r20
    1f52:	95 07       	cpc	r25, r21
    1f54:	69 f4       	brne	.+26     	; 0x1f70 <malloc+0x54>
    1f56:	10 97       	sbiw	r26, 0x00	; 0
    1f58:	31 f0       	breq	.+12     	; 0x1f66 <malloc+0x4a>
    1f5a:	12 96       	adiw	r26, 0x02	; 2
    1f5c:	0c 93       	st	X, r16
    1f5e:	12 97       	sbiw	r26, 0x02	; 2
    1f60:	13 96       	adiw	r26, 0x03	; 3
    1f62:	1c 93       	st	X, r17
    1f64:	27 c0       	rjmp	.+78     	; 0x1fb4 <malloc+0x98>
    1f66:	00 93 cb 05 	sts	0x05CB, r16	; 0x8005cb <__flp>
    1f6a:	10 93 cc 05 	sts	0x05CC, r17	; 0x8005cc <__flp+0x1>
    1f6e:	22 c0       	rjmp	.+68     	; 0x1fb4 <malloc+0x98>
    1f70:	21 15       	cp	r18, r1
    1f72:	31 05       	cpc	r19, r1
    1f74:	19 f0       	breq	.+6      	; 0x1f7c <malloc+0x60>
    1f76:	42 17       	cp	r20, r18
    1f78:	53 07       	cpc	r21, r19
    1f7a:	18 f4       	brcc	.+6      	; 0x1f82 <malloc+0x66>
    1f7c:	9a 01       	movw	r18, r20
    1f7e:	bd 01       	movw	r22, r26
    1f80:	ef 01       	movw	r28, r30
    1f82:	df 01       	movw	r26, r30
    1f84:	f8 01       	movw	r30, r16
    1f86:	db cf       	rjmp	.-74     	; 0x1f3e <malloc+0x22>
    1f88:	21 15       	cp	r18, r1
    1f8a:	31 05       	cpc	r19, r1
    1f8c:	f9 f0       	breq	.+62     	; 0x1fcc <malloc+0xb0>
    1f8e:	28 1b       	sub	r18, r24
    1f90:	39 0b       	sbc	r19, r25
    1f92:	24 30       	cpi	r18, 0x04	; 4
    1f94:	31 05       	cpc	r19, r1
    1f96:	80 f4       	brcc	.+32     	; 0x1fb8 <malloc+0x9c>
    1f98:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f9c:	61 15       	cp	r22, r1
    1f9e:	71 05       	cpc	r23, r1
    1fa0:	21 f0       	breq	.+8      	; 0x1faa <malloc+0x8e>
    1fa2:	fb 01       	movw	r30, r22
    1fa4:	93 83       	std	Z+3, r25	; 0x03
    1fa6:	82 83       	std	Z+2, r24	; 0x02
    1fa8:	04 c0       	rjmp	.+8      	; 0x1fb2 <malloc+0x96>
    1faa:	90 93 cc 05 	sts	0x05CC, r25	; 0x8005cc <__flp+0x1>
    1fae:	80 93 cb 05 	sts	0x05CB, r24	; 0x8005cb <__flp>
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	32 96       	adiw	r30, 0x02	; 2
    1fb6:	44 c0       	rjmp	.+136    	; 0x2040 <malloc+0x124>
    1fb8:	fe 01       	movw	r30, r28
    1fba:	e2 0f       	add	r30, r18
    1fbc:	f3 1f       	adc	r31, r19
    1fbe:	81 93       	st	Z+, r24
    1fc0:	91 93       	st	Z+, r25
    1fc2:	22 50       	subi	r18, 0x02	; 2
    1fc4:	31 09       	sbc	r19, r1
    1fc6:	39 83       	std	Y+1, r19	; 0x01
    1fc8:	28 83       	st	Y, r18
    1fca:	3a c0       	rjmp	.+116    	; 0x2040 <malloc+0x124>
    1fcc:	20 91 c9 05 	lds	r18, 0x05C9	; 0x8005c9 <__brkval>
    1fd0:	30 91 ca 05 	lds	r19, 0x05CA	; 0x8005ca <__brkval+0x1>
    1fd4:	23 2b       	or	r18, r19
    1fd6:	41 f4       	brne	.+16     	; 0x1fe8 <malloc+0xcc>
    1fd8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1fdc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1fe0:	30 93 ca 05 	sts	0x05CA, r19	; 0x8005ca <__brkval+0x1>
    1fe4:	20 93 c9 05 	sts	0x05C9, r18	; 0x8005c9 <__brkval>
    1fe8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1fec:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1ff0:	21 15       	cp	r18, r1
    1ff2:	31 05       	cpc	r19, r1
    1ff4:	41 f4       	brne	.+16     	; 0x2006 <malloc+0xea>
    1ff6:	2d b7       	in	r18, 0x3d	; 61
    1ff8:	3e b7       	in	r19, 0x3e	; 62
    1ffa:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1ffe:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2002:	24 1b       	sub	r18, r20
    2004:	35 0b       	sbc	r19, r21
    2006:	e0 91 c9 05 	lds	r30, 0x05C9	; 0x8005c9 <__brkval>
    200a:	f0 91 ca 05 	lds	r31, 0x05CA	; 0x8005ca <__brkval+0x1>
    200e:	e2 17       	cp	r30, r18
    2010:	f3 07       	cpc	r31, r19
    2012:	a0 f4       	brcc	.+40     	; 0x203c <malloc+0x120>
    2014:	2e 1b       	sub	r18, r30
    2016:	3f 0b       	sbc	r19, r31
    2018:	28 17       	cp	r18, r24
    201a:	39 07       	cpc	r19, r25
    201c:	78 f0       	brcs	.+30     	; 0x203c <malloc+0x120>
    201e:	ac 01       	movw	r20, r24
    2020:	4e 5f       	subi	r20, 0xFE	; 254
    2022:	5f 4f       	sbci	r21, 0xFF	; 255
    2024:	24 17       	cp	r18, r20
    2026:	35 07       	cpc	r19, r21
    2028:	48 f0       	brcs	.+18     	; 0x203c <malloc+0x120>
    202a:	4e 0f       	add	r20, r30
    202c:	5f 1f       	adc	r21, r31
    202e:	50 93 ca 05 	sts	0x05CA, r21	; 0x8005ca <__brkval+0x1>
    2032:	40 93 c9 05 	sts	0x05C9, r20	; 0x8005c9 <__brkval>
    2036:	81 93       	st	Z+, r24
    2038:	91 93       	st	Z+, r25
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <malloc+0x124>
    203c:	e0 e0       	ldi	r30, 0x00	; 0
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	cf 01       	movw	r24, r30
    2042:	df 91       	pop	r29
    2044:	cf 91       	pop	r28
    2046:	1f 91       	pop	r17
    2048:	0f 91       	pop	r16
    204a:	08 95       	ret

0000204c <free>:
    204c:	cf 93       	push	r28
    204e:	df 93       	push	r29
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	09 f4       	brne	.+2      	; 0x2056 <free+0xa>
    2054:	81 c0       	rjmp	.+258    	; 0x2158 <free+0x10c>
    2056:	fc 01       	movw	r30, r24
    2058:	32 97       	sbiw	r30, 0x02	; 2
    205a:	13 82       	std	Z+3, r1	; 0x03
    205c:	12 82       	std	Z+2, r1	; 0x02
    205e:	a0 91 cb 05 	lds	r26, 0x05CB	; 0x8005cb <__flp>
    2062:	b0 91 cc 05 	lds	r27, 0x05CC	; 0x8005cc <__flp+0x1>
    2066:	10 97       	sbiw	r26, 0x00	; 0
    2068:	81 f4       	brne	.+32     	; 0x208a <free+0x3e>
    206a:	20 81       	ld	r18, Z
    206c:	31 81       	ldd	r19, Z+1	; 0x01
    206e:	82 0f       	add	r24, r18
    2070:	93 1f       	adc	r25, r19
    2072:	20 91 c9 05 	lds	r18, 0x05C9	; 0x8005c9 <__brkval>
    2076:	30 91 ca 05 	lds	r19, 0x05CA	; 0x8005ca <__brkval+0x1>
    207a:	28 17       	cp	r18, r24
    207c:	39 07       	cpc	r19, r25
    207e:	51 f5       	brne	.+84     	; 0x20d4 <free+0x88>
    2080:	f0 93 ca 05 	sts	0x05CA, r31	; 0x8005ca <__brkval+0x1>
    2084:	e0 93 c9 05 	sts	0x05C9, r30	; 0x8005c9 <__brkval>
    2088:	67 c0       	rjmp	.+206    	; 0x2158 <free+0x10c>
    208a:	ed 01       	movw	r28, r26
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	ce 17       	cp	r28, r30
    2092:	df 07       	cpc	r29, r31
    2094:	40 f4       	brcc	.+16     	; 0x20a6 <free+0x5a>
    2096:	4a 81       	ldd	r20, Y+2	; 0x02
    2098:	5b 81       	ldd	r21, Y+3	; 0x03
    209a:	9e 01       	movw	r18, r28
    209c:	41 15       	cp	r20, r1
    209e:	51 05       	cpc	r21, r1
    20a0:	f1 f0       	breq	.+60     	; 0x20de <free+0x92>
    20a2:	ea 01       	movw	r28, r20
    20a4:	f5 cf       	rjmp	.-22     	; 0x2090 <free+0x44>
    20a6:	d3 83       	std	Z+3, r29	; 0x03
    20a8:	c2 83       	std	Z+2, r28	; 0x02
    20aa:	40 81       	ld	r20, Z
    20ac:	51 81       	ldd	r21, Z+1	; 0x01
    20ae:	84 0f       	add	r24, r20
    20b0:	95 1f       	adc	r25, r21
    20b2:	c8 17       	cp	r28, r24
    20b4:	d9 07       	cpc	r29, r25
    20b6:	59 f4       	brne	.+22     	; 0x20ce <free+0x82>
    20b8:	88 81       	ld	r24, Y
    20ba:	99 81       	ldd	r25, Y+1	; 0x01
    20bc:	84 0f       	add	r24, r20
    20be:	95 1f       	adc	r25, r21
    20c0:	02 96       	adiw	r24, 0x02	; 2
    20c2:	91 83       	std	Z+1, r25	; 0x01
    20c4:	80 83       	st	Z, r24
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	9b 81       	ldd	r25, Y+3	; 0x03
    20ca:	93 83       	std	Z+3, r25	; 0x03
    20cc:	82 83       	std	Z+2, r24	; 0x02
    20ce:	21 15       	cp	r18, r1
    20d0:	31 05       	cpc	r19, r1
    20d2:	29 f4       	brne	.+10     	; 0x20de <free+0x92>
    20d4:	f0 93 cc 05 	sts	0x05CC, r31	; 0x8005cc <__flp+0x1>
    20d8:	e0 93 cb 05 	sts	0x05CB, r30	; 0x8005cb <__flp>
    20dc:	3d c0       	rjmp	.+122    	; 0x2158 <free+0x10c>
    20de:	e9 01       	movw	r28, r18
    20e0:	fb 83       	std	Y+3, r31	; 0x03
    20e2:	ea 83       	std	Y+2, r30	; 0x02
    20e4:	49 91       	ld	r20, Y+
    20e6:	59 91       	ld	r21, Y+
    20e8:	c4 0f       	add	r28, r20
    20ea:	d5 1f       	adc	r29, r21
    20ec:	ec 17       	cp	r30, r28
    20ee:	fd 07       	cpc	r31, r29
    20f0:	61 f4       	brne	.+24     	; 0x210a <free+0xbe>
    20f2:	80 81       	ld	r24, Z
    20f4:	91 81       	ldd	r25, Z+1	; 0x01
    20f6:	84 0f       	add	r24, r20
    20f8:	95 1f       	adc	r25, r21
    20fa:	02 96       	adiw	r24, 0x02	; 2
    20fc:	e9 01       	movw	r28, r18
    20fe:	99 83       	std	Y+1, r25	; 0x01
    2100:	88 83       	st	Y, r24
    2102:	82 81       	ldd	r24, Z+2	; 0x02
    2104:	93 81       	ldd	r25, Z+3	; 0x03
    2106:	9b 83       	std	Y+3, r25	; 0x03
    2108:	8a 83       	std	Y+2, r24	; 0x02
    210a:	e0 e0       	ldi	r30, 0x00	; 0
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	12 96       	adiw	r26, 0x02	; 2
    2110:	8d 91       	ld	r24, X+
    2112:	9c 91       	ld	r25, X
    2114:	13 97       	sbiw	r26, 0x03	; 3
    2116:	00 97       	sbiw	r24, 0x00	; 0
    2118:	19 f0       	breq	.+6      	; 0x2120 <free+0xd4>
    211a:	fd 01       	movw	r30, r26
    211c:	dc 01       	movw	r26, r24
    211e:	f7 cf       	rjmp	.-18     	; 0x210e <free+0xc2>
    2120:	8d 91       	ld	r24, X+
    2122:	9c 91       	ld	r25, X
    2124:	11 97       	sbiw	r26, 0x01	; 1
    2126:	9d 01       	movw	r18, r26
    2128:	2e 5f       	subi	r18, 0xFE	; 254
    212a:	3f 4f       	sbci	r19, 0xFF	; 255
    212c:	82 0f       	add	r24, r18
    212e:	93 1f       	adc	r25, r19
    2130:	20 91 c9 05 	lds	r18, 0x05C9	; 0x8005c9 <__brkval>
    2134:	30 91 ca 05 	lds	r19, 0x05CA	; 0x8005ca <__brkval+0x1>
    2138:	28 17       	cp	r18, r24
    213a:	39 07       	cpc	r19, r25
    213c:	69 f4       	brne	.+26     	; 0x2158 <free+0x10c>
    213e:	30 97       	sbiw	r30, 0x00	; 0
    2140:	29 f4       	brne	.+10     	; 0x214c <free+0x100>
    2142:	10 92 cc 05 	sts	0x05CC, r1	; 0x8005cc <__flp+0x1>
    2146:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <__flp>
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <free+0x104>
    214c:	13 82       	std	Z+3, r1	; 0x03
    214e:	12 82       	std	Z+2, r1	; 0x02
    2150:	b0 93 ca 05 	sts	0x05CA, r27	; 0x8005ca <__brkval+0x1>
    2154:	a0 93 c9 05 	sts	0x05C9, r26	; 0x8005c9 <__brkval>
    2158:	df 91       	pop	r29
    215a:	cf 91       	pop	r28
    215c:	08 95       	ret

0000215e <memcpy>:
    215e:	fb 01       	movw	r30, r22
    2160:	dc 01       	movw	r26, r24
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <memcpy+0xa>
    2164:	01 90       	ld	r0, Z+
    2166:	0d 92       	st	X+, r0
    2168:	41 50       	subi	r20, 0x01	; 1
    216a:	50 40       	sbci	r21, 0x00	; 0
    216c:	d8 f7       	brcc	.-10     	; 0x2164 <memcpy+0x6>
    216e:	08 95       	ret

00002170 <__do_global_dtors>:
    2170:	10 e0       	ldi	r17, 0x00	; 0
    2172:	ce e5       	ldi	r28, 0x5E	; 94
    2174:	d0 e0       	ldi	r29, 0x00	; 0
    2176:	04 c0       	rjmp	.+8      	; 0x2180 <__do_global_dtors+0x10>
    2178:	fe 01       	movw	r30, r28
    217a:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__tablejump2__>
    217e:	21 96       	adiw	r28, 0x01	; 1
    2180:	cf 35       	cpi	r28, 0x5F	; 95
    2182:	d1 07       	cpc	r29, r17
    2184:	c9 f7       	brne	.-14     	; 0x2178 <__do_global_dtors+0x8>
    2186:	f8 94       	cli

00002188 <__stop_program>:
    2188:	ff cf       	rjmp	.-2      	; 0x2188 <__stop_program>
