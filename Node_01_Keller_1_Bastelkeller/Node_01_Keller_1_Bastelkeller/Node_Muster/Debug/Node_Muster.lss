
Node_Muster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002e2  00800100  00002100  000021b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002100  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013f  008003e2  008003e2  00002496  2**0
                  ALLOC
  3 .eeprom       00000008  00810000  00810000  00002496  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000249e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024d0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000618  00000000  00000000  00002510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001243c  00000000  00000000  00002b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002f35  00000000  00000000  00014f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000037cf  00000000  00000000  00017e99  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001348  00000000  00000000  0001b668  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000303d  00000000  00000000  0001c9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000064fc  00000000  00000000  0001f9ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005e8  00000000  00000000  00025ee9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__dtors_end>
       4:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__vector_1>
       8:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__vector_2>
       c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <__vector_16>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 45 0b 	jmp	0x168a	; 0x168a <__vector_18>
      4c:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__vector_19>
      50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
      b8:	2b 08       	sbc	r2, r11
      ba:	a7 0b       	sbc	r26, r23

000000bc <__ctors_end>:
      bc:	2f 08       	sbc	r2, r15

000000be <__dtors_end>:
      be:	11 24       	eor	r1, r1
      c0:	1f be       	out	0x3f, r1	; 63
      c2:	cf ef       	ldi	r28, 0xFF	; 255
      c4:	d8 e0       	ldi	r29, 0x08	; 8
      c6:	de bf       	out	0x3e, r29	; 62
      c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
      ca:	13 e0       	ldi	r17, 0x03	; 3
      cc:	a0 e0       	ldi	r26, 0x00	; 0
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	e0 e0       	ldi	r30, 0x00	; 0
      d2:	f1 e2       	ldi	r31, 0x21	; 33
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
      d6:	05 90       	lpm	r0, Z+
      d8:	0d 92       	st	X+, r0
      da:	a2 3e       	cpi	r26, 0xE2	; 226
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_clear_bss>:
      e0:	25 e0       	ldi	r18, 0x05	; 5
      e2:	a2 ee       	ldi	r26, 0xE2	; 226
      e4:	b3 e0       	ldi	r27, 0x03	; 3
      e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
      e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
      ea:	a1 32       	cpi	r26, 0x21	; 33
      ec:	b2 07       	cpc	r27, r18
      ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>

000000f0 <__do_global_ctors>:
      f0:	10 e0       	ldi	r17, 0x00	; 0
      f2:	ce e5       	ldi	r28, 0x5E	; 94
      f4:	d0 e0       	ldi	r29, 0x00	; 0
      f6:	04 c0       	rjmp	.+8      	; 0x100 <__do_global_ctors+0x10>
      f8:	21 97       	sbiw	r28, 0x01	; 1
      fa:	fe 01       	movw	r30, r28
      fc:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__tablejump2__>
     100:	cc 35       	cpi	r28, 0x5C	; 92
     102:	d1 07       	cpc	r29, r17
     104:	c9 f7       	brne	.-14     	; 0xf8 <__do_global_ctors+0x8>
     106:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <main>
     10a:	0c 94 73 10 	jmp	0x20e6	; 0x20e6 <__do_global_dtors>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <_Z17ID_ZusammensetzenPh>:
Ausgabe:
00001111101010101100110011111111
Version 0.1		30.12.2018
*/
uint32_t ID_Zusammensetzen (uint8_t *_8Bit_array/*, uint32_t *Zeiger*/)
{
     112:	cf 92       	push	r12
     114:	df 92       	push	r13
     116:	ef 92       	push	r14
     118:	ff 92       	push	r15
     11a:	cf 93       	push	r28
     11c:	df 93       	push	r29
     11e:	fc 01       	movw	r30, r24
     120:	ec 01       	movw	r28, r24
     122:	28 e1       	ldi	r18, 0x18	; 24
     124:	30 e0       	ldi	r19, 0x00	; 0
		ID = ID + (_8Bit_array[i] << (8*(3-i))); 
		Serial.println(ID, BIN);
	}
	return Zeiger;
	*/
			uint32_t ID = 0;
     126:	60 e0       	ldi	r22, 0x00	; 0
     128:	70 e0       	ldi	r23, 0x00	; 0
     12a:	cb 01       	movw	r24, r22
			uint32_t temp = 0;
				for (int i=0; i<4; i++)
				{
					temp = _8Bit_array[i];
     12c:	49 91       	ld	r20, Y+
					ID = ID + (temp << (8*(3-i)));
     12e:	c4 2e       	mov	r12, r20
     130:	d1 2c       	mov	r13, r1
     132:	e1 2c       	mov	r14, r1
     134:	f1 2c       	mov	r15, r1
     136:	02 2e       	mov	r0, r18
     138:	04 c0       	rjmp	.+8      	; 0x142 <_Z17ID_ZusammensetzenPh+0x30>
     13a:	cc 0c       	add	r12, r12
     13c:	dd 1c       	adc	r13, r13
     13e:	ee 1c       	adc	r14, r14
     140:	ff 1c       	adc	r15, r15
     142:	0a 94       	dec	r0
     144:	d2 f7       	brpl	.-12     	; 0x13a <_Z17ID_ZusammensetzenPh+0x28>
     146:	6c 0d       	add	r22, r12
     148:	7d 1d       	adc	r23, r13
     14a:	8e 1d       	adc	r24, r14
     14c:	9f 1d       	adc	r25, r15
     14e:	28 50       	subi	r18, 0x08	; 8
     150:	31 09       	sbc	r19, r1
	}
	return Zeiger;
	*/
			uint32_t ID = 0;
			uint32_t temp = 0;
				for (int i=0; i<4; i++)
     152:	28 3f       	cpi	r18, 0xF8	; 248
     154:	4f ef       	ldi	r20, 0xFF	; 255
     156:	34 07       	cpc	r19, r20
     158:	49 f7       	brne	.-46     	; 0x12c <_Z17ID_ZusammensetzenPh+0x1a>
				{
					temp = _8Bit_array[i];
					ID = ID + (temp << (8*(3-i)));
				}
				_8Bit_array[0] = 0;
     15a:	10 82       	st	Z, r1
				_8Bit_array[1] = 0;
     15c:	11 82       	std	Z+1, r1	; 0x01
				_8Bit_array[2] = 0;
     15e:	12 82       	std	Z+2, r1	; 0x02
				_8Bit_array[3] = 0;
     160:	13 82       	std	Z+3, r1	; 0x03
				return ID;
}
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28
     166:	ff 90       	pop	r15
     168:	ef 90       	pop	r14
     16a:	df 90       	pop	r13
     16c:	cf 90       	pop	r12
     16e:	08 95       	ret

00000170 <_Z18ID_Maske_berechnenPmh>:

uint32_t ID_Maske_berechnen (uint32_t *_ID_Liste, uint8_t ID_list_lenght)
{
     170:	cf 92       	push	r12
     172:	df 92       	push	r13
     174:	ef 92       	push	r14
     176:	ff 92       	push	r15
     178:	36 2f       	mov	r19, r22
     17a:	fc 01       	movw	r30, r24
	//ODER-Verknüfung aller IDs der Reihe nach
	uint32_t Maske = 0;
	for (uint8_t i=0; i<ID_list_lenght; i++ )
     17c:	20 e0       	ldi	r18, 0x00	; 0
}

uint32_t ID_Maske_berechnen (uint32_t *_ID_Liste, uint8_t ID_list_lenght)
{
	//ODER-Verknüfung aller IDs der Reihe nach
	uint32_t Maske = 0;
     17e:	60 e0       	ldi	r22, 0x00	; 0
     180:	70 e0       	ldi	r23, 0x00	; 0
     182:	cb 01       	movw	r24, r22
	for (uint8_t i=0; i<ID_list_lenght; i++ )
     184:	23 17       	cp	r18, r19
     186:	51 f0       	breq	.+20     	; 0x19c <_Z18ID_Maske_berechnenPmh+0x2c>
	{
		Maske = Maske | _ID_Liste[i];
     188:	c1 90       	ld	r12, Z+
     18a:	d1 90       	ld	r13, Z+
     18c:	e1 90       	ld	r14, Z+
     18e:	f1 90       	ld	r15, Z+
     190:	6c 29       	or	r22, r12
     192:	7d 29       	or	r23, r13
     194:	8e 29       	or	r24, r14
     196:	9f 29       	or	r25, r15

uint32_t ID_Maske_berechnen (uint32_t *_ID_Liste, uint8_t ID_list_lenght)
{
	//ODER-Verknüfung aller IDs der Reihe nach
	uint32_t Maske = 0;
	for (uint8_t i=0; i<ID_list_lenght; i++ )
     198:	2f 5f       	subi	r18, 0xFF	; 255
     19a:	f4 cf       	rjmp	.-24     	; 0x184 <_Z18ID_Maske_berechnenPmh+0x14>
	{
		Maske = Maske | _ID_Liste[i];
	}
	return Maske;
     19c:	ff 90       	pop	r15
     19e:	ef 90       	pop	r14
     1a0:	df 90       	pop	r13
     1a2:	cf 90       	pop	r12
     1a4:	08 95       	ret

000001a6 <setup>:

bool CAN_Message_detected = false;



void setup() {
     1a6:	af 92       	push	r10
     1a8:	bf 92       	push	r11
     1aa:	cf 92       	push	r12
     1ac:	df 92       	push	r13
     1ae:	ef 92       	push	r14
     1b0:	ff 92       	push	r15
     1b2:	0f 93       	push	r16
     1b4:	1f 93       	push	r17
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	00 d0       	rcall	.+0      	; 0x1bc <setup+0x16>
     1bc:	00 d0       	rcall	.+0      	; 0x1be <setup+0x18>
     1be:	cd b7       	in	r28, 0x3d	; 61
     1c0:	de b7       	in	r29, 0x3e	; 62
  // put your setup code here, to run once:
  int packetSize = 0;
	  Serial.begin(9600);
     1c2:	40 e8       	ldi	r20, 0x80	; 128
     1c4:	55 e2       	ldi	r21, 0x25	; 37
     1c6:	60 e0       	ldi	r22, 0x00	; 0
     1c8:	70 e0       	ldi	r23, 0x00	; 0
     1ca:	87 e7       	ldi	r24, 0x77	; 119
     1cc:	94 e0       	ldi	r25, 0x04	; 4
     1ce:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN14HardwareSerial5beginEm>
	  while (!Serial);

	  Serial.println("CAN Node");
     1d2:	62 e1       	ldi	r22, 0x12	; 18
     1d4:	72 e0       	ldi	r23, 0x02	; 2
     1d6:	87 e7       	ldi	r24, 0x77	; 119
     1d8:	94 e0       	ldi	r25, 0x04	; 4
     1da:	0e 94 33 0c 	call	0x1866	; 0x1866 <_ZN5Print7printlnEPKc>

	  // start the CAN bus at 500 kbps
	  if (!CAN.begin(500E3)) {
     1de:	40 e2       	ldi	r20, 0x20	; 32
     1e0:	51 ea       	ldi	r21, 0xA1	; 161
     1e2:	67 e0       	ldi	r22, 0x07	; 7
     1e4:	70 e0       	ldi	r23, 0x00	; 0
     1e6:	84 e3       	ldi	r24, 0x34	; 52
     1e8:	94 e0       	ldi	r25, 0x04	; 4
     1ea:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN12MCP2515Class5beginEl>
     1ee:	89 2b       	or	r24, r25
     1f0:	39 f4       	brne	.+14     	; 0x200 <setup+0x5a>
		  Serial.println("Starting CAN failed!");
     1f2:	6b e1       	ldi	r22, 0x1B	; 27
     1f4:	72 e0       	ldi	r23, 0x02	; 2
     1f6:	87 e7       	ldi	r24, 0x77	; 119
     1f8:	94 e0       	ldi	r25, 0x04	; 4
     1fa:	0e 94 33 0c 	call	0x1866	; 0x1866 <_ZN5Print7printlnEPKc>
     1fe:	ff cf       	rjmp	.-2      	; 0x1fe <setup+0x58>
		  while (1);
	  }
	  Serial.println("Can Nachricht wird gesendet");
     200:	60 e3       	ldi	r22, 0x30	; 48
     202:	72 e0       	ldi	r23, 0x02	; 2
     204:	87 e7       	ldi	r24, 0x77	; 119
     206:	94 e0       	ldi	r25, 0x04	; 4
     208:	0e 94 33 0c 	call	0x1866	; 0x1866 <_ZN5Print7printlnEPKc>
	  CAN.filterExtended(UID_KELLER_HUB, UID_MASK_ZERO);
     20c:	00 e0       	ldi	r16, 0x00	; 0
     20e:	10 e0       	ldi	r17, 0x00	; 0
     210:	98 01       	movw	r18, r16
     212:	40 e0       	ldi	r20, 0x00	; 0
     214:	50 e0       	ldi	r21, 0x00	; 0
     216:	60 e9       	ldi	r22, 0x90	; 144
     218:	70 e0       	ldi	r23, 0x00	; 0
     21a:	84 e3       	ldi	r24, 0x34	; 52
     21c:	94 e0       	ldi	r25, 0x04	; 4
     21e:	0e 94 35 06 	call	0xc6a	; 0xc6a <_ZN12MCP2515Class14filterExtendedEll>
	  CAN.beginExtendedPacket(UID_NODE);
     222:	2f ef       	ldi	r18, 0xFF	; 255
     224:	3f ef       	ldi	r19, 0xFF	; 255
     226:	40 e0       	ldi	r20, 0x00	; 0
     228:	50 ec       	ldi	r21, 0xC0	; 192
     22a:	62 e9       	ldi	r22, 0x92	; 146
     22c:	70 e0       	ldi	r23, 0x00	; 0
     22e:	84 e3       	ldi	r24, 0x34	; 52
     230:	94 e0       	ldi	r25, 0x04	; 4
     232:	0e 94 85 03 	call	0x70a	; 0x70a <_ZN18CANControllerClass19beginExtendedPacketElib>
	  CAN.write(Kommando_Get_HUB_ID);
     236:	61 e0       	ldi	r22, 0x01	; 1
     238:	84 e3       	ldi	r24, 0x34	; 52
     23a:	94 e0       	ldi	r25, 0x04	; 4
     23c:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN18CANControllerClass5writeEh>
	  CAN.endPacket();
     240:	84 e3       	ldi	r24, 0x34	; 52
     242:	94 e0       	ldi	r25, 0x04	; 4
     244:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN12MCP2515Class9endPacketEv>
	  Serial.println("Can Nachricht wurde gesendet");
     248:	6c e4       	ldi	r22, 0x4C	; 76
     24a:	72 e0       	ldi	r23, 0x02	; 2
     24c:	87 e7       	ldi	r24, 0x77	; 119
     24e:	94 e0       	ldi	r25, 0x04	; 4
     250:	0e 94 33 0c 	call	0x1866	; 0x1866 <_ZN5Print7printlnEPKc>
	  while(CAN.parsePacket() == 0)
     254:	84 e3       	ldi	r24, 0x34	; 52
     256:	94 e0       	ldi	r25, 0x04	; 4
     258:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN12MCP2515Class11parsePacketEv>
     25c:	89 2b       	or	r24, r25
     25e:	d1 f3       	breq	.-12     	; 0x254 <setup+0xae>
	  {
		  //Endlosschleife bis die UID vom HUB empfangen wurde
	  }
	  if (CAN.packetId() == UID_KELLER_HUB)
     260:	84 e3       	ldi	r24, 0x34	; 52
     262:	94 e0       	ldi	r25, 0x04	; 4
     264:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN18CANControllerClass8packetIdEv>
     268:	61 15       	cp	r22, r1
     26a:	71 05       	cpc	r23, r1
     26c:	80 49       	sbci	r24, 0x90	; 144
     26e:	91 05       	cpc	r25, r1
     270:	29 f4       	brne	.+10     	; 0x27c <setup+0xd6>
	  {
		  if (CAN.read() == UID_KELLER_HUB)
     272:	84 e3       	ldi	r24, 0x34	; 52
     274:	94 e0       	ldi	r25, 0x04	; 4
     276:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN18CANControllerClass4readEv>
     27a:	06 c0       	rjmp	.+12     	; 0x288 <setup+0xe2>
			  //es wurde eine neue HUB ID empfangen
		  }
	  } 
	  else //Das empfangene Packet hat eine nicht erwartete ID
	  {
		  Serial.println("Das Paket hat eine falsche ID");
     27c:	69 e6       	ldi	r22, 0x69	; 105
     27e:	72 e0       	ldi	r23, 0x02	; 2
     280:	87 e7       	ldi	r24, 0x77	; 119
     282:	94 e0       	ldi	r25, 0x04	; 4
     284:	0e 94 33 0c 	call	0x1866	; 0x1866 <_ZN5Print7printlnEPKc>
	  }
	  CAN_Message_detected = false;
     288:	10 92 e2 03 	sts	0x03E2, r1	; 0x8003e2 <__data_end>
	  while (CAN.parsePacket() != 0)
     28c:	84 e3       	ldi	r24, 0x34	; 52
     28e:	94 e0       	ldi	r25, 0x04	; 4
     290:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN12MCP2515Class11parsePacketEv>
     294:	89 2b       	or	r24, r25
     296:	59 f0       	breq	.+22     	; 0x2ae <setup+0x108>
	  {
		  CAN.read();
     298:	84 e3       	ldi	r24, 0x34	; 52
     29a:	94 e0       	ldi	r25, 0x04	; 4
     29c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN18CANControllerClass4readEv>
		  Serial.println("Dummy Nachricht weglesen");
     2a0:	67 e8       	ldi	r22, 0x87	; 135
     2a2:	72 e0       	ldi	r23, 0x02	; 2
     2a4:	87 e7       	ldi	r24, 0x77	; 119
     2a6:	94 e0       	ldi	r25, 0x04	; 4
     2a8:	0e 94 33 0c 	call	0x1866	; 0x1866 <_ZN5Print7printlnEPKc>
	  else //Das empfangene Packet hat eine nicht erwartete ID
	  {
		  Serial.println("Das Paket hat eine falsche ID");
	  }
	  CAN_Message_detected = false;
	  while (CAN.parsePacket() != 0)
     2ac:	ef cf       	rjmp	.-34     	; 0x28c <setup+0xe6>
		  CAN.read();
		  Serial.println("Dummy Nachricht weglesen");
	  }
	  
	  //Eine Liste der IDs vom HUB anfordern, auf die gelauscht werden soll
	  CAN.beginExtendedPacket(UID_NODE);
     2ae:	00 e0       	ldi	r16, 0x00	; 0
     2b0:	2f ef       	ldi	r18, 0xFF	; 255
     2b2:	3f ef       	ldi	r19, 0xFF	; 255
     2b4:	40 e0       	ldi	r20, 0x00	; 0
     2b6:	50 ec       	ldi	r21, 0xC0	; 192
     2b8:	62 e9       	ldi	r22, 0x92	; 146
     2ba:	70 e0       	ldi	r23, 0x00	; 0
     2bc:	84 e3       	ldi	r24, 0x34	; 52
     2be:	94 e0       	ldi	r25, 0x04	; 4
     2c0:	0e 94 85 03 	call	0x70a	; 0x70a <_ZN18CANControllerClass19beginExtendedPacketElib>
	  CAN.write(Kommando_Get_ID_LIST_FROM_HUB);
     2c4:	62 e0       	ldi	r22, 0x02	; 2
     2c6:	84 e3       	ldi	r24, 0x34	; 52
     2c8:	94 e0       	ldi	r25, 0x04	; 4
     2ca:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN18CANControllerClass5writeEh>
	  CAN.endPacket();
     2ce:	84 e3       	ldi	r24, 0x34	; 52
     2d0:	94 e0       	ldi	r25, 0x04	; 4
     2d2:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN12MCP2515Class9endPacketEv>
	  
	  Serial.println("Die Liste aller zu belauschenden IDs");
     2d6:	60 ea       	ldi	r22, 0xA0	; 160
     2d8:	72 e0       	ldi	r23, 0x02	; 2
     2da:	87 e7       	ldi	r24, 0x77	; 119
     2dc:	94 e0       	ldi	r25, 0x04	; 4
     2de:	0e 94 33 0c 	call	0x1866	; 0x1866 <_ZN5Print7printlnEPKc>
	  //_delay_ms(1000);
		uint8_t buffer[4];
		uint8_t ID_List_numerator = 0;
     2e2:	10 e0       	ldi	r17, 0x00	; 0
				*/
				ID = ID_Zusammensetzen(buffer);
				Serial.println(ID, BIN);
				if (ID == 0) //Falls in der CAN Nachricht eine 0x0000 steht, zeigt das an, dass die UID Liste komplett Ã¼bertragen wurde
				{
					CAN_UID_LIST_Complete = true;
     2e4:	01 e0       	ldi	r16, 0x01	; 1
	  //_delay_ms(1000);
		uint8_t buffer[4];
		uint8_t ID_List_numerator = 0;
		uint32_t ID = 0;
		uint32_t temp = 0;
		while((CAN_UID_LIST_Complete == false) && (ID_List_numerator < ID_LIST_MAXIMUM))
     2e6:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <CAN_UID_LIST_Complete>
     2ea:	81 11       	cpse	r24, r1
     2ec:	39 c0       	rjmp	.+114    	; 0x360 <setup+0x1ba>
     2ee:	14 31       	cpi	r17, 0x14	; 20
     2f0:	b8 f5       	brcc	.+110    	; 0x360 <setup+0x1ba>
		{
				while(CAN.parsePacket() == 0)
     2f2:	84 e3       	ldi	r24, 0x34	; 52
     2f4:	94 e0       	ldi	r25, 0x04	; 4
     2f6:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN12MCP2515Class11parsePacketEv>
     2fa:	89 2b       	or	r24, r25
     2fc:	d1 f3       	breq	.-12     	; 0x2f2 <setup+0x14c>

  float parseFloat(LookaheadMode lookahead = SKIP_ALL, char ignore = NO_IGNORE_CHAR);
  // float version of parseInt

  size_t readBytes( char *buffer, size_t length); // read chars from stream into buffer
  size_t readBytes( uint8_t *buffer, size_t length) { return readBytes((char *)buffer, length); }
     2fe:	44 e0       	ldi	r20, 0x04	; 4
     300:	50 e0       	ldi	r21, 0x00	; 0
     302:	be 01       	movw	r22, r28
     304:	6f 5f       	subi	r22, 0xFF	; 255
     306:	7f 4f       	sbci	r23, 0xFF	; 255
     308:	84 e3       	ldi	r24, 0x34	; 52
     30a:	94 e0       	ldi	r25, 0x04	; 4
     30c:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <_ZN6Stream9readBytesEPcj>
				buffer[0] = 0;
				buffer[1] = 0;
				buffer[2] = 0;
				buffer[3] = 0;
				*/
				ID = ID_Zusammensetzen(buffer);
     310:	ce 01       	movw	r24, r28
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	0e 94 89 00 	call	0x112	; 0x112 <_Z17ID_ZusammensetzenPh>
     318:	6b 01       	movw	r12, r22
     31a:	7c 01       	movw	r14, r24
				Serial.println(ID, BIN);
     31c:	22 e0       	ldi	r18, 0x02	; 2
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	ab 01       	movw	r20, r22
     322:	bc 01       	movw	r22, r24
     324:	87 e7       	ldi	r24, 0x77	; 119
     326:	94 e0       	ldi	r25, 0x04	; 4
     328:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN5Print7printlnEmi>
				if (ID == 0) //Falls in der CAN Nachricht eine 0x0000 steht, zeigt das an, dass die UID Liste komplett Ã¼bertragen wurde
     32c:	c1 14       	cp	r12, r1
     32e:	d1 04       	cpc	r13, r1
     330:	e1 04       	cpc	r14, r1
     332:	f1 04       	cpc	r15, r1
     334:	49 f4       	brne	.+18     	; 0x348 <setup+0x1a2>
				{
					CAN_UID_LIST_Complete = true;
     336:	00 93 e3 03 	sts	0x03E3, r16	; 0x8003e3 <CAN_UID_LIST_Complete>
					Serial.println("Uebertragung der UID Liste beendet");
     33a:	65 ec       	ldi	r22, 0xC5	; 197
     33c:	72 e0       	ldi	r23, 0x02	; 2
     33e:	87 e7       	ldi	r24, 0x77	; 119
     340:	94 e0       	ldi	r25, 0x04	; 4
     342:	0e 94 33 0c 	call	0x1866	; 0x1866 <_ZN5Print7printlnEPKc>
     346:	cf cf       	rjmp	.-98     	; 0x2e6 <setup+0x140>
				}
				else
				{
					CAN_UID_List[ID_List_numerator] = ID;
     348:	84 e0       	ldi	r24, 0x04	; 4
     34a:	18 9f       	mul	r17, r24
     34c:	f0 01       	movw	r30, r0
     34e:	11 24       	eor	r1, r1
     350:	ec 51       	subi	r30, 0x1C	; 28
     352:	fc 4f       	sbci	r31, 0xFC	; 252
     354:	c0 82       	st	Z, r12
     356:	d1 82       	std	Z+1, r13	; 0x01
     358:	e2 82       	std	Z+2, r14	; 0x02
     35a:	f3 82       	std	Z+3, r15	; 0x03
					ID_List_numerator++;
     35c:	1f 5f       	subi	r17, 0xFF	; 255
     35e:	c3 cf       	rjmp	.-122    	; 0x2e6 <setup+0x140>
     360:	84 ee       	ldi	r24, 0xE4	; 228
     362:	c8 2e       	mov	r12, r24
     364:	83 e0       	ldi	r24, 0x03	; 3
     366:	d8 2e       	mov	r13, r24
	  CAN.endPacket();
	  
	  Serial.println("Die Liste aller zu belauschenden IDs");
	  //_delay_ms(1000);
		uint8_t buffer[4];
		uint8_t ID_List_numerator = 0;
     368:	e1 2c       	mov	r14, r1
     36a:	f1 2c       	mov	r15, r1
				}
				ID = 0;
			
		}
				//Testausgaben aller UIDs
				for (int i=0; i<=ID_List_numerator; i++)
     36c:	a1 2e       	mov	r10, r17
     36e:	b1 2c       	mov	r11, r1
     370:	ae 14       	cp	r10, r14
     372:	bf 04       	cpc	r11, r15
     374:	84 f0       	brlt	.+32     	; 0x396 <setup+0x1f0>
				{
					Serial.println(CAN_UID_List[i], BIN);
     376:	f6 01       	movw	r30, r12
     378:	41 91       	ld	r20, Z+
     37a:	51 91       	ld	r21, Z+
     37c:	61 91       	ld	r22, Z+
     37e:	71 91       	ld	r23, Z+
     380:	6f 01       	movw	r12, r30
     382:	22 e0       	ldi	r18, 0x02	; 2
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	87 e7       	ldi	r24, 0x77	; 119
     388:	94 e0       	ldi	r25, 0x04	; 4
     38a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN5Print7printlnEmi>
				}
				ID = 0;
			
		}
				//Testausgaben aller UIDs
				for (int i=0; i<=ID_List_numerator; i++)
     38e:	ff ef       	ldi	r31, 0xFF	; 255
     390:	ef 1a       	sub	r14, r31
     392:	ff 0a       	sbc	r15, r31
     394:	ed cf       	rjmp	.-38     	; 0x370 <setup+0x1ca>
				{
					Serial.println(CAN_UID_List[i], BIN);
				}
				Serial.print("Es wurden insgesammt ");
     396:	68 ee       	ldi	r22, 0xE8	; 232
     398:	72 e0       	ldi	r23, 0x02	; 2
     39a:	87 e7       	ldi	r24, 0x77	; 119
     39c:	94 e0       	ldi	r25, 0x04	; 4
     39e:	0e 94 26 0c 	call	0x184c	; 0x184c <_ZN5Print5printEPKc>
				Serial.print(ID_List_numerator);
     3a2:	4a e0       	ldi	r20, 0x0A	; 10
     3a4:	50 e0       	ldi	r21, 0x00	; 0
     3a6:	61 2f       	mov	r22, r17
     3a8:	87 e7       	ldi	r24, 0x77	; 119
     3aa:	94 e0       	ldi	r25, 0x04	; 4
     3ac:	0e 94 9b 0c 	call	0x1936	; 0x1936 <_ZN5Print5printEhi>
				Serial.print(" IDs uebertragen. ");
     3b0:	6e ef       	ldi	r22, 0xFE	; 254
     3b2:	72 e0       	ldi	r23, 0x02	; 2
     3b4:	87 e7       	ldi	r24, 0x77	; 119
     3b6:	94 e0       	ldi	r25, 0x04	; 4
     3b8:	0e 94 26 0c 	call	0x184c	; 0x184c <_ZN5Print5printEPKc>
				Serial.println();
     3bc:	87 e7       	ldi	r24, 0x77	; 119
     3be:	94 e0       	ldi	r25, 0x04	; 4
     3c0:	0e 94 2f 0c 	call	0x185e	; 0x185e <_ZN5Print7printlnEv>
				
				
	//Nachdem alle zu belauschenden IDs empfangen wurde, wird die Maske berechnet und auf den CAN Controller angewandt
	//ID_Maske_berechnen(CAN_UID_List);
	CAN.filterExtended(ID_Maske_berechnen(CAN_UID_List, 2), UID_MASK_ONE);
     3c4:	62 e0       	ldi	r22, 0x02	; 2
     3c6:	84 ee       	ldi	r24, 0xE4	; 228
     3c8:	93 e0       	ldi	r25, 0x03	; 3
     3ca:	0e 94 b8 00 	call	0x170	; 0x170 <_Z18ID_Maske_berechnenPmh>
     3ce:	ab 01       	movw	r20, r22
     3d0:	bc 01       	movw	r22, r24
     3d2:	0f ef       	ldi	r16, 0xFF	; 255
     3d4:	1f ef       	ldi	r17, 0xFF	; 255
     3d6:	2f ef       	ldi	r18, 0xFF	; 255
     3d8:	33 e0       	ldi	r19, 0x03	; 3
     3da:	84 e3       	ldi	r24, 0x34	; 52
     3dc:	94 e0       	ldi	r25, 0x04	; 4
     3de:	0e 94 35 06 	call	0xc6a	; 0xc6a <_ZN12MCP2515Class14filterExtendedEll>
	
				
	
}
     3e2:	0f 90       	pop	r0
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	df 90       	pop	r13
     3f8:	cf 90       	pop	r12
     3fa:	bf 90       	pop	r11
     3fc:	af 90       	pop	r10
     3fe:	08 95       	ret

00000400 <loop>:



void loop() {
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
  // put your main code here, to run repeatedly:
  // try to parse packet
  int packetSize = CAN.parsePacket();
     404:	84 e3       	ldi	r24, 0x34	; 52
     406:	94 e0       	ldi	r25, 0x04	; 4
     408:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN12MCP2515Class11parsePacketEv>
     40c:	ec 01       	movw	r28, r24

  if (packetSize) {
     40e:	89 2b       	or	r24, r25
     410:	09 f4       	brne	.+2      	; 0x414 <loop+0x14>
     412:	6f c0       	rjmp	.+222    	; 0x4f2 <loop+0xf2>
	  // received a packet
	  Serial.print("Received ");
     414:	61 e1       	ldi	r22, 0x11	; 17
     416:	73 e0       	ldi	r23, 0x03	; 3
     418:	87 e7       	ldi	r24, 0x77	; 119
     41a:	94 e0       	ldi	r25, 0x04	; 4
     41c:	0e 94 26 0c 	call	0x184c	; 0x184c <_ZN5Print5printEPKc>

	  if (CAN.packetExtended()) {
     420:	84 e3       	ldi	r24, 0x34	; 52
     422:	94 e0       	ldi	r25, 0x04	; 4
     424:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN18CANControllerClass14packetExtendedEv>
     428:	88 23       	and	r24, r24
     42a:	31 f0       	breq	.+12     	; 0x438 <loop+0x38>
		  Serial.print("extended ");
     42c:	6b e1       	ldi	r22, 0x1B	; 27
     42e:	73 e0       	ldi	r23, 0x03	; 3
     430:	87 e7       	ldi	r24, 0x77	; 119
     432:	94 e0       	ldi	r25, 0x04	; 4
     434:	0e 94 26 0c 	call	0x184c	; 0x184c <_ZN5Print5printEPKc>
	  }

	  if (CAN.packetRtr()) {
     438:	84 e3       	ldi	r24, 0x34	; 52
     43a:	94 e0       	ldi	r25, 0x04	; 4
     43c:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN18CANControllerClass9packetRtrEv>
     440:	88 23       	and	r24, r24
     442:	31 f0       	breq	.+12     	; 0x450 <loop+0x50>
		  // Remote transmission request, packet contains no data
		  Serial.print("RTR ");
     444:	65 e2       	ldi	r22, 0x25	; 37
     446:	73 e0       	ldi	r23, 0x03	; 3
     448:	87 e7       	ldi	r24, 0x77	; 119
     44a:	94 e0       	ldi	r25, 0x04	; 4
     44c:	0e 94 26 0c 	call	0x184c	; 0x184c <_ZN5Print5printEPKc>
	  }

	  Serial.print("packet with id 0x");
     450:	6a e2       	ldi	r22, 0x2A	; 42
     452:	73 e0       	ldi	r23, 0x03	; 3
     454:	87 e7       	ldi	r24, 0x77	; 119
     456:	94 e0       	ldi	r25, 0x04	; 4
     458:	0e 94 26 0c 	call	0x184c	; 0x184c <_ZN5Print5printEPKc>
	  Serial.print(CAN.packetId(), HEX);
     45c:	84 e3       	ldi	r24, 0x34	; 52
     45e:	94 e0       	ldi	r25, 0x04	; 4
     460:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN18CANControllerClass8packetIdEv>
     464:	ab 01       	movw	r20, r22
     466:	bc 01       	movw	r22, r24
     468:	20 e1       	ldi	r18, 0x10	; 16
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	87 e7       	ldi	r24, 0x77	; 119
     46e:	94 e0       	ldi	r25, 0x04	; 4
     470:	0e 94 b4 0c 	call	0x1968	; 0x1968 <_ZN5Print5printEli>

	  if (CAN.packetRtr()) {
     474:	84 e3       	ldi	r24, 0x34	; 52
     476:	94 e0       	ldi	r25, 0x04	; 4
     478:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN18CANControllerClass9packetRtrEv>
     47c:	88 23       	and	r24, r24
     47e:	91 f0       	breq	.+36     	; 0x4a4 <loop+0xa4>
		  Serial.print(" and requested length ");
     480:	6c e3       	ldi	r22, 0x3C	; 60
     482:	73 e0       	ldi	r23, 0x03	; 3
     484:	87 e7       	ldi	r24, 0x77	; 119
     486:	94 e0       	ldi	r25, 0x04	; 4
     488:	0e 94 26 0c 	call	0x184c	; 0x184c <_ZN5Print5printEPKc>
		  Serial.println(CAN.packetDlc());
     48c:	84 e3       	ldi	r24, 0x34	; 52
     48e:	94 e0       	ldi	r25, 0x04	; 4
     490:	0e 94 b5 03 	call	0x76a	; 0x76a <_ZN18CANControllerClass9packetDlcEv>
     494:	4a e0       	ldi	r20, 0x0A	; 10
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	bc 01       	movw	r22, r24
     49a:	87 e7       	ldi	r24, 0x77	; 119
     49c:	94 e0       	ldi	r25, 0x04	; 4
     49e:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <_ZN5Print7printlnEii>
     4a2:	21 c0       	rjmp	.+66     	; 0x4e6 <loop+0xe6>
		  } else {
		  Serial.print(" and length ");
     4a4:	63 e5       	ldi	r22, 0x53	; 83
     4a6:	73 e0       	ldi	r23, 0x03	; 3
     4a8:	87 e7       	ldi	r24, 0x77	; 119
     4aa:	94 e0       	ldi	r25, 0x04	; 4
     4ac:	0e 94 26 0c 	call	0x184c	; 0x184c <_ZN5Print5printEPKc>
		  Serial.println(packetSize);
     4b0:	4a e0       	ldi	r20, 0x0A	; 10
     4b2:	50 e0       	ldi	r21, 0x00	; 0
     4b4:	be 01       	movw	r22, r28
     4b6:	87 e7       	ldi	r24, 0x77	; 119
     4b8:	94 e0       	ldi	r25, 0x04	; 4
     4ba:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <_ZN5Print7printlnEii>

		  // only print packet data for non-RTR packets
		  while (CAN.available()) {
     4be:	84 e3       	ldi	r24, 0x34	; 52
     4c0:	94 e0       	ldi	r25, 0x04	; 4
     4c2:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN18CANControllerClass9availableEv>
     4c6:	89 2b       	or	r24, r25
     4c8:	51 f0       	breq	.+20     	; 0x4de <loop+0xde>
			  Serial.print((char)CAN.read());
     4ca:	84 e3       	ldi	r24, 0x34	; 52
     4cc:	94 e0       	ldi	r25, 0x04	; 4
     4ce:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN18CANControllerClass4readEv>
     4d2:	68 2f       	mov	r22, r24
     4d4:	87 e7       	ldi	r24, 0x77	; 119
     4d6:	94 e0       	ldi	r25, 0x04	; 4
     4d8:	0e 94 28 0c 	call	0x1850	; 0x1850 <_ZN5Print5printEc>
		  } else {
		  Serial.print(" and length ");
		  Serial.println(packetSize);

		  // only print packet data for non-RTR packets
		  while (CAN.available()) {
     4dc:	f0 cf       	rjmp	.-32     	; 0x4be <loop+0xbe>
			  Serial.print((char)CAN.read());
		  }
		  Serial.println();
     4de:	87 e7       	ldi	r24, 0x77	; 119
     4e0:	94 e0       	ldi	r25, 0x04	; 4
     4e2:	0e 94 2f 0c 	call	0x185e	; 0x185e <_ZN5Print7printlnEv>
	  }

	  Serial.println();
     4e6:	87 e7       	ldi	r24, 0x77	; 119
     4e8:	94 e0       	ldi	r25, 0x04	; 4
  }
}
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
			  Serial.print((char)CAN.read());
		  }
		  Serial.println();
	  }

	  Serial.println();
     4ee:	0c 94 2f 0c 	jmp	0x185e	; 0x185e <_ZN5Print7printlnEv>
  }
}
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <_ZN5Print17availableForWriteEv>:
  _txLength = 0;

  memset(_txData, 0x00, sizeof(_txData));

  return 1;
}
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	08 95       	ret

000004fe <_ZN18CANControllerClass6filterEi>:
     4fe:	dc 01       	movw	r26, r24
     500:	ed 91       	ld	r30, X+
     502:	fc 91       	ld	r31, X
     504:	02 8c       	ldd	r0, Z+26	; 0x1a
     506:	f3 8d       	ldd	r31, Z+27	; 0x1b
     508:	e0 2d       	mov	r30, r0
     50a:	4f ef       	ldi	r20, 0xFF	; 255
     50c:	57 e0       	ldi	r21, 0x07	; 7
     50e:	09 94       	ijmp

00000510 <_ZN18CANControllerClass14filterExtendedEl>:
     510:	0f 93       	push	r16
     512:	1f 93       	push	r17
     514:	dc 01       	movw	r26, r24
     516:	ed 91       	ld	r30, X+
     518:	fc 91       	ld	r31, X
     51a:	06 8c       	ldd	r0, Z+30	; 0x1e
     51c:	f7 8d       	ldd	r31, Z+31	; 0x1f
     51e:	e0 2d       	mov	r30, r0
     520:	0f ef       	ldi	r16, 0xFF	; 255
     522:	1f ef       	ldi	r17, 0xFF	; 255
     524:	2f ef       	ldi	r18, 0xFF	; 255
     526:	3f e1       	ldi	r19, 0x1F	; 31
     528:	09 95       	icall
     52a:	1f 91       	pop	r17
     52c:	0f 91       	pop	r16
     52e:	08 95       	ret

00000530 <_ZN18CANControllerClassD1Ev>:
     530:	08 95       	ret

00000532 <_ZN18CANControllerClass5beginEl>:
     532:	fc 01       	movw	r30, r24
     534:	16 86       	std	Z+14, r1	; 0x0e
     536:	8f ef       	ldi	r24, 0xFF	; 255
     538:	9f ef       	ldi	r25, 0xFF	; 255
     53a:	dc 01       	movw	r26, r24
     53c:	87 87       	std	Z+15, r24	; 0x0f
     53e:	90 8b       	std	Z+16, r25	; 0x10
     540:	a1 8b       	std	Z+17, r26	; 0x11
     542:	b2 8b       	std	Z+18, r27	; 0x12
     544:	14 8a       	std	Z+20, r1	; 0x14
     546:	16 8a       	std	Z+22, r1	; 0x16
     548:	15 8a       	std	Z+21, r1	; 0x15
     54a:	10 8e       	std	Z+24, r1	; 0x18
     54c:	17 8a       	std	Z+23, r1	; 0x17
     54e:	81 a3       	std	Z+33, r24	; 0x21
     550:	92 a3       	std	Z+34, r25	; 0x22
     552:	a3 a3       	std	Z+35, r26	; 0x23
     554:	b4 a3       	std	Z+36, r27	; 0x24
     556:	16 a2       	std	Z+38, r1	; 0x26
     558:	10 a6       	std	Z+40, r1	; 0x28
     55a:	17 a2       	std	Z+39, r1	; 0x27
     55c:	12 a6       	std	Z+42, r1	; 0x2a
     55e:	11 a6       	std	Z+41, r1	; 0x29
     560:	14 a6       	std	Z+44, r1	; 0x2c
     562:	13 a6       	std	Z+43, r1	; 0x2b
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	08 95       	ret

0000056a <_ZN18CANControllerClass5writeEh>:
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	1f 92       	push	r1
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
     574:	69 83       	std	Y+1, r22	; 0x01
     576:	dc 01       	movw	r26, r24
     578:	ed 91       	ld	r30, X+
     57a:	fc 91       	ld	r31, X
     57c:	02 80       	ldd	r0, Z+2	; 0x02
     57e:	f3 81       	ldd	r31, Z+3	; 0x03
     580:	e0 2d       	mov	r30, r0
     582:	41 e0       	ldi	r20, 0x01	; 1
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	be 01       	movw	r22, r28
     588:	6f 5f       	subi	r22, 0xFF	; 255
     58a:	7f 4f       	sbci	r23, 0xFF	; 255
     58c:	09 95       	icall
     58e:	0f 90       	pop	r0
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	08 95       	ret

00000596 <_ZN18CANControllerClass9availableEv>:
     596:	fc 01       	movw	r30, r24
     598:	81 a5       	ldd	r24, Z+41	; 0x29
     59a:	92 a5       	ldd	r25, Z+42	; 0x2a
     59c:	23 a5       	ldd	r18, Z+43	; 0x2b
     59e:	34 a5       	ldd	r19, Z+44	; 0x2c
     5a0:	82 1b       	sub	r24, r18
     5a2:	93 0b       	sbc	r25, r19
     5a4:	08 95       	ret

000005a6 <_ZN18CANControllerClass4readEv>:
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	ec 01       	movw	r28, r24
     5ac:	e8 81       	ld	r30, Y
     5ae:	f9 81       	ldd	r31, Y+1	; 0x01
     5b0:	00 84       	ldd	r0, Z+8	; 0x08
     5b2:	f1 85       	ldd	r31, Z+9	; 0x09
     5b4:	e0 2d       	mov	r30, r0
     5b6:	09 95       	icall
     5b8:	89 2b       	or	r24, r25
     5ba:	61 f0       	breq	.+24     	; 0x5d4 <_ZN18CANControllerClass4readEv+0x2e>
     5bc:	8b a5       	ldd	r24, Y+43	; 0x2b
     5be:	9c a5       	ldd	r25, Y+44	; 0x2c
     5c0:	9c 01       	movw	r18, r24
     5c2:	2f 5f       	subi	r18, 0xFF	; 255
     5c4:	3f 4f       	sbci	r19, 0xFF	; 255
     5c6:	3c a7       	std	Y+44, r19	; 0x2c
     5c8:	2b a7       	std	Y+43, r18	; 0x2b
     5ca:	c8 0f       	add	r28, r24
     5cc:	d9 1f       	adc	r29, r25
     5ce:	8d a5       	ldd	r24, Y+45	; 0x2d
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <_ZN18CANControllerClass4readEv+0x32>
     5d4:	8f ef       	ldi	r24, 0xFF	; 255
     5d6:	9f ef       	ldi	r25, 0xFF	; 255
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <_ZN18CANControllerClass4peekEv>:
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	ec 01       	movw	r28, r24
     5e4:	e8 81       	ld	r30, Y
     5e6:	f9 81       	ldd	r31, Y+1	; 0x01
     5e8:	00 84       	ldd	r0, Z+8	; 0x08
     5ea:	f1 85       	ldd	r31, Z+9	; 0x09
     5ec:	e0 2d       	mov	r30, r0
     5ee:	09 95       	icall
     5f0:	89 2b       	or	r24, r25
     5f2:	39 f0       	breq	.+14     	; 0x602 <_ZN18CANControllerClass4peekEv+0x24>
     5f4:	8b a5       	ldd	r24, Y+43	; 0x2b
     5f6:	9c a5       	ldd	r25, Y+44	; 0x2c
     5f8:	c8 0f       	add	r28, r24
     5fa:	d9 1f       	adc	r29, r25
     5fc:	8d a5       	ldd	r24, Y+45	; 0x2d
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	02 c0       	rjmp	.+4      	; 0x606 <_ZN18CANControllerClass4peekEv+0x28>
     602:	8f ef       	ldi	r24, 0xFF	; 255
     604:	9f ef       	ldi	r25, 0xFF	; 255
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	08 95       	ret

0000060c <_ZN18CANControllerClass3endEv>:
     60c:	08 95       	ret

0000060e <_ZN18CANControllerClass9onReceiveEPFviE>:
     60e:	fc 01       	movw	r30, r24
     610:	75 87       	std	Z+13, r23	; 0x0d
     612:	64 87       	std	Z+12, r22	; 0x0c
     614:	08 95       	ret

00000616 <_ZN18CANControllerClass6filterEii>:
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	08 95       	ret

0000061c <_ZN18CANControllerClass14filterExtendedEll>:
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	08 95       	ret

00000622 <_ZN18CANControllerClass11parsePacketEv>:
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	08 95       	ret

00000628 <_ZN18CANControllerClassD0Ev>:
     628:	0c 94 e5 0b 	jmp	0x17ca	; 0x17ca <_ZdlPv>

0000062c <_ZN18CANControllerClass5writeEPKhj>:
     62c:	0f 93       	push	r16
     62e:	1f 93       	push	r17
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	fc 01       	movw	r30, r24
     636:	26 85       	ldd	r18, Z+14	; 0x0e
     638:	22 23       	and	r18, r18
     63a:	e1 f0       	breq	.+56     	; 0x674 <_ZN18CANControllerClass5writeEPKhj+0x48>
     63c:	27 89       	ldd	r18, Z+23	; 0x17
     63e:	30 8d       	ldd	r19, Z+24	; 0x18
     640:	e8 e0       	ldi	r30, 0x08	; 8
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	e2 1b       	sub	r30, r18
     646:	f3 0b       	sbc	r31, r19
     648:	ea 01       	movw	r28, r20
     64a:	e4 17       	cp	r30, r20
     64c:	f5 07       	cpc	r31, r21
     64e:	08 f4       	brcc	.+2      	; 0x652 <_ZN18CANControllerClass5writeEPKhj+0x26>
     650:	ef 01       	movw	r28, r30
     652:	8c 01       	movw	r16, r24
     654:	c9 01       	movw	r24, r18
     656:	49 96       	adiw	r24, 0x19	; 25
     658:	ae 01       	movw	r20, r28
     65a:	80 0f       	add	r24, r16
     65c:	91 1f       	adc	r25, r17
     65e:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <memcpy>
     662:	f8 01       	movw	r30, r16
     664:	87 89       	ldd	r24, Z+23	; 0x17
     666:	90 8d       	ldd	r25, Z+24	; 0x18
     668:	8c 0f       	add	r24, r28
     66a:	9d 1f       	adc	r25, r29
     66c:	90 8f       	std	Z+24, r25	; 0x18
     66e:	87 8b       	std	Z+23, r24	; 0x17
     670:	ce 01       	movw	r24, r28
     672:	02 c0       	rjmp	.+4      	; 0x678 <_ZN18CANControllerClass5writeEPKhj+0x4c>
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	1f 91       	pop	r17
     67e:	0f 91       	pop	r16
     680:	08 95       	ret

00000682 <_ZN18CANControllerClass9endPacketEv>:
     682:	fc 01       	movw	r30, r24
     684:	86 85       	ldd	r24, Z+14	; 0x0e
     686:	88 23       	and	r24, r24
     688:	41 f0       	breq	.+16     	; 0x69a <_ZN18CANControllerClass9endPacketEv+0x18>
     68a:	16 86       	std	Z+14, r1	; 0x0e
     68c:	85 89       	ldd	r24, Z+21	; 0x15
     68e:	96 89       	ldd	r25, Z+22	; 0x16
     690:	97 fd       	sbrc	r25, 7
     692:	06 c0       	rjmp	.+12     	; 0x6a0 <_ZN18CANControllerClass9endPacketEv+0x1e>
     694:	90 8f       	std	Z+24, r25	; 0x18
     696:	87 8b       	std	Z+23, r24	; 0x17
     698:	03 c0       	rjmp	.+6      	; 0x6a0 <_ZN18CANControllerClass9endPacketEv+0x1e>
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	08 95       	ret
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	08 95       	ret

000006a6 <_ZN18CANControllerClassC1Ev>:
     6a6:	fc 01       	movw	r30, r24
     6a8:	13 82       	std	Z+3, r1	; 0x03
     6aa:	12 82       	std	Z+2, r1	; 0x02
     6ac:	88 ee       	ldi	r24, 0xE8	; 232
     6ae:	93 e0       	ldi	r25, 0x03	; 3
     6b0:	a0 e0       	ldi	r26, 0x00	; 0
     6b2:	b0 e0       	ldi	r27, 0x00	; 0
     6b4:	84 83       	std	Z+4, r24	; 0x04
     6b6:	95 83       	std	Z+5, r25	; 0x05
     6b8:	a6 83       	std	Z+6, r26	; 0x06
     6ba:	b7 83       	std	Z+7, r27	; 0x07
     6bc:	84 e6       	ldi	r24, 0x64	; 100
     6be:	93 e0       	ldi	r25, 0x03	; 3
     6c0:	91 83       	std	Z+1, r25	; 0x01
     6c2:	80 83       	st	Z, r24
     6c4:	15 86       	std	Z+13, r1	; 0x0d
     6c6:	14 86       	std	Z+12, r1	; 0x0c
     6c8:	16 86       	std	Z+14, r1	; 0x0e
     6ca:	8f ef       	ldi	r24, 0xFF	; 255
     6cc:	9f ef       	ldi	r25, 0xFF	; 255
     6ce:	dc 01       	movw	r26, r24
     6d0:	87 87       	std	Z+15, r24	; 0x0f
     6d2:	90 8b       	std	Z+16, r25	; 0x10
     6d4:	a1 8b       	std	Z+17, r26	; 0x11
     6d6:	b2 8b       	std	Z+18, r27	; 0x12
     6d8:	21 e0       	ldi	r18, 0x01	; 1
     6da:	23 8b       	std	Z+19, r18	; 0x13
     6dc:	14 8a       	std	Z+20, r1	; 0x14
     6de:	16 8a       	std	Z+22, r1	; 0x16
     6e0:	15 8a       	std	Z+21, r1	; 0x15
     6e2:	10 8e       	std	Z+24, r1	; 0x18
     6e4:	17 8a       	std	Z+23, r1	; 0x17
     6e6:	81 a3       	std	Z+33, r24	; 0x21
     6e8:	92 a3       	std	Z+34, r25	; 0x22
     6ea:	a3 a3       	std	Z+35, r26	; 0x23
     6ec:	b4 a3       	std	Z+36, r27	; 0x24
     6ee:	15 a2       	std	Z+37, r1	; 0x25
     6f0:	16 a2       	std	Z+38, r1	; 0x26
     6f2:	10 a6       	std	Z+40, r1	; 0x28
     6f4:	17 a2       	std	Z+39, r1	; 0x27
     6f6:	12 a6       	std	Z+42, r1	; 0x2a
     6f8:	11 a6       	std	Z+41, r1	; 0x29
     6fa:	14 a6       	std	Z+44, r1	; 0x2c
     6fc:	13 a6       	std	Z+43, r1	; 0x2b
     6fe:	40 e0       	ldi	r20, 0x00	; 0
     700:	50 e0       	ldi	r21, 0x00	; 0
     702:	ba 01       	movw	r22, r20
     704:	cf 01       	movw	r24, r30
     706:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <_ZN6Stream10setTimeoutEm>

0000070a <_ZN18CANControllerClass19beginExtendedPacketElib>:

int CANControllerClass::beginExtendedPacket(long id, int dlc, bool rtr)
{
     70a:	0f 93       	push	r16
     70c:	fc 01       	movw	r30, r24
  if (id < 0 || id > 0x1FFFFFFF) {
     70e:	41 15       	cp	r20, r1
     710:	51 05       	cpc	r21, r1
     712:	61 05       	cpc	r22, r1
     714:	80 e2       	ldi	r24, 0x20	; 32
     716:	78 07       	cpc	r23, r24
     718:	c0 f4       	brcc	.+48     	; 0x74a <_ZN18CANControllerClass19beginExtendedPacketElib+0x40>
    return 0;
  }

  if (dlc > 8) {
     71a:	29 30       	cpi	r18, 0x09	; 9
     71c:	31 05       	cpc	r19, r1
     71e:	ac f4       	brge	.+42     	; 0x74a <_ZN18CANControllerClass19beginExtendedPacketElib+0x40>
    return 0;
  }

  _packetBegun = true;
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	86 87       	std	Z+14, r24	; 0x0e
  _txId = id;
     724:	47 87       	std	Z+15, r20	; 0x0f
     726:	50 8b       	std	Z+16, r21	; 0x10
     728:	61 8b       	std	Z+17, r22	; 0x11
     72a:	72 8b       	std	Z+18, r23	; 0x12
  _txExtended = true;
     72c:	83 8b       	std	Z+19, r24	; 0x13
  _txRtr = rtr;
     72e:	04 8b       	std	Z+20, r16	; 0x14
  _txDlc = dlc;
     730:	36 8b       	std	Z+22, r19	; 0x16
     732:	25 8b       	std	Z+21, r18	; 0x15
  _txLength = 0;
     734:	10 8e       	std	Z+24, r1	; 0x18
     736:	17 8a       	std	Z+23, r1	; 0x17

  memset(_txData, 0x00, sizeof(_txData));
     738:	79 96       	adiw	r30, 0x19	; 25
     73a:	88 e0       	ldi	r24, 0x08	; 8
     73c:	df 01       	movw	r26, r30
     73e:	1d 92       	st	X+, r1
     740:	8a 95       	dec	r24
     742:	e9 f7       	brne	.-6      	; 0x73e <_ZN18CANControllerClass19beginExtendedPacketElib+0x34>

  return 1;
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	02 c0       	rjmp	.+4      	; 0x74e <_ZN18CANControllerClass19beginExtendedPacketElib+0x44>
}

int CANControllerClass::beginExtendedPacket(long id, int dlc, bool rtr)
{
  if (id < 0 || id > 0x1FFFFFFF) {
    return 0;
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	90 e0       	ldi	r25, 0x00	; 0
  _txLength = 0;

  memset(_txData, 0x00, sizeof(_txData));

  return 1;
}
     74e:	0f 91       	pop	r16
     750:	08 95       	ret

00000752 <_ZN18CANControllerClass8packetIdEv>:
  return 0;
}

long CANControllerClass::packetId()
{
  return _rxId;
     752:	fc 01       	movw	r30, r24
     754:	61 a1       	ldd	r22, Z+33	; 0x21
     756:	72 a1       	ldd	r23, Z+34	; 0x22
     758:	83 a1       	ldd	r24, Z+35	; 0x23
     75a:	94 a1       	ldd	r25, Z+36	; 0x24
}
     75c:	08 95       	ret

0000075e <_ZN18CANControllerClass14packetExtendedEv>:

bool CANControllerClass::packetExtended()
{
  return _rxExtended;
}
     75e:	fc 01       	movw	r30, r24
     760:	85 a1       	ldd	r24, Z+37	; 0x25
     762:	08 95       	ret

00000764 <_ZN18CANControllerClass9packetRtrEv>:

bool CANControllerClass::packetRtr()
{
  return _rxRtr;
}
     764:	fc 01       	movw	r30, r24
     766:	86 a1       	ldd	r24, Z+38	; 0x26
     768:	08 95       	ret

0000076a <_ZN18CANControllerClass9packetDlcEv>:

int CANControllerClass::packetDlc()
{
  return _rxDlc;
}
     76a:	fc 01       	movw	r30, r24
     76c:	87 a1       	ldd	r24, Z+39	; 0x27
     76e:	90 a5       	ldd	r25, Z+40	; 0x28
     770:	08 95       	ret

00000772 <_ZN12MCP2515ClassD1Ev>:
    if (b < 16) {
      out.print('0');
    }
    out.println(b, HEX);
  }
}
     772:	24 e9       	ldi	r18, 0x94	; 148
     774:	33 e0       	ldi	r19, 0x03	; 3
     776:	fc 01       	movw	r30, r24
     778:	31 83       	std	Z+1, r19	; 0x01
     77a:	20 83       	st	Z, r18
     77c:	0c 94 98 02 	jmp	0x530	; 0x530 <_ZN18CANControllerClassD1Ev>

00000780 <_ZN12MCP2515ClassD0Ev>:
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	ec 01       	movw	r28, r24
     786:	0e 94 b9 03 	call	0x772	; 0x772 <_ZN12MCP2515ClassD1Ev>
     78a:	ce 01       	movw	r24, r28
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	0c 94 e5 0b 	jmp	0x17ca	; 0x17ca <_ZdlPv>

00000794 <_ZN8SPIClass16beginTransactionE11SPISettings>:
     794:	20 91 75 04 	lds	r18, 0x0475	; 0x800475 <_ZN8SPIClass13interruptModeE>
     798:	22 23       	and	r18, r18
     79a:	99 f0       	breq	.+38     	; 0x7c2 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     79c:	4f b7       	in	r20, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	20 91 75 04 	lds	r18, 0x0475	; 0x800475 <_ZN8SPIClass13interruptModeE>
     7a4:	21 30       	cpi	r18, 0x01	; 1
     7a6:	59 f4       	brne	.+22     	; 0x7be <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
     7a8:	2d b3       	in	r18, 0x1d	; 29
     7aa:	20 93 73 04 	sts	0x0473, r18	; 0x800473 <_ZN8SPIClass13interruptSaveE>
     7ae:	3d b3       	in	r19, 0x1d	; 29
     7b0:	20 91 74 04 	lds	r18, 0x0474	; 0x800474 <_ZN8SPIClass13interruptMaskE>
     7b4:	20 95       	com	r18
     7b6:	23 23       	and	r18, r19
     7b8:	2d bb       	out	0x1d, r18	; 29
     7ba:	4f bf       	out	0x3f, r20	; 63
     7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     7be:	40 93 73 04 	sts	0x0473, r20	; 0x800473 <_ZN8SPIClass13interruptSaveE>
     7c2:	8c bd       	out	0x2c, r24	; 44
     7c4:	9d bd       	out	0x2d, r25	; 45
     7c6:	08 95       	ret

000007c8 <_ZN8SPIClass8transferEh>:
     7c8:	8e bd       	out	0x2e, r24	; 46
     7ca:	00 00       	nop
     7cc:	0d b4       	in	r0, 0x2d	; 45
     7ce:	07 fe       	sbrs	r0, 7
     7d0:	fd cf       	rjmp	.-6      	; 0x7cc <_ZN8SPIClass8transferEh+0x4>
     7d2:	8e b5       	in	r24, 0x2e	; 46
     7d4:	08 95       	ret

000007d6 <_ZN8SPIClass14endTransactionEv>:
     7d6:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <_ZN8SPIClass13interruptModeE>
     7da:	88 23       	and	r24, r24
     7dc:	61 f0       	breq	.+24     	; 0x7f6 <_ZN8SPIClass14endTransactionEv+0x20>
     7de:	9f b7       	in	r25, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	20 91 75 04 	lds	r18, 0x0475	; 0x800475 <_ZN8SPIClass13interruptModeE>
     7e6:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <_ZN8SPIClass13interruptSaveE>
     7ea:	21 30       	cpi	r18, 0x01	; 1
     7ec:	19 f4       	brne	.+6      	; 0x7f4 <_ZN8SPIClass14endTransactionEv+0x1e>
     7ee:	8d bb       	out	0x1d, r24	; 29
     7f0:	9f bf       	out	0x3f, r25	; 63
     7f2:	08 95       	ret
     7f4:	8f bf       	out	0x3f, r24	; 63
     7f6:	08 95       	ret

000007f8 <_ZN12MCP2515ClassC1Ev>:
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	ec 01       	movw	r28, r24
     7fe:	0e 94 53 03 	call	0x6a6	; 0x6a6 <_ZN18CANControllerClassC1Ev>
     802:	84 e9       	ldi	r24, 0x94	; 148
     804:	93 e0       	ldi	r25, 0x03	; 3
     806:	99 83       	std	Y+1, r25	; 0x01
     808:	88 83       	st	Y, r24
     80a:	80 e5       	ldi	r24, 0x50	; 80
     80c:	8d ab       	std	Y+53, r24	; 0x35
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	8e ab       	std	Y+54, r24	; 0x36
     812:	8a e0       	ldi	r24, 0x0A	; 10
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	98 af       	std	Y+56, r25	; 0x38
     818:	8f ab       	std	Y+55, r24	; 0x37
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	9a af       	std	Y+58, r25	; 0x3a
     820:	89 af       	std	Y+57, r24	; 0x39
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	94 e2       	ldi	r25, 0x24	; 36
     826:	a4 ef       	ldi	r26, 0xF4	; 244
     828:	b0 e0       	ldi	r27, 0x00	; 0
     82a:	8b af       	std	Y+59, r24	; 0x3b
     82c:	9c af       	std	Y+60, r25	; 0x3c
     82e:	ad af       	std	Y+61, r26	; 0x3d
     830:	be af       	std	Y+62, r27	; 0x3e
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	08 95       	ret

00000838 <_ZN12MCP2515Class5resetEv>:
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	ec 01       	movw	r28, r24
     83e:	8d a9       	ldd	r24, Y+53	; 0x35
     840:	9e a9       	ldd	r25, Y+54	; 0x36
     842:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN8SPIClass16beginTransactionE11SPISettings>
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	8f a9       	ldd	r24, Y+55	; 0x37
     84a:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <digitalWrite>
     84e:	80 ec       	ldi	r24, 0xC0	; 192
     850:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_ZN8SPIClass8transferEh>
     854:	61 e0       	ldi	r22, 0x01	; 1
     856:	8f a9       	ldd	r24, Y+55	; 0x37
     858:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <digitalWrite>
     85c:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <_ZN8SPIClass14endTransactionEv>
     860:	8a e0       	ldi	r24, 0x0A	; 10
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	0c 94 47 0e 	jmp	0x1c8e	; 0x1c8e <delayMicroseconds>

0000086c <_ZN12MCP2515Class12readRegisterEh>:
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	ec 01       	movw	r28, r24
     874:	16 2f       	mov	r17, r22
     876:	8d a9       	ldd	r24, Y+53	; 0x35
     878:	9e a9       	ldd	r25, Y+54	; 0x36
     87a:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN8SPIClass16beginTransactionE11SPISettings>
     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	8f a9       	ldd	r24, Y+55	; 0x37
     882:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <digitalWrite>
     886:	83 e0       	ldi	r24, 0x03	; 3
     888:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_ZN8SPIClass8transferEh>
     88c:	81 2f       	mov	r24, r17
     88e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_ZN8SPIClass8transferEh>
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_ZN8SPIClass8transferEh>
     898:	18 2f       	mov	r17, r24
     89a:	61 e0       	ldi	r22, 0x01	; 1
     89c:	8f a9       	ldd	r24, Y+55	; 0x37
     89e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <digitalWrite>
     8a2:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <_ZN8SPIClass14endTransactionEv>
     8a6:	81 2f       	mov	r24, r17
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	1f 91       	pop	r17
     8ae:	08 95       	ret

000008b0 <_ZN12MCP2515Class15handleInterruptEv>:

  delayMicroseconds(10);
}

void MCP2515Class::handleInterrupt()
{
     8b0:	0f 93       	push	r16
     8b2:	1f 93       	push	r17
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	ec 01       	movw	r28, r24
  if (readRegister(REG_CANINTF) == 0) {
     8ba:	6c e2       	ldi	r22, 0x2C	; 44
     8bc:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN12MCP2515Class12readRegisterEh>
     8c0:	88 23       	and	r24, r24
     8c2:	a9 f0       	breq	.+42     	; 0x8ee <_ZN12MCP2515Class15handleInterruptEv+0x3e>
    return;
  }

  while (parsePacket()) {
     8c4:	e8 81       	ld	r30, Y
     8c6:	f9 81       	ldd	r31, Y+1	; 0x01
     8c8:	04 88       	ldd	r0, Z+20	; 0x14
     8ca:	f5 89       	ldd	r31, Z+21	; 0x15
     8cc:	e0 2d       	mov	r30, r0
     8ce:	ce 01       	movw	r24, r28
     8d0:	09 95       	icall
     8d2:	89 2b       	or	r24, r25
     8d4:	61 f0       	breq	.+24     	; 0x8ee <_ZN12MCP2515Class15handleInterruptEv+0x3e>
    _onReceive(available());
     8d6:	0c 85       	ldd	r16, Y+12	; 0x0c
     8d8:	1d 85       	ldd	r17, Y+13	; 0x0d
     8da:	e8 81       	ld	r30, Y
     8dc:	f9 81       	ldd	r31, Y+1	; 0x01
     8de:	00 84       	ldd	r0, Z+8	; 0x08
     8e0:	f1 85       	ldd	r31, Z+9	; 0x09
     8e2:	e0 2d       	mov	r30, r0
     8e4:	ce 01       	movw	r24, r28
     8e6:	09 95       	icall
     8e8:	f8 01       	movw	r30, r16
     8ea:	09 95       	icall
     8ec:	eb cf       	rjmp	.-42     	; 0x8c4 <_ZN12MCP2515Class15handleInterruptEv+0x14>
  }
}
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	08 95       	ret

000008f8 <_ZN12MCP2515Class11onInterruptEv>:
  SPI.endTransaction();
}

void MCP2515Class::onInterrupt()
{
  CAN.handleInterrupt();
     8f8:	84 e3       	ldi	r24, 0x34	; 52
     8fa:	94 e0       	ldi	r25, 0x04	; 4
     8fc:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <_ZN12MCP2515Class15handleInterruptEv>

00000900 <_ZN12MCP2515Class14modifyRegisterEhhh>:

  return value;
}

void MCP2515Class::modifyRegister(uint8_t address, uint8_t mask, uint8_t value)
{
     900:	ff 92       	push	r15
     902:	0f 93       	push	r16
     904:	1f 93       	push	r17
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	ec 01       	movw	r28, r24
     90c:	f6 2e       	mov	r15, r22
     90e:	04 2f       	mov	r16, r20
     910:	12 2f       	mov	r17, r18
  SPI.beginTransaction(_spiSettings);
     912:	8d a9       	ldd	r24, Y+53	; 0x35
     914:	9e a9       	ldd	r25, Y+54	; 0x36
     916:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN8SPIClass16beginTransactionE11SPISettings>
  digitalWrite(_csPin, LOW);
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	8f a9       	ldd	r24, Y+55	; 0x37
     91e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <digitalWrite>
  SPI.transfer(0x05);
     922:	85 e0       	ldi	r24, 0x05	; 5
     924:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_ZN8SPIClass8transferEh>
  SPI.transfer(address);
     928:	8f 2d       	mov	r24, r15
     92a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_ZN8SPIClass8transferEh>
  SPI.transfer(mask);
     92e:	80 2f       	mov	r24, r16
     930:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_ZN8SPIClass8transferEh>
  SPI.transfer(value);
     934:	81 2f       	mov	r24, r17
     936:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_ZN8SPIClass8transferEh>
  digitalWrite(_csPin, HIGH);
     93a:	61 e0       	ldi	r22, 0x01	; 1
     93c:	8f a9       	ldd	r24, Y+55	; 0x37
     93e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <digitalWrite>
  SPI.endTransaction();
}
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	1f 91       	pop	r17
     948:	0f 91       	pop	r16
     94a:	ff 90       	pop	r15
  SPI.transfer(0x05);
  SPI.transfer(address);
  SPI.transfer(mask);
  SPI.transfer(value);
  digitalWrite(_csPin, HIGH);
  SPI.endTransaction();
     94c:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <_ZN8SPIClass14endTransactionEv>

00000950 <_ZN12MCP2515Class11parsePacketEv>:

  return (readRegister(REG_TXBnCTRL(n)) & 0x70) ? 0 : 1;
}

int MCP2515Class::parsePacket()
{
     950:	9f 92       	push	r9
     952:	af 92       	push	r10
     954:	bf 92       	push	r11
     956:	cf 92       	push	r12
     958:	df 92       	push	r13
     95a:	ef 92       	push	r14
     95c:	ff 92       	push	r15
     95e:	0f 93       	push	r16
     960:	1f 93       	push	r17
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	ec 01       	movw	r28, r24
  int n;

  uint8_t intf = readRegister(REG_CANINTF);
     968:	6c e2       	ldi	r22, 0x2C	; 44
     96a:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN12MCP2515Class12readRegisterEh>

  if (intf & FLAG_RXnIF(0)) {
     96e:	80 fd       	sbrc	r24, 0
     970:	10 c0       	rjmp	.+32     	; 0x992 <_ZN12MCP2515Class11parsePacketEv+0x42>
    n = 0;
  } else if (intf & FLAG_RXnIF(1)) {
     972:	81 fd       	sbrc	r24, 1
     974:	10 c0       	rjmp	.+32     	; 0x996 <_ZN12MCP2515Class11parsePacketEv+0x46>
    n = 1;
  } else {
    _rxId = -1;
     976:	8f ef       	ldi	r24, 0xFF	; 255
     978:	9f ef       	ldi	r25, 0xFF	; 255
     97a:	dc 01       	movw	r26, r24
     97c:	89 a3       	std	Y+33, r24	; 0x21
     97e:	9a a3       	std	Y+34, r25	; 0x22
     980:	ab a3       	std	Y+35, r26	; 0x23
     982:	bc a3       	std	Y+36, r27	; 0x24
    _rxExtended = false;
     984:	1d a2       	std	Y+37, r1	; 0x25
    _rxRtr = false;
     986:	1e a2       	std	Y+38, r1	; 0x26
    _rxLength = 0;
     988:	1a a6       	std	Y+42, r1	; 0x2a
     98a:	19 a6       	std	Y+41, r1	; 0x29
    return 0;
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	a0 c0       	rjmp	.+320    	; 0xad2 <_ZN12MCP2515Class11parsePacketEv+0x182>
  int n;

  uint8_t intf = readRegister(REG_CANINTF);

  if (intf & FLAG_RXnIF(0)) {
    n = 0;
     992:	00 e0       	ldi	r16, 0x00	; 0
     994:	01 c0       	rjmp	.+2      	; 0x998 <_ZN12MCP2515Class11parsePacketEv+0x48>
  } else if (intf & FLAG_RXnIF(1)) {
    n = 1;
     996:	01 e0       	ldi	r16, 0x01	; 1
    _rxRtr = false;
    _rxLength = 0;
    return 0;
  }

  _rxExtended = (readRegister(REG_RXBnSIDL(n)) & FLAG_IDE) ? true : false;
     998:	10 2f       	mov	r17, r16
     99a:	12 95       	swap	r17
     99c:	10 7f       	andi	r17, 0xF0	; 240
     99e:	42 e6       	ldi	r20, 0x62	; 98
     9a0:	a4 2e       	mov	r10, r20
     9a2:	a1 0e       	add	r10, r17
     9a4:	6a 2d       	mov	r22, r10
     9a6:	ce 01       	movw	r24, r28
     9a8:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN12MCP2515Class12readRegisterEh>
     9ac:	83 fb       	bst	r24, 3
     9ae:	88 27       	eor	r24, r24
     9b0:	80 f9       	bld	r24, 0
     9b2:	8d a3       	std	Y+37, r24	; 0x25

  uint32_t idA = ((readRegister(REG_RXBnSIDH(n)) << 3) & 0x07f8) | ((readRegister(REG_RXBnSIDL(n)) >> 5) & 0x07);
     9b4:	61 e6       	ldi	r22, 0x61	; 97
     9b6:	61 0f       	add	r22, r17
     9b8:	ce 01       	movw	r24, r28
     9ba:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN12MCP2515Class12readRegisterEh>
     9be:	c8 2e       	mov	r12, r24
     9c0:	6a 2d       	mov	r22, r10
     9c2:	ce 01       	movw	r24, r28
     9c4:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN12MCP2515Class12readRegisterEh>
     9c8:	98 e0       	ldi	r25, 0x08	; 8
     9ca:	c9 9e       	mul	r12, r25
     9cc:	60 01       	movw	r12, r0
     9ce:	11 24       	eor	r1, r1
     9d0:	82 95       	swap	r24
     9d2:	86 95       	lsr	r24
     9d4:	87 70       	andi	r24, 0x07	; 7
     9d6:	c8 2a       	or	r12, r24
  if (_rxExtended) {
     9d8:	8d a1       	ldd	r24, Y+37	; 0x25
     9da:	0d 2c       	mov	r0, r13
     9dc:	00 0c       	add	r0, r0
     9de:	ee 08       	sbc	r14, r14
     9e0:	ff 08       	sbc	r15, r15
     9e2:	55 e6       	ldi	r21, 0x65	; 101
     9e4:	b5 2e       	mov	r11, r21
     9e6:	b1 0e       	add	r11, r17
     9e8:	88 23       	and	r24, r24
     9ea:	89 f1       	breq	.+98     	; 0xa4e <_ZN12MCP2515Class11parsePacketEv+0xfe>
    uint32_t idB = (((uint32_t)(readRegister(REG_RXBnSIDL(n)) & 0x03) << 16) & 0x30000) | ((readRegister(REG_RXBnEID8(n)) << 8) & 0xff00) | readRegister(REG_RXBnEID0(n));
     9ec:	6a 2d       	mov	r22, r10
     9ee:	ce 01       	movw	r24, r28
     9f0:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN12MCP2515Class12readRegisterEh>
     9f4:	98 2e       	mov	r9, r24
     9f6:	63 e6       	ldi	r22, 0x63	; 99
     9f8:	61 0f       	add	r22, r17
     9fa:	ce 01       	movw	r24, r28
     9fc:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN12MCP2515Class12readRegisterEh>
     a00:	a8 2e       	mov	r10, r24
     a02:	64 e6       	ldi	r22, 0x64	; 100
     a04:	61 0f       	add	r22, r17
     a06:	ce 01       	movw	r24, r28
     a08:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN12MCP2515Class12readRegisterEh>

    _rxId = (idA << 18) | idB;
     a0c:	99 2d       	mov	r25, r9
     a0e:	93 70       	andi	r25, 0x03	; 3
     a10:	22 e1       	ldi	r18, 0x12	; 18
     a12:	cc 0c       	add	r12, r12
     a14:	dd 1c       	adc	r13, r13
     a16:	ee 1c       	adc	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	2a 95       	dec	r18
     a1c:	d1 f7       	brne	.-12     	; 0xa12 <_ZN12MCP2515Class11parsePacketEv+0xc2>
     a1e:	c8 2a       	or	r12, r24
     a20:	e9 2a       	or	r14, r25
     a22:	8a 2d       	mov	r24, r10
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	98 2f       	mov	r25, r24
     a28:	88 27       	eor	r24, r24
     a2a:	a0 e0       	ldi	r26, 0x00	; 0
     a2c:	b0 e0       	ldi	r27, 0x00	; 0
     a2e:	c8 2a       	or	r12, r24
     a30:	d9 2a       	or	r13, r25
     a32:	ea 2a       	or	r14, r26
     a34:	fb 2a       	or	r15, r27
     a36:	c9 a2       	std	Y+33, r12	; 0x21
     a38:	da a2       	std	Y+34, r13	; 0x22
     a3a:	eb a2       	std	Y+35, r14	; 0x23
     a3c:	fc a2       	std	Y+36, r15	; 0x24
    _rxRtr = (readRegister(REG_RXBnDLC(n)) & FLAG_RTR) ? true : false;
     a3e:	6b 2d       	mov	r22, r11
     a40:	ce 01       	movw	r24, r28
     a42:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN12MCP2515Class12readRegisterEh>
     a46:	86 fb       	bst	r24, 6
     a48:	88 27       	eor	r24, r24
     a4a:	80 f9       	bld	r24, 0
     a4c:	0a c0       	rjmp	.+20     	; 0xa62 <_ZN12MCP2515Class11parsePacketEv+0x112>
  } else {
    _rxId = idA;
     a4e:	c9 a2       	std	Y+33, r12	; 0x21
     a50:	da a2       	std	Y+34, r13	; 0x22
     a52:	eb a2       	std	Y+35, r14	; 0x23
     a54:	fc a2       	std	Y+36, r15	; 0x24
    _rxRtr = (readRegister(REG_RXBnSIDL(n)) & FLAG_SRR) ? true : false;
     a56:	6a 2d       	mov	r22, r10
     a58:	ce 01       	movw	r24, r28
     a5a:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN12MCP2515Class12readRegisterEh>
     a5e:	82 95       	swap	r24
     a60:	81 70       	andi	r24, 0x01	; 1
     a62:	8e a3       	std	Y+38, r24	; 0x26
  }
  _rxDlc = readRegister(REG_RXBnDLC(n)) & 0x0f;
     a64:	6b 2d       	mov	r22, r11
     a66:	ce 01       	movw	r24, r28
     a68:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN12MCP2515Class12readRegisterEh>
     a6c:	8f 70       	andi	r24, 0x0F	; 15
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	98 a7       	std	Y+40, r25	; 0x28
     a72:	8f a3       	std	Y+39, r24	; 0x27
  _rxIndex = 0;
     a74:	1c a6       	std	Y+44, r1	; 0x2c
     a76:	1b a6       	std	Y+43, r1	; 0x2b

  if (_rxRtr) {
     a78:	2e a1       	ldd	r18, Y+38	; 0x26
     a7a:	22 23       	and	r18, r18
     a7c:	19 f0       	breq	.+6      	; 0xa84 <_ZN12MCP2515Class11parsePacketEv+0x134>
    _rxLength = 0;
     a7e:	1a a6       	std	Y+42, r1	; 0x2a
     a80:	19 a6       	std	Y+41, r1	; 0x29
     a82:	1a c0       	rjmp	.+52     	; 0xab8 <_ZN12MCP2515Class11parsePacketEv+0x168>
  } else {
    _rxLength = _rxDlc;
     a84:	9a a7       	std	Y+42, r25	; 0x2a
     a86:	89 a7       	std	Y+41, r24	; 0x29
     a88:	1a 59       	subi	r17, 0x9A	; 154
     a8a:	6e 01       	movw	r12, r28
     a8c:	ed e2       	ldi	r30, 0x2D	; 45
     a8e:	ce 0e       	add	r12, r30
     a90:	d1 1c       	adc	r13, r1

    for (int i = 0; i < _rxLength; i++) {
     a92:	e1 2c       	mov	r14, r1
     a94:	f1 2c       	mov	r15, r1
     a96:	89 a5       	ldd	r24, Y+41	; 0x29
     a98:	9a a5       	ldd	r25, Y+42	; 0x2a
     a9a:	e8 16       	cp	r14, r24
     a9c:	f9 06       	cpc	r15, r25
     a9e:	64 f4       	brge	.+24     	; 0xab8 <_ZN12MCP2515Class11parsePacketEv+0x168>
      _rxData[i] = readRegister(REG_RXBnD0(n) + i);
     aa0:	61 2f       	mov	r22, r17
     aa2:	ce 01       	movw	r24, r28
     aa4:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN12MCP2515Class12readRegisterEh>
     aa8:	f6 01       	movw	r30, r12
     aaa:	81 93       	st	Z+, r24
     aac:	6f 01       	movw	r12, r30
  if (_rxRtr) {
    _rxLength = 0;
  } else {
    _rxLength = _rxDlc;

    for (int i = 0; i < _rxLength; i++) {
     aae:	ff ef       	ldi	r31, 0xFF	; 255
     ab0:	ef 1a       	sub	r14, r31
     ab2:	ff 0a       	sbc	r15, r31
     ab4:	1f 5f       	subi	r17, 0xFF	; 255
     ab6:	ef cf       	rjmp	.-34     	; 0xa96 <_ZN12MCP2515Class11parsePacketEv+0x146>
      _rxData[i] = readRegister(REG_RXBnD0(n) + i);
    }
  }

  modifyRegister(REG_CANINTF, FLAG_RXnIF(n), 0x00);
     ab8:	41 e0       	ldi	r20, 0x01	; 1
     aba:	50 e0       	ldi	r21, 0x00	; 0
     abc:	01 c0       	rjmp	.+2      	; 0xac0 <_ZN12MCP2515Class11parsePacketEv+0x170>
     abe:	44 0f       	add	r20, r20
     ac0:	0a 95       	dec	r16
     ac2:	ea f7       	brpl	.-6      	; 0xabe <_ZN12MCP2515Class11parsePacketEv+0x16e>
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	6c e2       	ldi	r22, 0x2C	; 44
     ac8:	ce 01       	movw	r24, r28
     aca:	0e 94 80 04 	call	0x900	; 0x900 <_ZN12MCP2515Class14modifyRegisterEhhh>

  return _rxDlc;
     ace:	8f a1       	ldd	r24, Y+39	; 0x27
     ad0:	98 a5       	ldd	r25, Y+40	; 0x28
}
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	ff 90       	pop	r15
     adc:	ef 90       	pop	r14
     ade:	df 90       	pop	r13
     ae0:	cf 90       	pop	r12
     ae2:	bf 90       	pop	r11
     ae4:	af 90       	pop	r10
     ae6:	9f 90       	pop	r9
     ae8:	08 95       	ret

00000aea <_ZN12MCP2515Class13writeRegisterEhh>:
  digitalWrite(_csPin, HIGH);
  SPI.endTransaction();
}

void MCP2515Class::writeRegister(uint8_t address, uint8_t value)
{
     aea:	0f 93       	push	r16
     aec:	1f 93       	push	r17
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	ec 01       	movw	r28, r24
     af4:	06 2f       	mov	r16, r22
     af6:	14 2f       	mov	r17, r20
  SPI.beginTransaction(_spiSettings);
     af8:	8d a9       	ldd	r24, Y+53	; 0x35
     afa:	9e a9       	ldd	r25, Y+54	; 0x36
     afc:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN8SPIClass16beginTransactionE11SPISettings>
  digitalWrite(_csPin, LOW);
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	8f a9       	ldd	r24, Y+55	; 0x37
     b04:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <digitalWrite>
  SPI.transfer(0x02);
     b08:	82 e0       	ldi	r24, 0x02	; 2
     b0a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_ZN8SPIClass8transferEh>
  SPI.transfer(address);
     b0e:	80 2f       	mov	r24, r16
     b10:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_ZN8SPIClass8transferEh>
  SPI.transfer(value);
     b14:	81 2f       	mov	r24, r17
     b16:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_ZN8SPIClass8transferEh>
  digitalWrite(_csPin, HIGH);
     b1a:	61 e0       	ldi	r22, 0x01	; 1
     b1c:	8f a9       	ldd	r24, Y+55	; 0x37
     b1e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <digitalWrite>
  SPI.endTransaction();
}
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	1f 91       	pop	r17
     b28:	0f 91       	pop	r16
  digitalWrite(_csPin, LOW);
  SPI.transfer(0x02);
  SPI.transfer(address);
  SPI.transfer(value);
  digitalWrite(_csPin, HIGH);
  SPI.endTransaction();
     b2a:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <_ZN8SPIClass14endTransactionEv>

00000b2e <_ZN12MCP2515Class6filterEii>:
#endif
  }
}

int MCP2515Class::filter(int id, int mask)
{
     b2e:	cf 92       	push	r12
     b30:	df 92       	push	r13
     b32:	ef 92       	push	r14
     b34:	ff 92       	push	r15
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	ec 01       	movw	r28, r24
     b40:	7b 01       	movw	r14, r22
     b42:	8a 01       	movw	r16, r20
  id &= 0x7ff;
  mask &= 0x7ff;

  // config mode
  writeRegister(REG_CANCTRL, 0x80);
     b44:	40 e8       	ldi	r20, 0x80	; 128
     b46:	6f e0       	ldi	r22, 0x0F	; 15
     b48:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x80) {
     b4c:	6f e0       	ldi	r22, 0x0F	; 15
     b4e:	ce 01       	movw	r24, r28
     b50:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN12MCP2515Class12readRegisterEh>
     b54:	80 38       	cpi	r24, 0x80	; 128
     b56:	09 f0       	breq	.+2      	; 0xb5a <_ZN12MCP2515Class6filterEii+0x2c>
     b58:	7d c0       	rjmp	.+250    	; 0xc54 <_ZN12MCP2515Class6filterEii+0x126>
  }
}

int MCP2515Class::filter(int id, int mask)
{
  id &= 0x7ff;
     b5a:	87 e0       	ldi	r24, 0x07	; 7
     b5c:	f8 22       	and	r15, r24
  mask &= 0x7ff;
     b5e:	17 70       	andi	r17, 0x07	; 7
    return 0;
  }

  for (int n = 0; n < 2; n++) {
    // standard only
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM0);
     b60:	40 e2       	ldi	r20, 0x20	; 32
     b62:	60 e6       	ldi	r22, 0x60	; 96
     b64:	ce 01       	movw	r24, r28
     b66:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM0);
     b6a:	40 e2       	ldi	r20, 0x20	; 32
     b6c:	60 e6       	ldi	r22, 0x60	; 96
     b6e:	ce 01       	movw	r24, r28
     b70:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>

    writeRegister(REG_RXMnSIDH(n), mask >> 3);
     b74:	68 01       	movw	r12, r16
     b76:	83 e0       	ldi	r24, 0x03	; 3
     b78:	d5 94       	asr	r13
     b7a:	c7 94       	ror	r12
     b7c:	8a 95       	dec	r24
     b7e:	e1 f7       	brne	.-8      	; 0xb78 <_ZN12MCP2515Class6filterEii+0x4a>
     b80:	4c 2d       	mov	r20, r12
     b82:	60 e2       	ldi	r22, 0x20	; 32
     b84:	ce 01       	movw	r24, r28
     b86:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnSIDL(n), mask << 5);
     b8a:	02 95       	swap	r16
     b8c:	00 0f       	add	r16, r16
     b8e:	00 7e       	andi	r16, 0xE0	; 224
     b90:	40 2f       	mov	r20, r16
     b92:	61 e2       	ldi	r22, 0x21	; 33
     b94:	ce 01       	movw	r24, r28
     b96:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID8(n), 0);
     b9a:	40 e0       	ldi	r20, 0x00	; 0
     b9c:	62 e2       	ldi	r22, 0x22	; 34
     b9e:	ce 01       	movw	r24, r28
     ba0:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID0(n), 0);
     ba4:	40 e0       	ldi	r20, 0x00	; 0
     ba6:	63 e2       	ldi	r22, 0x23	; 35
     ba8:	ce 01       	movw	r24, r28
     baa:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    return 0;
  }

  for (int n = 0; n < 2; n++) {
    // standard only
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM0);
     bae:	40 e2       	ldi	r20, 0x20	; 32
     bb0:	60 e7       	ldi	r22, 0x70	; 112
     bb2:	ce 01       	movw	r24, r28
     bb4:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM0);
     bb8:	40 e2       	ldi	r20, 0x20	; 32
     bba:	60 e7       	ldi	r22, 0x70	; 112
     bbc:	ce 01       	movw	r24, r28
     bbe:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>

    writeRegister(REG_RXMnSIDH(n), mask >> 3);
     bc2:	4c 2d       	mov	r20, r12
     bc4:	64 e2       	ldi	r22, 0x24	; 36
     bc6:	ce 01       	movw	r24, r28
     bc8:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnSIDL(n), mask << 5);
     bcc:	40 2f       	mov	r20, r16
     bce:	65 e2       	ldi	r22, 0x25	; 37
     bd0:	ce 01       	movw	r24, r28
     bd2:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID8(n), 0);
     bd6:	40 e0       	ldi	r20, 0x00	; 0
     bd8:	66 e2       	ldi	r22, 0x26	; 38
     bda:	ce 01       	movw	r24, r28
     bdc:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID0(n), 0);
     be0:	40 e0       	ldi	r20, 0x00	; 0
     be2:	67 e2       	ldi	r22, 0x27	; 39
     be4:	ce 01       	movw	r24, r28
     be6:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
  }

  for (int n = 0; n < 6; n++) {
    writeRegister(REG_RXFnSIDH(n), id >> 3);
     bea:	a7 01       	movw	r20, r14
     bec:	93 e0       	ldi	r25, 0x03	; 3
     bee:	55 95       	asr	r21
     bf0:	47 95       	ror	r20
     bf2:	9a 95       	dec	r25
     bf4:	e1 f7       	brne	.-8      	; 0xbee <_ZN12MCP2515Class6filterEii+0xc0>
     bf6:	04 2f       	mov	r16, r20
    writeRegister(REG_RXFnSIDL(n), id << 5);
     bf8:	e2 94       	swap	r14
     bfa:	ee 0c       	add	r14, r14
     bfc:	20 ee       	ldi	r18, 0xE0	; 224
     bfe:	e2 22       	and	r14, r18
     c00:	10 e0       	ldi	r17, 0x00	; 0
    writeRegister(REG_RXMnEID8(n), 0);
    writeRegister(REG_RXMnEID0(n), 0);
  }

  for (int n = 0; n < 6; n++) {
    writeRegister(REG_RXFnSIDH(n), id >> 3);
     c02:	40 2f       	mov	r20, r16
     c04:	61 2f       	mov	r22, r17
     c06:	ce 01       	movw	r24, r28
     c08:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXFnSIDL(n), id << 5);
     c0c:	61 e0       	ldi	r22, 0x01	; 1
     c0e:	61 0f       	add	r22, r17
     c10:	4e 2d       	mov	r20, r14
     c12:	ce 01       	movw	r24, r28
     c14:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXFnEID8(n), 0);
     c18:	62 e0       	ldi	r22, 0x02	; 2
     c1a:	61 0f       	add	r22, r17
     c1c:	40 e0       	ldi	r20, 0x00	; 0
     c1e:	ce 01       	movw	r24, r28
     c20:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXFnEID0(n), 0);
     c24:	63 e0       	ldi	r22, 0x03	; 3
     c26:	61 0f       	add	r22, r17
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	ce 01       	movw	r24, r28
     c2c:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
     c30:	1c 5f       	subi	r17, 0xFC	; 252
    writeRegister(REG_RXMnSIDL(n), mask << 5);
    writeRegister(REG_RXMnEID8(n), 0);
    writeRegister(REG_RXMnEID0(n), 0);
  }

  for (int n = 0; n < 6; n++) {
     c32:	18 31       	cpi	r17, 0x18	; 24
     c34:	31 f7       	brne	.-52     	; 0xc02 <_ZN12MCP2515Class6filterEii+0xd4>
    writeRegister(REG_RXFnEID8(n), 0);
    writeRegister(REG_RXFnEID0(n), 0);
  }

  // normal mode
  writeRegister(REG_CANCTRL, 0x00);
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	6f e0       	ldi	r22, 0x0F	; 15
     c3a:	ce 01       	movw	r24, r28
     c3c:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x00) {
     c40:	6f e0       	ldi	r22, 0x0F	; 15
     c42:	ce 01       	movw	r24, r28
     c44:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN12MCP2515Class12readRegisterEh>
  mask &= 0x7ff;

  // config mode
  writeRegister(REG_CANCTRL, 0x80);
  if (readRegister(REG_CANCTRL) != 0x80) {
    return 0;
     c48:	21 e0       	ldi	r18, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	81 11       	cpse	r24, r1
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	82 2f       	mov	r24, r18
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <_ZN12MCP2515Class6filterEii+0x12a>
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
  if (readRegister(REG_CANCTRL) != 0x00) {
    return 0;
  }

  return 1;
}
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	1f 91       	pop	r17
     c5e:	0f 91       	pop	r16
     c60:	ff 90       	pop	r15
     c62:	ef 90       	pop	r14
     c64:	df 90       	pop	r13
     c66:	cf 90       	pop	r12
     c68:	08 95       	ret

00000c6a <_ZN12MCP2515Class14filterExtendedEll>:

int MCP2515Class::filterExtended(long id, long mask)
{
     c6a:	4f 92       	push	r4
     c6c:	5f 92       	push	r5
     c6e:	6f 92       	push	r6
     c70:	7f 92       	push	r7
     c72:	8f 92       	push	r8
     c74:	9f 92       	push	r9
     c76:	af 92       	push	r10
     c78:	bf 92       	push	r11
     c7a:	cf 92       	push	r12
     c7c:	df 92       	push	r13
     c7e:	ef 92       	push	r14
     c80:	ff 92       	push	r15
     c82:	0f 93       	push	r16
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	00 d0       	rcall	.+0      	; 0xc8c <_ZN12MCP2515Class14filterExtendedEll+0x22>
     c8c:	00 d0       	rcall	.+0      	; 0xc8e <_ZN12MCP2515Class14filterExtendedEll+0x24>
     c8e:	00 d0       	rcall	.+0      	; 0xc90 <_ZN12MCP2515Class14filterExtendedEll+0x26>
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	9e 83       	std	Y+6, r25	; 0x06
     c96:	8d 83       	std	Y+5, r24	; 0x05
     c98:	4a 01       	movw	r8, r20
     c9a:	5b 01       	movw	r10, r22
     c9c:	68 01       	movw	r12, r16
     c9e:	79 01       	movw	r14, r18
  id &= 0x1FFFFFFF;
  mask &= 0x1FFFFFFF;

  // config mode
  writeRegister(REG_CANCTRL, 0x80);
     ca0:	40 e8       	ldi	r20, 0x80	; 128
     ca2:	6f e0       	ldi	r22, 0x0F	; 15
     ca4:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x80) {
     ca8:	6f e0       	ldi	r22, 0x0F	; 15
     caa:	8d 81       	ldd	r24, Y+5	; 0x05
     cac:	9e 81       	ldd	r25, Y+6	; 0x06
     cae:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN12MCP2515Class12readRegisterEh>
     cb2:	80 38       	cpi	r24, 0x80	; 128
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <_ZN12MCP2515Class14filterExtendedEll+0x4e>
     cb6:	be c0       	rjmp	.+380    	; 0xe34 <_ZN12MCP2515Class14filterExtendedEll+0x1ca>
}

int MCP2515Class::filterExtended(long id, long mask)
{
  id &= 0x1FFFFFFF;
  mask &= 0x1FFFFFFF;
     cb8:	8f e1       	ldi	r24, 0x1F	; 31
     cba:	f8 22       	and	r15, r24
  for (int n = 0; n < 2; n++) {
    // extended only
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM1);
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM1);

    writeRegister(REG_RXMnSIDH(n), mask >> 21);
     cbc:	d7 01       	movw	r26, r14
     cbe:	c6 01       	movw	r24, r12
     cc0:	25 e1       	ldi	r18, 0x15	; 21
     cc2:	b5 95       	asr	r27
     cc4:	a7 95       	ror	r26
     cc6:	97 95       	ror	r25
     cc8:	87 95       	ror	r24
     cca:	2a 95       	dec	r18
     ccc:	d1 f7       	brne	.-12     	; 0xcc2 <_ZN12MCP2515Class14filterExtendedEll+0x58>
     cce:	89 83       	std	Y+1, r24	; 0x01
     cd0:	9a 83       	std	Y+2, r25	; 0x02
     cd2:	ab 83       	std	Y+3, r26	; 0x03
     cd4:	bc 83       	std	Y+4, r27	; 0x04
    writeRegister(REG_RXMnSIDL(n), (((mask >> 18) & 0x03) << 5) | FLAG_EXIDE | ((mask >> 16) & 0x03));
     cd6:	d7 01       	movw	r26, r14
     cd8:	c6 01       	movw	r24, r12
     cda:	3d e0       	ldi	r19, 0x0D	; 13
     cdc:	b6 95       	lsr	r27
     cde:	a7 95       	ror	r26
     ce0:	97 95       	ror	r25
     ce2:	87 95       	ror	r24
     ce4:	3a 95       	dec	r19
     ce6:	d1 f7       	brne	.-12     	; 0xcdc <_ZN12MCP2515Class14filterExtendedEll+0x72>
     ce8:	80 76       	andi	r24, 0x60	; 96
     cea:	99 27       	eor	r25, r25
     cec:	aa 27       	eor	r26, r26
     cee:	bb 27       	eor	r27, r27
     cf0:	1e 2d       	mov	r17, r14
     cf2:	13 70       	andi	r17, 0x03	; 3
     cf4:	18 60       	ori	r17, 0x08	; 8
     cf6:	18 2b       	or	r17, r24
    writeRegister(REG_RXMnEID8(n), (mask >> 8) & 0xff);
     cf8:	4d 2c       	mov	r4, r13
     cfa:	5e 2c       	mov	r5, r14
     cfc:	6f 2c       	mov	r6, r15
     cfe:	77 24       	eor	r7, r7
     d00:	67 fc       	sbrc	r6, 7
     d02:	7a 94       	dec	r7
    return 0;
  }

  for (int n = 0; n < 2; n++) {
    // extended only
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM1);
     d04:	40 e4       	ldi	r20, 0x40	; 64
     d06:	60 e6       	ldi	r22, 0x60	; 96
     d08:	8d 81       	ldd	r24, Y+5	; 0x05
     d0a:	9e 81       	ldd	r25, Y+6	; 0x06
     d0c:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM1);
     d10:	40 e4       	ldi	r20, 0x40	; 64
     d12:	60 e6       	ldi	r22, 0x60	; 96
     d14:	8d 81       	ldd	r24, Y+5	; 0x05
     d16:	9e 81       	ldd	r25, Y+6	; 0x06
     d18:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>

    writeRegister(REG_RXMnSIDH(n), mask >> 21);
     d1c:	49 81       	ldd	r20, Y+1	; 0x01
     d1e:	60 e2       	ldi	r22, 0x20	; 32
     d20:	8d 81       	ldd	r24, Y+5	; 0x05
     d22:	9e 81       	ldd	r25, Y+6	; 0x06
     d24:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnSIDL(n), (((mask >> 18) & 0x03) << 5) | FLAG_EXIDE | ((mask >> 16) & 0x03));
     d28:	41 2f       	mov	r20, r17
     d2a:	61 e2       	ldi	r22, 0x21	; 33
     d2c:	8d 81       	ldd	r24, Y+5	; 0x05
     d2e:	9e 81       	ldd	r25, Y+6	; 0x06
     d30:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID8(n), (mask >> 8) & 0xff);
     d34:	44 2d       	mov	r20, r4
     d36:	62 e2       	ldi	r22, 0x22	; 34
     d38:	8d 81       	ldd	r24, Y+5	; 0x05
     d3a:	9e 81       	ldd	r25, Y+6	; 0x06
     d3c:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID0(n), mask & 0xff);
     d40:	4c 2d       	mov	r20, r12
     d42:	63 e2       	ldi	r22, 0x23	; 35
     d44:	8d 81       	ldd	r24, Y+5	; 0x05
     d46:	9e 81       	ldd	r25, Y+6	; 0x06
     d48:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    return 0;
  }

  for (int n = 0; n < 2; n++) {
    // extended only
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM1);
     d4c:	40 e4       	ldi	r20, 0x40	; 64
     d4e:	60 e7       	ldi	r22, 0x70	; 112
     d50:	8d 81       	ldd	r24, Y+5	; 0x05
     d52:	9e 81       	ldd	r25, Y+6	; 0x06
     d54:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXBnCTRL(n), FLAG_RXM1);
     d58:	40 e4       	ldi	r20, 0x40	; 64
     d5a:	60 e7       	ldi	r22, 0x70	; 112
     d5c:	8d 81       	ldd	r24, Y+5	; 0x05
     d5e:	9e 81       	ldd	r25, Y+6	; 0x06
     d60:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>

    writeRegister(REG_RXMnSIDH(n), mask >> 21);
     d64:	49 81       	ldd	r20, Y+1	; 0x01
     d66:	64 e2       	ldi	r22, 0x24	; 36
     d68:	8d 81       	ldd	r24, Y+5	; 0x05
     d6a:	9e 81       	ldd	r25, Y+6	; 0x06
     d6c:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnSIDL(n), (((mask >> 18) & 0x03) << 5) | FLAG_EXIDE | ((mask >> 16) & 0x03));
     d70:	41 2f       	mov	r20, r17
     d72:	65 e2       	ldi	r22, 0x25	; 37
     d74:	8d 81       	ldd	r24, Y+5	; 0x05
     d76:	9e 81       	ldd	r25, Y+6	; 0x06
     d78:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID8(n), (mask >> 8) & 0xff);
     d7c:	44 2d       	mov	r20, r4
     d7e:	66 e2       	ldi	r22, 0x26	; 38
     d80:	8d 81       	ldd	r24, Y+5	; 0x05
     d82:	9e 81       	ldd	r25, Y+6	; 0x06
     d84:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXMnEID0(n), mask & 0xff);
     d88:	4c 2d       	mov	r20, r12
     d8a:	67 e2       	ldi	r22, 0x27	; 39
     d8c:	8d 81       	ldd	r24, Y+5	; 0x05
     d8e:	9e 81       	ldd	r25, Y+6	; 0x06
     d90:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
  return 1;
}

int MCP2515Class::filterExtended(long id, long mask)
{
  id &= 0x1FFFFFFF;
     d94:	9f e1       	ldi	r25, 0x1F	; 31
     d96:	b9 22       	and	r11, r25
    writeRegister(REG_RXMnEID8(n), (mask >> 8) & 0xff);
    writeRegister(REG_RXMnEID0(n), mask & 0xff);
  }

  for (int n = 0; n < 6; n++) {
    writeRegister(REG_RXFnSIDH(n), id >> 21);
     d98:	d5 01       	movw	r26, r10
     d9a:	c4 01       	movw	r24, r8
     d9c:	55 e1       	ldi	r21, 0x15	; 21
     d9e:	b5 95       	asr	r27
     da0:	a7 95       	ror	r26
     da2:	97 95       	ror	r25
     da4:	87 95       	ror	r24
     da6:	5a 95       	dec	r21
     da8:	d1 f7       	brne	.-12     	; 0xd9e <_ZN12MCP2515Class14filterExtendedEll+0x134>
     daa:	e8 2e       	mov	r14, r24
    writeRegister(REG_RXFnSIDL(n), (((id >> 18) & 0x03) << 5) | FLAG_EXIDE | ((id >> 16) & 0x03));
     dac:	8a 2d       	mov	r24, r10
     dae:	83 70       	andi	r24, 0x03	; 3
     db0:	28 2f       	mov	r18, r24
     db2:	28 60       	ori	r18, 0x08	; 8
     db4:	d5 01       	movw	r26, r10
     db6:	c4 01       	movw	r24, r8
     db8:	6d e0       	ldi	r22, 0x0D	; 13
     dba:	b6 95       	lsr	r27
     dbc:	a7 95       	ror	r26
     dbe:	97 95       	ror	r25
     dc0:	87 95       	ror	r24
     dc2:	6a 95       	dec	r22
     dc4:	d1 f7       	brne	.-12     	; 0xdba <_ZN12MCP2515Class14filterExtendedEll+0x150>
     dc6:	80 76       	andi	r24, 0x60	; 96
     dc8:	99 27       	eor	r25, r25
     dca:	aa 27       	eor	r26, r26
     dcc:	bb 27       	eor	r27, r27
     dce:	f2 2e       	mov	r15, r18
     dd0:	f8 2a       	or	r15, r24
    writeRegister(REG_RXFnEID8(n), (id >> 8) & 0xff);
     dd2:	d9 2c       	mov	r13, r9
     dd4:	10 e0       	ldi	r17, 0x00	; 0
    writeRegister(REG_RXMnEID8(n), (mask >> 8) & 0xff);
    writeRegister(REG_RXMnEID0(n), mask & 0xff);
  }

  for (int n = 0; n < 6; n++) {
    writeRegister(REG_RXFnSIDH(n), id >> 21);
     dd6:	4e 2d       	mov	r20, r14
     dd8:	61 2f       	mov	r22, r17
     dda:	8d 81       	ldd	r24, Y+5	; 0x05
     ddc:	9e 81       	ldd	r25, Y+6	; 0x06
     dde:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXFnSIDL(n), (((id >> 18) & 0x03) << 5) | FLAG_EXIDE | ((id >> 16) & 0x03));
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	61 0f       	add	r22, r17
     de6:	4f 2d       	mov	r20, r15
     de8:	8d 81       	ldd	r24, Y+5	; 0x05
     dea:	9e 81       	ldd	r25, Y+6	; 0x06
     dec:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXFnEID8(n), (id >> 8) & 0xff);
     df0:	62 e0       	ldi	r22, 0x02	; 2
     df2:	61 0f       	add	r22, r17
     df4:	4d 2d       	mov	r20, r13
     df6:	8d 81       	ldd	r24, Y+5	; 0x05
     df8:	9e 81       	ldd	r25, Y+6	; 0x06
     dfa:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_RXFnEID0(n), id & 0xff);
     dfe:	63 e0       	ldi	r22, 0x03	; 3
     e00:	61 0f       	add	r22, r17
     e02:	48 2d       	mov	r20, r8
     e04:	8d 81       	ldd	r24, Y+5	; 0x05
     e06:	9e 81       	ldd	r25, Y+6	; 0x06
     e08:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
     e0c:	1c 5f       	subi	r17, 0xFC	; 252
    writeRegister(REG_RXMnSIDL(n), (((mask >> 18) & 0x03) << 5) | FLAG_EXIDE | ((mask >> 16) & 0x03));
    writeRegister(REG_RXMnEID8(n), (mask >> 8) & 0xff);
    writeRegister(REG_RXMnEID0(n), mask & 0xff);
  }

  for (int n = 0; n < 6; n++) {
     e0e:	18 31       	cpi	r17, 0x18	; 24
     e10:	11 f7       	brne	.-60     	; 0xdd6 <_ZN12MCP2515Class14filterExtendedEll+0x16c>
    writeRegister(REG_RXFnEID8(n), (id >> 8) & 0xff);
    writeRegister(REG_RXFnEID0(n), id & 0xff);
  }

  // normal mode
  writeRegister(REG_CANCTRL, 0x00);
     e12:	40 e0       	ldi	r20, 0x00	; 0
     e14:	6f e0       	ldi	r22, 0x0F	; 15
     e16:	8d 81       	ldd	r24, Y+5	; 0x05
     e18:	9e 81       	ldd	r25, Y+6	; 0x06
     e1a:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x00) {
     e1e:	6f e0       	ldi	r22, 0x0F	; 15
     e20:	8d 81       	ldd	r24, Y+5	; 0x05
     e22:	9e 81       	ldd	r25, Y+6	; 0x06
     e24:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN12MCP2515Class12readRegisterEh>
  mask &= 0x1FFFFFFF;

  // config mode
  writeRegister(REG_CANCTRL, 0x80);
  if (readRegister(REG_CANCTRL) != 0x80) {
    return 0;
     e28:	21 e0       	ldi	r18, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	81 11       	cpse	r24, r1
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	82 2f       	mov	r24, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <_ZN12MCP2515Class14filterExtendedEll+0x1ce>
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e0       	ldi	r25, 0x00	; 0
  if (readRegister(REG_CANCTRL) != 0x00) {
    return 0;
  }

  return 1;
}
     e38:	26 96       	adiw	r28, 0x06	; 6
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	ff 90       	pop	r15
     e4e:	ef 90       	pop	r14
     e50:	df 90       	pop	r13
     e52:	cf 90       	pop	r12
     e54:	bf 90       	pop	r11
     e56:	af 90       	pop	r10
     e58:	9f 90       	pop	r9
     e5a:	8f 90       	pop	r8
     e5c:	7f 90       	pop	r7
     e5e:	6f 90       	pop	r6
     e60:	5f 90       	pop	r5
     e62:	4f 90       	pop	r4
     e64:	08 95       	ret

00000e66 <_ZN12MCP2515Class7observeEv>:

int MCP2515Class::observe()
{
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	ec 01       	movw	r28, r24
  writeRegister(REG_CANCTRL, 0x80);
     e6c:	40 e8       	ldi	r20, 0x80	; 128
     e6e:	6f e0       	ldi	r22, 0x0F	; 15
     e70:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x80) {
     e74:	6f e0       	ldi	r22, 0x0F	; 15
     e76:	ce 01       	movw	r24, r28
     e78:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN12MCP2515Class12readRegisterEh>
     e7c:	21 e0       	ldi	r18, 0x01	; 1
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	80 38       	cpi	r24, 0x80	; 128
     e82:	11 f0       	breq	.+4      	; 0xe88 <_ZN12MCP2515Class7observeEv+0x22>
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
  }

  return 1;
}
     e88:	c9 01       	movw	r24, r18
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	08 95       	ret

00000e90 <_ZN12MCP2515Class8loopbackEv>:

int MCP2515Class::loopback()
{
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	ec 01       	movw	r28, r24
  writeRegister(REG_CANCTRL, 0x40);
     e96:	40 e4       	ldi	r20, 0x40	; 64
     e98:	6f e0       	ldi	r22, 0x0F	; 15
     e9a:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x40) {
     e9e:	6f e0       	ldi	r22, 0x0F	; 15
     ea0:	ce 01       	movw	r24, r28
     ea2:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN12MCP2515Class12readRegisterEh>
     ea6:	21 e0       	ldi	r18, 0x01	; 1
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	80 34       	cpi	r24, 0x40	; 64
     eac:	11 f0       	breq	.+4      	; 0xeb2 <_ZN12MCP2515Class8loopbackEv+0x22>
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
  }

  return 1;
}
     eb2:	c9 01       	movw	r24, r18
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	08 95       	ret

00000eba <_ZN12MCP2515Class5sleepEv>:

int MCP2515Class::sleep()
{
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	ec 01       	movw	r28, r24
  writeRegister(REG_CANCTRL, 0x01);
     ec0:	41 e0       	ldi	r20, 0x01	; 1
     ec2:	6f e0       	ldi	r22, 0x0F	; 15
     ec4:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x01) {
     ec8:	6f e0       	ldi	r22, 0x0F	; 15
     eca:	ce 01       	movw	r24, r28
     ecc:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN12MCP2515Class12readRegisterEh>
     ed0:	21 e0       	ldi	r18, 0x01	; 1
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	11 f0       	breq	.+4      	; 0xedc <_ZN12MCP2515Class5sleepEv+0x22>
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
  }

  return 1;
}
     edc:	c9 01       	movw	r24, r18
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	08 95       	ret

00000ee4 <_ZN12MCP2515Class6wakeupEv>:

int MCP2515Class::wakeup()
{
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	ec 01       	movw	r28, r24
  writeRegister(REG_CANCTRL, 0x00);
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	6f e0       	ldi	r22, 0x0F	; 15
     eee:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x00) {
     ef2:	6f e0       	ldi	r22, 0x0F	; 15
     ef4:	ce 01       	movw	r24, r28
     ef6:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN12MCP2515Class12readRegisterEh>
     efa:	21 e0       	ldi	r18, 0x01	; 1
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	88 23       	and	r24, r24
     f00:	11 f0       	breq	.+4      	; 0xf06 <_ZN12MCP2515Class6wakeupEv+0x22>
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
    return 0;
  }

  return 1;
}
     f06:	c9 01       	movw	r24, r18
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	08 95       	ret

00000f0e <_ZN12MCP2515Class5beginEl.part.3.constprop.6>:

MCP2515Class::~MCP2515Class()
{
}

int MCP2515Class::begin(long baudRate)
     f0e:	8f 92       	push	r8
     f10:	9f 92       	push	r9
     f12:	af 92       	push	r10
     f14:	bf 92       	push	r11
     f16:	cf 92       	push	r12
     f18:	df 92       	push	r13
     f1a:	ef 92       	push	r14
     f1c:	ff 92       	push	r15
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	c8 50       	subi	r28, 0x08	; 8
     f2c:	d1 40       	sbci	r29, 0x01	; 1
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
    { (long)16E6,   (long)50E3, { 0x07, 0xfa, 0x87 } },
    { (long)16E6,   (long)40E3, { 0x07, 0xff, 0x87 } },
    { (long)16E6,   (long)20E3, { 0x0f, 0xff, 0x87 } },
    { (long)16E6,   (long)10E3, { 0x1f, 0xff, 0x87 } },
    { (long)16E6,    (long)5E3, { 0x3f, 0xff, 0x87 } },
  };
     f38:	28 e0       	ldi	r18, 0x08	; 8
     f3a:	31 e0       	ldi	r19, 0x01	; 1
     f3c:	ea e0       	ldi	r30, 0x0A	; 10
     f3e:	f1 e0       	ldi	r31, 0x01	; 1
     f40:	de 01       	movw	r26, r28
     f42:	11 96       	adiw	r26, 0x01	; 1
     f44:	01 90       	ld	r0, Z+
     f46:	0d 92       	st	X+, r0
     f48:	21 50       	subi	r18, 0x01	; 1
     f4a:	30 40       	sbci	r19, 0x00	; 0
     f4c:	d9 f7       	brne	.-10     	; 0xf44 <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x36>

  const uint8_t* cnf = NULL;

  for (unsigned int i = 0; i < (sizeof(CNF_MAPPER) / sizeof(CNF_MAPPER[0])); i++) {
    if (CNF_MAPPER[i].clockFrequency == _clockFrequency && CNF_MAPPER[i].baudRate == baudRate) {
     f4e:	fc 01       	movw	r30, r24
     f50:	c3 ac       	ldd	r12, Z+59	; 0x3b
     f52:	d4 ac       	ldd	r13, Z+60	; 0x3c
     f54:	e5 ac       	ldd	r14, Z+61	; 0x3d
     f56:	f6 ac       	ldd	r15, Z+62	; 0x3e
     f58:	fe 01       	movw	r30, r28
     f5a:	31 96       	adiw	r30, 0x01	; 1
    { (long)16E6,    (long)5E3, { 0x3f, 0xff, 0x87 } },
  };

  const uint8_t* cnf = NULL;

  for (unsigned int i = 0; i < (sizeof(CNF_MAPPER) / sizeof(CNF_MAPPER[0])); i++) {
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
    if (CNF_MAPPER[i].clockFrequency == _clockFrequency && CNF_MAPPER[i].baudRate == baudRate) {
     f60:	80 80       	ld	r8, Z
     f62:	91 80       	ldd	r9, Z+1	; 0x01
     f64:	a2 80       	ldd	r10, Z+2	; 0x02
     f66:	b3 80       	ldd	r11, Z+3	; 0x03
     f68:	8c 14       	cp	r8, r12
     f6a:	9d 04       	cpc	r9, r13
     f6c:	ae 04       	cpc	r10, r14
     f6e:	bf 04       	cpc	r11, r15
     f70:	09 f0       	breq	.+2      	; 0xf74 <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x66>
     f72:	54 c0       	rjmp	.+168    	; 0x101c <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x10e>
     f74:	84 80       	ldd	r8, Z+4	; 0x04
     f76:	95 80       	ldd	r9, Z+5	; 0x05
     f78:	a6 80       	ldd	r10, Z+6	; 0x06
     f7a:	b7 80       	ldd	r11, Z+7	; 0x07
     f7c:	84 16       	cp	r8, r20
     f7e:	95 06       	cpc	r9, r21
     f80:	a6 06       	cpc	r10, r22
     f82:	b7 06       	cpc	r11, r23
     f84:	09 f0       	breq	.+2      	; 0xf88 <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x7a>
     f86:	4a c0       	rjmp	.+148    	; 0x101c <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x10e>
     f88:	8c 01       	movw	r16, r24
      cnf = CNF_MAPPER[i].cnf;
     f8a:	8b e0       	ldi	r24, 0x0B	; 11
     f8c:	82 9f       	mul	r24, r18
     f8e:	70 01       	movw	r14, r0
     f90:	83 9f       	mul	r24, r19
     f92:	f0 0c       	add	r15, r0
     f94:	11 24       	eor	r1, r1
     f96:	f8 e0       	ldi	r31, 0x08	; 8
     f98:	ef 0e       	add	r14, r31
     f9a:	f1 1c       	adc	r15, r1
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	8c 0f       	add	r24, r28
     fa2:	9d 1f       	adc	r25, r29
     fa4:	e8 0e       	add	r14, r24
     fa6:	f9 1e       	adc	r15, r25

  if (cnf == NULL) {
    return 0;
  }

  writeRegister(REG_CNF1, cnf[0]);
     fa8:	f7 01       	movw	r30, r14
     faa:	40 81       	ld	r20, Z
     fac:	6a e2       	ldi	r22, 0x2A	; 42
     fae:	c8 01       	movw	r24, r16
     fb0:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
  writeRegister(REG_CNF2, cnf[1]);
     fb4:	f7 01       	movw	r30, r14
     fb6:	41 81       	ldd	r20, Z+1	; 0x01
     fb8:	69 e2       	ldi	r22, 0x29	; 41
     fba:	c8 01       	movw	r24, r16
     fbc:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
  writeRegister(REG_CNF3, cnf[2]);
     fc0:	f7 01       	movw	r30, r14
     fc2:	42 81       	ldd	r20, Z+2	; 0x02
     fc4:	68 e2       	ldi	r22, 0x28	; 40
     fc6:	c8 01       	movw	r24, r16
     fc8:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>

  writeRegister(REG_CANINTE, FLAG_RXnIE(1) | FLAG_RXnIE(0));
     fcc:	43 e0       	ldi	r20, 0x03	; 3
     fce:	6b e2       	ldi	r22, 0x2B	; 43
     fd0:	c8 01       	movw	r24, r16
     fd2:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
  writeRegister(REG_BFPCTRL, 0x00);
     fd6:	40 e0       	ldi	r20, 0x00	; 0
     fd8:	6c e0       	ldi	r22, 0x0C	; 12
     fda:	c8 01       	movw	r24, r16
     fdc:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
  writeRegister(REG_TXRTSCTRL, 0x00);
     fe0:	40 e0       	ldi	r20, 0x00	; 0
     fe2:	6d e0       	ldi	r22, 0x0D	; 13
     fe4:	c8 01       	movw	r24, r16
     fe6:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
  writeRegister(REG_RXBnCTRL(0), FLAG_RXM1 | FLAG_RXM0);
     fea:	40 e6       	ldi	r20, 0x60	; 96
     fec:	60 e6       	ldi	r22, 0x60	; 96
     fee:	c8 01       	movw	r24, r16
     ff0:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
  writeRegister(REG_RXBnCTRL(1), FLAG_RXM1 | FLAG_RXM0);
     ff4:	40 e6       	ldi	r20, 0x60	; 96
     ff6:	60 e7       	ldi	r22, 0x70	; 112
     ff8:	c8 01       	movw	r24, r16
     ffa:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>

  writeRegister(REG_CANCTRL, 0x00);
     ffe:	40 e0       	ldi	r20, 0x00	; 0
    1000:	6f e0       	ldi	r22, 0x0F	; 15
    1002:	c8 01       	movw	r24, r16
    1004:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x00) {
    1008:	6f e0       	ldi	r22, 0x0F	; 15
    100a:	c8 01       	movw	r24, r16
    100c:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN12MCP2515Class12readRegisterEh>
      break;
    }
  }

  if (cnf == NULL) {
    return 0;
    1010:	21 e0       	ldi	r18, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	81 11       	cpse	r24, r1
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	82 2f       	mov	r24, r18
    101a:	09 c0       	rjmp	.+18     	; 0x102e <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x120>
    { (long)16E6,    (long)5E3, { 0x3f, 0xff, 0x87 } },
  };

  const uint8_t* cnf = NULL;

  for (unsigned int i = 0; i < (sizeof(CNF_MAPPER) / sizeof(CNF_MAPPER[0])); i++) {
    101c:	2f 5f       	subi	r18, 0xFF	; 255
    101e:	3f 4f       	sbci	r19, 0xFF	; 255
    1020:	3b 96       	adiw	r30, 0x0b	; 11
    1022:	28 31       	cpi	r18, 0x18	; 24
    1024:	31 05       	cpc	r19, r1
    1026:	09 f0       	breq	.+2      	; 0x102a <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x11c>
    1028:	9b cf       	rjmp	.-202    	; 0xf60 <_ZN12MCP2515Class5beginEl.part.3.constprop.6+0x52>
      break;
    }
  }

  if (cnf == NULL) {
    return 0;
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
  if (readRegister(REG_CANCTRL) != 0x00) {
    return 0;
  }

  return 1;
}
    102e:	c8 5f       	subi	r28, 0xF8	; 248
    1030:	de 4f       	sbci	r29, 0xFE	; 254
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	ff 90       	pop	r15
    1046:	ef 90       	pop	r14
    1048:	df 90       	pop	r13
    104a:	cf 90       	pop	r12
    104c:	bf 90       	pop	r11
    104e:	af 90       	pop	r10
    1050:	9f 90       	pop	r9
    1052:	8f 90       	pop	r8
    1054:	08 95       	ret

00001056 <_GLOBAL__sub_I__ZN12MCP2515ClassC2Ev>:
void MCP2515Class::onInterrupt()
{
  CAN.handleInterrupt();
}

MCP2515Class CAN;
    1056:	84 e3       	ldi	r24, 0x34	; 52
    1058:	94 e0       	ldi	r25, 0x04	; 4
    105a:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <_ZN12MCP2515ClassC1Ev>

0000105e <_GLOBAL__sub_D__ZN12MCP2515ClassC2Ev>:
    105e:	84 e3       	ldi	r24, 0x34	; 52
    1060:	94 e0       	ldi	r25, 0x04	; 4
    1062:	0c 94 b9 03 	jmp	0x772	; 0x772 <_ZN12MCP2515ClassD1Ev>

00001066 <_ZN12MCP2515Class5beginEl>:
MCP2515Class::~MCP2515Class()
{
}

int MCP2515Class::begin(long baudRate)
{
    1066:	cf 92       	push	r12
    1068:	df 92       	push	r13
    106a:	ef 92       	push	r14
    106c:	ff 92       	push	r15
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	ec 01       	movw	r28, r24
    1074:	6a 01       	movw	r12, r20
    1076:	7b 01       	movw	r14, r22
  CANControllerClass::begin(baudRate);
    1078:	0e 94 99 02 	call	0x532	; 0x532 <_ZN18CANControllerClass5beginEl>

  pinMode(_csPin, OUTPUT);
    107c:	61 e0       	ldi	r22, 0x01	; 1
    107e:	8f a9       	ldd	r24, Y+55	; 0x37
    1080:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <pinMode>

  // start SPI
  SPI.begin();
    1084:	0e 94 87 09 	call	0x130e	; 0x130e <_ZN8SPIClass5beginEv>

  reset();
    1088:	ce 01       	movw	r24, r28
    108a:	0e 94 1c 04 	call	0x838	; 0x838 <_ZN12MCP2515Class5resetEv>

  writeRegister(REG_CANCTRL, 0x80);
    108e:	40 e8       	ldi	r20, 0x80	; 128
    1090:	6f e0       	ldi	r22, 0x0F	; 15
    1092:	ce 01       	movw	r24, r28
    1094:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
  if (readRegister(REG_CANCTRL) != 0x80) {
    1098:	6f e0       	ldi	r22, 0x0F	; 15
    109a:	ce 01       	movw	r24, r28
    109c:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN12MCP2515Class12readRegisterEh>
    10a0:	80 38       	cpi	r24, 0x80	; 128
    10a2:	59 f4       	brne	.+22     	; 0x10ba <_ZN12MCP2515Class5beginEl+0x54>
    10a4:	b7 01       	movw	r22, r14
    10a6:	a6 01       	movw	r20, r12
    10a8:	ce 01       	movw	r24, r28
  if (readRegister(REG_CANCTRL) != 0x00) {
    return 0;
  }

  return 1;
}
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	ff 90       	pop	r15
    10b0:	ef 90       	pop	r14
    10b2:	df 90       	pop	r13
    10b4:	cf 90       	pop	r12
    10b6:	0c 94 87 07 	jmp	0xf0e	; 0xf0e <_ZN12MCP2515Class5beginEl.part.3.constprop.6>
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	ff 90       	pop	r15
    10c4:	ef 90       	pop	r14
    10c6:	df 90       	pop	r13
    10c8:	cf 90       	pop	r12
    10ca:	08 95       	ret

000010cc <_ZN12MCP2515Class3endEv>:

void MCP2515Class::end()
{
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	ec 01       	movw	r28, r24
  SPI.end();
    10d2:	0e 94 bd 09 	call	0x137a	; 0x137a <_ZN8SPIClass3endEv>

  CANControllerClass::end();
    10d6:	ce 01       	movw	r24, r28
}
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28

void MCP2515Class::end()
{
  SPI.end();

  CANControllerClass::end();
    10dc:	0c 94 06 03 	jmp	0x60c	; 0x60c <_ZN18CANControllerClass3endEv>

000010e0 <_ZN12MCP2515Class9endPacketEv>:
}

int MCP2515Class::endPacket()
{
    10e0:	ef 92       	push	r14
    10e2:	ff 92       	push	r15
    10e4:	0f 93       	push	r16
    10e6:	1f 93       	push	r17
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	ec 01       	movw	r28, r24
  if (!CANControllerClass::endPacket()) {
    10ee:	0e 94 41 03 	call	0x682	; 0x682 <_ZN18CANControllerClass9endPacketEv>
    10f2:	00 97       	sbiw	r24, 0x00	; 0
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <_ZN12MCP2515Class9endPacketEv+0x18>
    10f6:	b4 c0       	rjmp	.+360    	; 0x1260 <_ZN12MCP2515Class9endPacketEv+0x180>
    return 0;
  }

  int n = 0;

  if (_txExtended) {
    10f8:	8b 89       	ldd	r24, Y+19	; 0x13
    10fa:	4f 85       	ldd	r20, Y+15	; 0x0f
    10fc:	58 89       	ldd	r21, Y+16	; 0x10
    10fe:	69 89       	ldd	r22, Y+17	; 0x11
    1100:	7a 89       	ldd	r23, Y+18	; 0x12
    1102:	88 23       	and	r24, r24
    1104:	b9 f1       	breq	.+110    	; 0x1174 <_ZN12MCP2515Class9endPacketEv+0x94>
    writeRegister(REG_TXBnSIDH(n), _txId >> 21);
    1106:	95 e1       	ldi	r25, 0x15	; 21
    1108:	75 95       	asr	r23
    110a:	67 95       	ror	r22
    110c:	57 95       	ror	r21
    110e:	47 95       	ror	r20
    1110:	9a 95       	dec	r25
    1112:	d1 f7       	brne	.-12     	; 0x1108 <_ZN12MCP2515Class9endPacketEv+0x28>
    1114:	61 e3       	ldi	r22, 0x31	; 49
    1116:	ce 01       	movw	r24, r28
    1118:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_TXBnSIDL(n), (((_txId >> 18) & 0x07) << 5) | FLAG_EXIDE | ((_txId >> 16) & 0x03));
    111c:	8f 85       	ldd	r24, Y+15	; 0x0f
    111e:	98 89       	ldd	r25, Y+16	; 0x10
    1120:	a9 89       	ldd	r26, Y+17	; 0x11
    1122:	ba 89       	ldd	r27, Y+18	; 0x12
    1124:	ac 01       	movw	r20, r24
    1126:	bd 01       	movw	r22, r26
    1128:	22 e1       	ldi	r18, 0x12	; 18
    112a:	75 95       	asr	r23
    112c:	67 95       	ror	r22
    112e:	57 95       	ror	r21
    1130:	47 95       	ror	r20
    1132:	2a 95       	dec	r18
    1134:	d1 f7       	brne	.-12     	; 0x112a <_ZN12MCP2515Class9endPacketEv+0x4a>
    1136:	35 e0       	ldi	r19, 0x05	; 5
    1138:	44 0f       	add	r20, r20
    113a:	55 1f       	adc	r21, r21
    113c:	66 1f       	adc	r22, r22
    113e:	77 1f       	adc	r23, r23
    1140:	3a 95       	dec	r19
    1142:	d1 f7       	brne	.-12     	; 0x1138 <_ZN12MCP2515Class9endPacketEv+0x58>
    1144:	8a 2f       	mov	r24, r26
    1146:	83 70       	andi	r24, 0x03	; 3
    1148:	48 2b       	or	r20, r24
    114a:	48 60       	ori	r20, 0x08	; 8
    114c:	62 e3       	ldi	r22, 0x32	; 50
    114e:	ce 01       	movw	r24, r28
    1150:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_TXBnEID8(n), (_txId >> 8) & 0xff);
    1154:	4f 85       	ldd	r20, Y+15	; 0x0f
    1156:	58 89       	ldd	r21, Y+16	; 0x10
    1158:	69 89       	ldd	r22, Y+17	; 0x11
    115a:	7a 89       	ldd	r23, Y+18	; 0x12
    115c:	45 2f       	mov	r20, r21
    115e:	56 2f       	mov	r21, r22
    1160:	67 2f       	mov	r22, r23
    1162:	77 27       	eor	r23, r23
    1164:	67 fd       	sbrc	r22, 7
    1166:	7a 95       	dec	r23
    1168:	63 e3       	ldi	r22, 0x33	; 51
    116a:	ce 01       	movw	r24, r28
    116c:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_TXBnEID0(n), _txId & 0xff);
    1170:	4f 85       	ldd	r20, Y+15	; 0x0f
    1172:	19 c0       	rjmp	.+50     	; 0x11a6 <_ZN12MCP2515Class9endPacketEv+0xc6>
  } else {
    writeRegister(REG_TXBnSIDH(n), _txId >> 3);
    1174:	83 e0       	ldi	r24, 0x03	; 3
    1176:	75 95       	asr	r23
    1178:	67 95       	ror	r22
    117a:	57 95       	ror	r21
    117c:	47 95       	ror	r20
    117e:	8a 95       	dec	r24
    1180:	d1 f7       	brne	.-12     	; 0x1176 <_ZN12MCP2515Class9endPacketEv+0x96>
    1182:	61 e3       	ldi	r22, 0x31	; 49
    1184:	ce 01       	movw	r24, r28
    1186:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_TXBnSIDL(n), _txId << 5);
    118a:	4f 85       	ldd	r20, Y+15	; 0x0f
    118c:	42 95       	swap	r20
    118e:	44 0f       	add	r20, r20
    1190:	40 7e       	andi	r20, 0xE0	; 224
    1192:	62 e3       	ldi	r22, 0x32	; 50
    1194:	ce 01       	movw	r24, r28
    1196:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_TXBnEID8(n), 0x00);
    119a:	40 e0       	ldi	r20, 0x00	; 0
    119c:	63 e3       	ldi	r22, 0x33	; 51
    119e:	ce 01       	movw	r24, r28
    11a0:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    writeRegister(REG_TXBnEID0(n), 0x00);
    11a4:	40 e0       	ldi	r20, 0x00	; 0
    11a6:	64 e3       	ldi	r22, 0x34	; 52
    11a8:	ce 01       	movw	r24, r28
    11aa:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
  }

  if (_txRtr) {
    11ae:	8c 89       	ldd	r24, Y+20	; 0x14
    writeRegister(REG_TXBnDLC(n), 0x40 | _txLength);
    11b0:	4f 89       	ldd	r20, Y+23	; 0x17
    writeRegister(REG_TXBnSIDL(n), _txId << 5);
    writeRegister(REG_TXBnEID8(n), 0x00);
    writeRegister(REG_TXBnEID0(n), 0x00);
  }

  if (_txRtr) {
    11b2:	88 23       	and	r24, r24
    11b4:	31 f0       	breq	.+12     	; 0x11c2 <_ZN12MCP2515Class9endPacketEv+0xe2>
    writeRegister(REG_TXBnDLC(n), 0x40 | _txLength);
    11b6:	40 64       	ori	r20, 0x40	; 64
    11b8:	65 e3       	ldi	r22, 0x35	; 53
    11ba:	ce 01       	movw	r24, r28
    11bc:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    11c0:	1a c0       	rjmp	.+52     	; 0x11f6 <_ZN12MCP2515Class9endPacketEv+0x116>
  } else {
    writeRegister(REG_TXBnDLC(n), _txLength);
    11c2:	65 e3       	ldi	r22, 0x35	; 53
    11c4:	ce 01       	movw	r24, r28
    11c6:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
    11ca:	7e 01       	movw	r14, r28
    11cc:	89 e1       	ldi	r24, 0x19	; 25
    11ce:	e8 0e       	add	r14, r24
    11d0:	f1 1c       	adc	r15, r1

    for (int i = 0; i < _txLength; i++) {
    11d2:	00 e0       	ldi	r16, 0x00	; 0
    11d4:	10 e0       	ldi	r17, 0x00	; 0
    11d6:	8f 89       	ldd	r24, Y+23	; 0x17
    11d8:	98 8d       	ldd	r25, Y+24	; 0x18
    11da:	08 17       	cp	r16, r24
    11dc:	19 07       	cpc	r17, r25
    11de:	5c f4       	brge	.+22     	; 0x11f6 <_ZN12MCP2515Class9endPacketEv+0x116>
      writeRegister(REG_TXBnD0(n) + i, _txData[i]);
    11e0:	f7 01       	movw	r30, r14
    11e2:	41 91       	ld	r20, Z+
    11e4:	7f 01       	movw	r14, r30
    11e6:	66 e3       	ldi	r22, 0x36	; 54
    11e8:	60 0f       	add	r22, r16
    11ea:	ce 01       	movw	r24, r28
    11ec:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>
  if (_txRtr) {
    writeRegister(REG_TXBnDLC(n), 0x40 | _txLength);
  } else {
    writeRegister(REG_TXBnDLC(n), _txLength);

    for (int i = 0; i < _txLength; i++) {
    11f0:	0f 5f       	subi	r16, 0xFF	; 255
    11f2:	1f 4f       	sbci	r17, 0xFF	; 255
    11f4:	f0 cf       	rjmp	.-32     	; 0x11d6 <_ZN12MCP2515Class9endPacketEv+0xf6>
      writeRegister(REG_TXBnD0(n) + i, _txData[i]);
    }
  }

  writeRegister(REG_TXBnCTRL(n), 0x08);
    11f6:	48 e0       	ldi	r20, 0x08	; 8
    11f8:	60 e3       	ldi	r22, 0x30	; 48
    11fa:	ce 01       	movw	r24, r28
    11fc:	0e 94 75 05 	call	0xaea	; 0xaea <_ZN12MCP2515Class13writeRegisterEhh>

  bool aborted = false;
    1200:	10 e0       	ldi	r17, 0x00	; 0

  while (readRegister(REG_TXBnCTRL(n)) & 0x08) {
    1202:	60 e3       	ldi	r22, 0x30	; 48
    1204:	ce 01       	movw	r24, r28
    1206:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN12MCP2515Class12readRegisterEh>
    120a:	83 ff       	sbrs	r24, 3
    120c:	10 c0       	rjmp	.+32     	; 0x122e <_ZN12MCP2515Class9endPacketEv+0x14e>
    if (readRegister(REG_TXBnCTRL(n)) & 0x10) {
    120e:	60 e3       	ldi	r22, 0x30	; 48
    1210:	ce 01       	movw	r24, r28
    1212:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN12MCP2515Class12readRegisterEh>
    1216:	84 ff       	sbrs	r24, 4
    1218:	07 c0       	rjmp	.+14     	; 0x1228 <_ZN12MCP2515Class9endPacketEv+0x148>
      // abort
      aborted = true;

      modifyRegister(REG_CANCTRL, 0x10, 0x10);
    121a:	20 e1       	ldi	r18, 0x10	; 16
    121c:	40 e1       	ldi	r20, 0x10	; 16
    121e:	6f e0       	ldi	r22, 0x0F	; 15
    1220:	ce 01       	movw	r24, r28
    1222:	0e 94 80 04 	call	0x900	; 0x900 <_ZN12MCP2515Class14modifyRegisterEhhh>
  bool aborted = false;

  while (readRegister(REG_TXBnCTRL(n)) & 0x08) {
    if (readRegister(REG_TXBnCTRL(n)) & 0x10) {
      // abort
      aborted = true;
    1226:	11 e0       	ldi	r17, 0x01	; 1

      modifyRegister(REG_CANCTRL, 0x10, 0x10);
    }

    yield();
    1228:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <yield>
    122c:	ea cf       	rjmp	.-44     	; 0x1202 <_ZN12MCP2515Class9endPacketEv+0x122>
  }

  if (aborted) {
    122e:	11 23       	and	r17, r17
    1230:	31 f0       	breq	.+12     	; 0x123e <_ZN12MCP2515Class9endPacketEv+0x15e>
    // clear abort command
    modifyRegister(REG_CANCTRL, 0x10, 0x00);
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	40 e1       	ldi	r20, 0x10	; 16
    1236:	6f e0       	ldi	r22, 0x0F	; 15
    1238:	ce 01       	movw	r24, r28
    123a:	0e 94 80 04 	call	0x900	; 0x900 <_ZN12MCP2515Class14modifyRegisterEhhh>
  }

  modifyRegister(REG_CANINTF, FLAG_TXnIF(n), 0x00);
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	44 e0       	ldi	r20, 0x04	; 4
    1242:	6c e2       	ldi	r22, 0x2C	; 44
    1244:	ce 01       	movw	r24, r28
    1246:	0e 94 80 04 	call	0x900	; 0x900 <_ZN12MCP2515Class14modifyRegisterEhhh>

  return (readRegister(REG_TXBnCTRL(n)) & 0x70) ? 0 : 1;
    124a:	60 e3       	ldi	r22, 0x30	; 48
    124c:	ce 01       	movw	r24, r28
    124e:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN12MCP2515Class12readRegisterEh>
    1252:	80 77       	andi	r24, 0x70	; 112
    1254:	31 e0       	ldi	r19, 0x01	; 1
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	09 f0       	breq	.+2      	; 0x125c <_ZN12MCP2515Class9endPacketEv+0x17c>
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	83 2f       	mov	r24, r19
    125e:	92 2f       	mov	r25, r18
}
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	ff 90       	pop	r15
    126a:	ef 90       	pop	r14
    126c:	08 95       	ret

0000126e <_ZN12MCP2515Class9onReceiveEPFviE>:

  return _rxDlc;
}

void MCP2515Class::onReceive(void(*callback)(int))
{
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	ec 01       	movw	r28, r24
    1278:	8b 01       	movw	r16, r22
  CANControllerClass::onReceive(callback);
    127a:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN18CANControllerClass9onReceiveEPFviE>

  pinMode(_intPin, INPUT);
    127e:	60 e0       	ldi	r22, 0x00	; 0
    1280:	89 ad       	ldd	r24, Y+57	; 0x39
    1282:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <pinMode>
    1286:	89 ad       	ldd	r24, Y+57	; 0x39
    1288:	9a ad       	ldd	r25, Y+58	; 0x3a

  if (callback) {
    128a:	01 2b       	or	r16, r17
    128c:	11 f1       	breq	.+68     	; 0x12d2 <_ZN12MCP2515Class9onReceiveEPFviE+0x64>
    SPI.usingInterrupt(digitalPinToInterrupt(_intPin));
    128e:	82 30       	cpi	r24, 0x02	; 2
    1290:	91 05       	cpc	r25, r1
    1292:	21 f0       	breq	.+8      	; 0x129c <_ZN12MCP2515Class9onReceiveEPFviE+0x2e>
    1294:	03 97       	sbiw	r24, 0x03	; 3
    1296:	21 f0       	breq	.+8      	; 0x12a0 <_ZN12MCP2515Class9onReceiveEPFviE+0x32>
    1298:	8f ef       	ldi	r24, 0xFF	; 255
    129a:	03 c0       	rjmp	.+6      	; 0x12a2 <_ZN12MCP2515Class9onReceiveEPFviE+0x34>
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	01 c0       	rjmp	.+2      	; 0x12a2 <_ZN12MCP2515Class9onReceiveEPFviE+0x34>
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <_ZN8SPIClass14usingInterruptEh>
    attachInterrupt(digitalPinToInterrupt(_intPin), MCP2515Class::onInterrupt, LOW);
    12a6:	89 ad       	ldd	r24, Y+57	; 0x39
    12a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    12aa:	82 30       	cpi	r24, 0x02	; 2
    12ac:	91 05       	cpc	r25, r1
    12ae:	21 f0       	breq	.+8      	; 0x12b8 <_ZN12MCP2515Class9onReceiveEPFviE+0x4a>
    12b0:	03 97       	sbiw	r24, 0x03	; 3
    12b2:	21 f0       	breq	.+8      	; 0x12bc <_ZN12MCP2515Class9onReceiveEPFviE+0x4e>
    12b4:	8f ef       	ldi	r24, 0xFF	; 255
    12b6:	03 c0       	rjmp	.+6      	; 0x12be <_ZN12MCP2515Class9onReceiveEPFviE+0x50>
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	01 c0       	rjmp	.+2      	; 0x12be <_ZN12MCP2515Class9onReceiveEPFviE+0x50>
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	40 e0       	ldi	r20, 0x00	; 0
    12c0:	50 e0       	ldi	r21, 0x00	; 0
    12c2:	6c e7       	ldi	r22, 0x7C	; 124
    12c4:	74 e0       	ldi	r23, 0x04	; 4
    detachInterrupt(digitalPinToInterrupt(_intPin));
#ifdef SPI_HAS_NOTUSINGINTERRUPT
    SPI.notUsingInterrupt(digitalPinToInterrupt(_intPin));
#endif
  }
}
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16

  pinMode(_intPin, INPUT);

  if (callback) {
    SPI.usingInterrupt(digitalPinToInterrupt(_intPin));
    attachInterrupt(digitalPinToInterrupt(_intPin), MCP2515Class::onInterrupt, LOW);
    12ce:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <attachInterrupt>
  } else {
    detachInterrupt(digitalPinToInterrupt(_intPin));
    12d2:	82 30       	cpi	r24, 0x02	; 2
    12d4:	91 05       	cpc	r25, r1
    12d6:	21 f0       	breq	.+8      	; 0x12e0 <_ZN12MCP2515Class9onReceiveEPFviE+0x72>
    12d8:	03 97       	sbiw	r24, 0x03	; 3
    12da:	21 f0       	breq	.+8      	; 0x12e4 <_ZN12MCP2515Class9onReceiveEPFviE+0x76>
    12dc:	8f ef       	ldi	r24, 0xFF	; 255
    12de:	03 c0       	rjmp	.+6      	; 0x12e6 <_ZN12MCP2515Class9onReceiveEPFviE+0x78>
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	01 c0       	rjmp	.+2      	; 0x12e6 <_ZN12MCP2515Class9onReceiveEPFviE+0x78>
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <detachInterrupt>
#ifdef SPI_HAS_NOTUSINGINTERRUPT
    SPI.notUsingInterrupt(digitalPinToInterrupt(_intPin));
    12ea:	89 ad       	ldd	r24, Y+57	; 0x39
    12ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    12ee:	82 30       	cpi	r24, 0x02	; 2
    12f0:	91 05       	cpc	r25, r1
    12f2:	21 f0       	breq	.+8      	; 0x12fc <_ZN12MCP2515Class9onReceiveEPFviE+0x8e>
    12f4:	03 97       	sbiw	r24, 0x03	; 3
    12f6:	21 f0       	breq	.+8      	; 0x1300 <_ZN12MCP2515Class9onReceiveEPFviE+0x92>
    12f8:	8f ef       	ldi	r24, 0xFF	; 255
    12fa:	03 c0       	rjmp	.+6      	; 0x1302 <_ZN12MCP2515Class9onReceiveEPFviE+0x94>
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	01 c0       	rjmp	.+2      	; 0x1302 <_ZN12MCP2515Class9onReceiveEPFviE+0x94>
    1300:	81 e0       	ldi	r24, 0x01	; 1
#endif
  }
}
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	0f 91       	pop	r16
    SPI.usingInterrupt(digitalPinToInterrupt(_intPin));
    attachInterrupt(digitalPinToInterrupt(_intPin), MCP2515Class::onInterrupt, LOW);
  } else {
    detachInterrupt(digitalPinToInterrupt(_intPin));
#ifdef SPI_HAS_NOTUSINGINTERRUPT
    SPI.notUsingInterrupt(digitalPinToInterrupt(_intPin));
    130a:	0c 94 ed 09 	jmp	0x13da	; 0x13da <_ZN8SPIClass17notUsingInterruptEh>

0000130e <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    130e:	cf 93       	push	r28
  uint8_t sreg = SREG;
    1310:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    1312:	f8 94       	cli
  if (!initialized) {
    1314:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <_ZN8SPIClass11initializedE>
    1318:	81 11       	cpse	r24, r1
    131a:	27 c0       	rjmp	.+78     	; 0x136a <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    131c:	ea e9       	ldi	r30, 0x9A	; 154
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    1322:	e6 e8       	ldi	r30, 0x86	; 134
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    1328:	e8 2f       	mov	r30, r24
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	ee 0f       	add	r30, r30
    132e:	ff 1f       	adc	r31, r31
    1330:	e2 55       	subi	r30, 0x52	; 82
    1332:	ff 4f       	sbci	r31, 0xFF	; 255
    1334:	a5 91       	lpm	r26, Z+
    1336:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    1338:	ec 91       	ld	r30, X
    133a:	e9 23       	and	r30, r25
    133c:	21 f4       	brne	.+8      	; 0x1346 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    133e:	61 e0       	ldi	r22, 0x01	; 1
    1340:	8a e0       	ldi	r24, 0x0A	; 10
    1342:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    1346:	61 e0       	ldi	r22, 0x01	; 1
    1348:	8a e0       	ldi	r24, 0x0A	; 10
    134a:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    134e:	8c b5       	in	r24, 0x2c	; 44
    1350:	80 61       	ori	r24, 0x10	; 16
    1352:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    1354:	8c b5       	in	r24, 0x2c	; 44
    1356:	80 64       	ori	r24, 0x40	; 64
    1358:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    135a:	61 e0       	ldi	r22, 0x01	; 1
    135c:	8d e0       	ldi	r24, 0x0D	; 13
    135e:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <pinMode>
    pinMode(MOSI, OUTPUT);
    1362:	61 e0       	ldi	r22, 0x01	; 1
    1364:	8b e0       	ldi	r24, 0x0B	; 11
    1366:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <pinMode>
  }
  initialized++; // reference count
    136a:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <_ZN8SPIClass11initializedE>
    136e:	8f 5f       	subi	r24, 0xFF	; 255
    1370:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    1374:	cf bf       	out	0x3f, r28	; 63
}
    1376:	cf 91       	pop	r28
    1378:	08 95       	ret

0000137a <_ZN8SPIClass3endEv>:

void SPIClass::end() {
  uint8_t sreg = SREG;
    137a:	9f b7       	in	r25, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    137c:	f8 94       	cli
  // Decrease the reference counter
  if (initialized)
    137e:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <_ZN8SPIClass11initializedE>
    1382:	88 23       	and	r24, r24
    1384:	19 f0       	breq	.+6      	; 0x138c <_ZN8SPIClass3endEv+0x12>
    initialized--;
    1386:	81 50       	subi	r24, 0x01	; 1
    1388:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <_ZN8SPIClass11initializedE>
  // If there are no more references disable SPI
  if (!initialized) {
    138c:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <_ZN8SPIClass11initializedE>
    1390:	81 11       	cpse	r24, r1
    1392:	05 c0       	rjmp	.+10     	; 0x139e <_ZN8SPIClass3endEv+0x24>
    SPCR &= ~_BV(SPE);
    1394:	8c b5       	in	r24, 0x2c	; 44
    1396:	8f 7b       	andi	r24, 0xBF	; 191
    1398:	8c bd       	out	0x2c, r24	; 44
    interruptMode = 0;
    139a:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <_ZN8SPIClass13interruptModeE>
    #ifdef SPI_TRANSACTION_MISMATCH_LED
    inTransactionFlag = 0;
    #endif
  }
  SREG = sreg;
    139e:	9f bf       	out	0x3f, r25	; 63
    13a0:	08 95       	ret

000013a2 <_ZN8SPIClass14usingInterruptEh>:
#endif

void SPIClass::usingInterrupt(uint8_t interruptNumber)
{
  uint8_t mask = 0;
  uint8_t sreg = SREG;
    13a2:	9f b7       	in	r25, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    13a4:	f8 94       	cli
  switch (interruptNumber) {
    13a6:	88 23       	and	r24, r24
    13a8:	49 f0       	breq	.+18     	; 0x13bc <_ZN8SPIClass14usingInterruptEh+0x1a>
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	11 f4       	brne	.+4      	; 0x13b2 <_ZN8SPIClass14usingInterruptEh+0x10>
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
  #endif
  #ifdef SPI_INT1_MASK
  case 1: mask = SPI_INT1_MASK; break;
    13ae:	82 e0       	ldi	r24, 0x02	; 2
    13b0:	06 c0       	rjmp	.+12     	; 0x13be <_ZN8SPIClass14usingInterruptEh+0x1c>
  #endif
  #ifdef SPI_INT7_MASK
  case 7: mask = SPI_INT7_MASK; break;
  #endif
  default:
    interruptMode = 2;
    13b2:	82 e0       	ldi	r24, 0x02	; 2
    13b4:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <_ZN8SPIClass13interruptModeE>
  #endif
#endif

void SPIClass::usingInterrupt(uint8_t interruptNumber)
{
  uint8_t mask = 0;
    13b8:	80 e0       	ldi	r24, 0x00	; 0
  #ifdef SPI_INT7_MASK
  case 7: mask = SPI_INT7_MASK; break;
  #endif
  default:
    interruptMode = 2;
    break;
    13ba:	01 c0       	rjmp	.+2      	; 0x13be <_ZN8SPIClass14usingInterruptEh+0x1c>
  uint8_t mask = 0;
  uint8_t sreg = SREG;
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
  switch (interruptNumber) {
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
    13bc:	81 e0       	ldi	r24, 0x01	; 1
  #endif
  default:
    interruptMode = 2;
    break;
  }
  interruptMask |= mask;
    13be:	20 91 74 04 	lds	r18, 0x0474	; 0x800474 <_ZN8SPIClass13interruptMaskE>
    13c2:	82 2b       	or	r24, r18
    13c4:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <_ZN8SPIClass13interruptMaskE>
  if (!interruptMode)
    13c8:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <_ZN8SPIClass13interruptModeE>
    13cc:	81 11       	cpse	r24, r1
    13ce:	03 c0       	rjmp	.+6      	; 0x13d6 <_ZN8SPIClass14usingInterruptEh+0x34>
    interruptMode = 1;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <_ZN8SPIClass13interruptModeE>
  SREG = sreg;
    13d6:	9f bf       	out	0x3f, r25	; 63
    13d8:	08 95       	ret

000013da <_ZN8SPIClass17notUsingInterruptEh>:
}

void SPIClass::notUsingInterrupt(uint8_t interruptNumber)
{
  // Once in mode 2 we can't go back to 0 without a proper reference count
  if (interruptMode == 2)
    13da:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <_ZN8SPIClass13interruptModeE>
    13de:	92 30       	cpi	r25, 0x02	; 2
    13e0:	b1 f0       	breq	.+44     	; 0x140e <_ZN8SPIClass17notUsingInterruptEh+0x34>
    return;
  uint8_t mask = 0;
  uint8_t sreg = SREG;
    13e2:	2f b7       	in	r18, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    13e4:	f8 94       	cli
  switch (interruptNumber) {
    13e6:	88 23       	and	r24, r24
    13e8:	21 f0       	breq	.+8      	; 0x13f2 <_ZN8SPIClass17notUsingInterruptEh+0x18>
    13ea:	81 30       	cpi	r24, 0x01	; 1
    13ec:	21 f4       	brne	.+8      	; 0x13f6 <_ZN8SPIClass17notUsingInterruptEh+0x1c>
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
  #endif
  #ifdef SPI_INT1_MASK
  case 1: mask = SPI_INT1_MASK; break;
    13ee:	82 e0       	ldi	r24, 0x02	; 2
    13f0:	03 c0       	rjmp	.+6      	; 0x13f8 <_ZN8SPIClass17notUsingInterruptEh+0x1e>
  uint8_t mask = 0;
  uint8_t sreg = SREG;
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
  switch (interruptNumber) {
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	01 c0       	rjmp	.+2      	; 0x13f8 <_ZN8SPIClass17notUsingInterruptEh+0x1e>
void SPIClass::notUsingInterrupt(uint8_t interruptNumber)
{
  // Once in mode 2 we can't go back to 0 without a proper reference count
  if (interruptMode == 2)
    return;
  uint8_t mask = 0;
    13f6:	80 e0       	ldi	r24, 0x00	; 0
  #endif
  default:
    break;
    // this case can't be reached
  }
  interruptMask &= ~mask;
    13f8:	80 95       	com	r24
    13fa:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <_ZN8SPIClass13interruptMaskE>
    13fe:	89 23       	and	r24, r25
    1400:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <_ZN8SPIClass13interruptMaskE>
  if (!interruptMask)
    1404:	81 11       	cpse	r24, r1
    1406:	02 c0       	rjmp	.+4      	; 0x140c <_ZN8SPIClass17notUsingInterruptEh+0x32>
    interruptMode = 0;
    1408:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <_ZN8SPIClass13interruptModeE>
  SREG = sreg;
    140c:	2f bf       	out	0x3f, r18	; 63
    140e:	08 95       	ret

00001410 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1410:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1412:	91 8d       	ldd	r25, Z+25	; 0x19
    1414:	22 8d       	ldd	r18, Z+26	; 0x1a
    1416:	89 2f       	mov	r24, r25
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	80 5c       	subi	r24, 0xC0	; 192
    141c:	9f 4f       	sbci	r25, 0xFF	; 255
    141e:	82 1b       	sub	r24, r18
    1420:	91 09       	sbc	r25, r1
}
    1422:	8f 73       	andi	r24, 0x3F	; 63
    1424:	99 27       	eor	r25, r25
    1426:	08 95       	ret

00001428 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1428:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    142a:	91 8d       	ldd	r25, Z+25	; 0x19
    142c:	82 8d       	ldd	r24, Z+26	; 0x1a
    142e:	98 17       	cp	r25, r24
    1430:	31 f0       	breq	.+12     	; 0x143e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1432:	82 8d       	ldd	r24, Z+26	; 0x1a
    1434:	e8 0f       	add	r30, r24
    1436:	f1 1d       	adc	r31, r1
    1438:	85 8d       	ldd	r24, Z+29	; 0x1d
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    143e:	8f ef       	ldi	r24, 0xFF	; 255
    1440:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1442:	08 95       	ret

00001444 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1444:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1446:	91 8d       	ldd	r25, Z+25	; 0x19
    1448:	82 8d       	ldd	r24, Z+26	; 0x1a
    144a:	98 17       	cp	r25, r24
    144c:	61 f0       	breq	.+24     	; 0x1466 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    144e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1450:	df 01       	movw	r26, r30
    1452:	a8 0f       	add	r26, r24
    1454:	b1 1d       	adc	r27, r1
    1456:	5d 96       	adiw	r26, 0x1d	; 29
    1458:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    145a:	92 8d       	ldd	r25, Z+26	; 0x1a
    145c:	9f 5f       	subi	r25, 0xFF	; 255
    145e:	9f 73       	andi	r25, 0x3F	; 63
    1460:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1466:	8f ef       	ldi	r24, 0xFF	; 255
    1468:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    146a:	08 95       	ret

0000146c <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    146c:	fc 01       	movw	r30, r24
    146e:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
    1470:	44 8d       	ldd	r20, Z+28	; 0x1c
    1472:	25 2f       	mov	r18, r21
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	84 2f       	mov	r24, r20
    1478:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    147a:	82 1b       	sub	r24, r18
    147c:	93 0b       	sbc	r25, r19
    147e:	54 17       	cp	r21, r20
    1480:	10 f0       	brcs	.+4      	; 0x1486 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1482:	cf 96       	adiw	r24, 0x3f	; 63
    1484:	08 95       	ret
  return tail - head - 1;
    1486:	01 97       	sbiw	r24, 0x01	; 1
}
    1488:	08 95       	ret

0000148a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    148a:	8d e9       	ldi	r24, 0x9D	; 157
    148c:	9b e0       	ldi	r25, 0x0B	; 11
    148e:	89 2b       	or	r24, r25
    1490:	49 f0       	breq	.+18     	; 0x14a4 <_Z14serialEventRunv+0x1a>
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	89 2b       	or	r24, r25
    1498:	29 f0       	breq	.+10     	; 0x14a4 <_Z14serialEventRunv+0x1a>
    149a:	0e 94 9d 0b 	call	0x173a	; 0x173a <_Z17Serial0_availablev>
    149e:	81 11       	cpse	r24, r1
    14a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    14a4:	08 95       	ret

000014a6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    14a6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    14a8:	84 8d       	ldd	r24, Z+28	; 0x1c
    14aa:	df 01       	movw	r26, r30
    14ac:	a8 0f       	add	r26, r24
    14ae:	b1 1d       	adc	r27, r1
    14b0:	a3 5a       	subi	r26, 0xA3	; 163
    14b2:	bf 4f       	sbci	r27, 0xFF	; 255
    14b4:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    14b6:	84 8d       	ldd	r24, Z+28	; 0x1c
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	01 96       	adiw	r24, 0x01	; 1
    14bc:	8f 73       	andi	r24, 0x3F	; 63
    14be:	99 27       	eor	r25, r25
    14c0:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    14c2:	a6 89       	ldd	r26, Z+22	; 0x16
    14c4:	b7 89       	ldd	r27, Z+23	; 0x17
    14c6:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    14c8:	a0 89       	ldd	r26, Z+16	; 0x10
    14ca:	b1 89       	ldd	r27, Z+17	; 0x11
    14cc:	8c 91       	ld	r24, X
    14ce:	80 64       	ori	r24, 0x40	; 64
    14d0:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    14d2:	93 8d       	ldd	r25, Z+27	; 0x1b
    14d4:	84 8d       	ldd	r24, Z+28	; 0x1c
    14d6:	98 13       	cpse	r25, r24
    14d8:	06 c0       	rjmp	.+12     	; 0x14e6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    14da:	02 88       	ldd	r0, Z+18	; 0x12
    14dc:	f3 89       	ldd	r31, Z+19	; 0x13
    14de:	e0 2d       	mov	r30, r0
    14e0:	80 81       	ld	r24, Z
    14e2:	8f 7d       	andi	r24, 0xDF	; 223
    14e4:	80 83       	st	Z, r24
    14e6:	08 95       	ret

000014e8 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    14e8:	ef 92       	push	r14
    14ea:	ff 92       	push	r15
    14ec:	0f 93       	push	r16
    14ee:	1f 93       	push	r17
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	ec 01       	movw	r28, r24
  _written = true;
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    14fa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    14fc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    14fe:	98 13       	cpse	r25, r24
    1500:	05 c0       	rjmp	.+10     	; 0x150c <_ZN14HardwareSerial5writeEh+0x24>
    1502:	e8 89       	ldd	r30, Y+16	; 0x10
    1504:	f9 89       	ldd	r31, Y+17	; 0x11
    1506:	80 81       	ld	r24, Z
    1508:	85 fd       	sbrc	r24, 5
    150a:	24 c0       	rjmp	.+72     	; 0x1554 <_ZN14HardwareSerial5writeEh+0x6c>
    150c:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    150e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1510:	10 e0       	ldi	r17, 0x00	; 0
    1512:	0f 5f       	subi	r16, 0xFF	; 255
    1514:	1f 4f       	sbci	r17, 0xFF	; 255
    1516:	0f 73       	andi	r16, 0x3F	; 63
    1518:	11 27       	eor	r17, r17
    151a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    151c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    151e:	e8 12       	cpse	r14, r24
    1520:	0c c0       	rjmp	.+24     	; 0x153a <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	07 fc       	sbrc	r0, 7
    1526:	fa cf       	rjmp	.-12     	; 0x151c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1528:	e8 89       	ldd	r30, Y+16	; 0x10
    152a:	f9 89       	ldd	r31, Y+17	; 0x11
    152c:	80 81       	ld	r24, Z
    152e:	85 ff       	sbrs	r24, 5
    1530:	f5 cf       	rjmp	.-22     	; 0x151c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1532:	ce 01       	movw	r24, r28
    1534:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1538:	f1 cf       	rjmp	.-30     	; 0x151c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    153a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    153c:	fe 01       	movw	r30, r28
    153e:	e8 0f       	add	r30, r24
    1540:	f1 1d       	adc	r31, r1
    1542:	e3 5a       	subi	r30, 0xA3	; 163
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1548:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    154a:	ea 89       	ldd	r30, Y+18	; 0x12
    154c:	fb 89       	ldd	r31, Y+19	; 0x13
    154e:	80 81       	ld	r24, Z
    1550:	80 62       	ori	r24, 0x20	; 32
    1552:	07 c0       	rjmp	.+14     	; 0x1562 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1554:	ee 89       	ldd	r30, Y+22	; 0x16
    1556:	ff 89       	ldd	r31, Y+23	; 0x17
    1558:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    155a:	e8 89       	ldd	r30, Y+16	; 0x10
    155c:	f9 89       	ldd	r31, Y+17	; 0x11
    155e:	80 81       	ld	r24, Z
    1560:	80 64       	ori	r24, 0x40	; 64
    1562:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	1f 91       	pop	r17
    156e:	0f 91       	pop	r16
    1570:	ff 90       	pop	r15
    1572:	ef 90       	pop	r14
    1574:	08 95       	ret

00001576 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    157c:	88 8d       	ldd	r24, Y+24	; 0x18
    157e:	88 23       	and	r24, r24
    1580:	c9 f0       	breq	.+50     	; 0x15b4 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1582:	ea 89       	ldd	r30, Y+18	; 0x12
    1584:	fb 89       	ldd	r31, Y+19	; 0x13
    1586:	80 81       	ld	r24, Z
    1588:	85 fd       	sbrc	r24, 5
    158a:	05 c0       	rjmp	.+10     	; 0x1596 <_ZN14HardwareSerial5flushEv+0x20>
    158c:	a8 89       	ldd	r26, Y+16	; 0x10
    158e:	b9 89       	ldd	r27, Y+17	; 0x11
    1590:	8c 91       	ld	r24, X
    1592:	86 fd       	sbrc	r24, 6
    1594:	0f c0       	rjmp	.+30     	; 0x15b4 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	07 fc       	sbrc	r0, 7
    159a:	f5 cf       	rjmp	.-22     	; 0x1586 <_ZN14HardwareSerial5flushEv+0x10>
    159c:	80 81       	ld	r24, Z
    159e:	85 ff       	sbrs	r24, 5
    15a0:	f2 cf       	rjmp	.-28     	; 0x1586 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    15a2:	a8 89       	ldd	r26, Y+16	; 0x10
    15a4:	b9 89       	ldd	r27, Y+17	; 0x11
    15a6:	8c 91       	ld	r24, X
    15a8:	85 ff       	sbrs	r24, 5
    15aa:	ed cf       	rjmp	.-38     	; 0x1586 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    15ac:	ce 01       	movw	r24, r28
    15ae:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    15b2:	e7 cf       	rjmp	.-50     	; 0x1582 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	08 95       	ret

000015ba <_ZN14HardwareSerial5beginEmh>:
	begin(baud, SERIAL_8N1); 
}


void HardwareSerial::begin(unsigned long baud, byte config)
{
    15ba:	cf 92       	push	r12
    15bc:	df 92       	push	r13
    15be:	ef 92       	push	r14
    15c0:	ff 92       	push	r15
    15c2:	1f 93       	push	r17
    15c4:	cf 93       	push	r28
    15c6:	df 93       	push	r29
    15c8:	ec 01       	movw	r28, r24
    15ca:	6a 01       	movw	r12, r20
    15cc:	7b 01       	movw	r14, r22
    15ce:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    15d0:	e8 89       	ldd	r30, Y+16	; 0x10
    15d2:	f9 89       	ldd	r31, Y+17	; 0x11
    15d4:	82 e0       	ldi	r24, 0x02	; 2
    15d6:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    15d8:	41 15       	cp	r20, r1
    15da:	51 4e       	sbci	r21, 0xE1	; 225
    15dc:	61 05       	cpc	r22, r1
    15de:	71 05       	cpc	r23, r1
    15e0:	b1 f0       	breq	.+44     	; 0x160e <_ZN14HardwareSerial5beginEmh+0x54>


void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    15e2:	60 e0       	ldi	r22, 0x00	; 0
    15e4:	79 e0       	ldi	r23, 0x09	; 9
    15e6:	8d e3       	ldi	r24, 0x3D	; 61
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	a7 01       	movw	r20, r14
    15ec:	96 01       	movw	r18, r12
    15ee:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__udivmodsi4>
    15f2:	da 01       	movw	r26, r20
    15f4:	c9 01       	movw	r24, r18
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	a1 09       	sbc	r26, r1
    15fa:	b1 09       	sbc	r27, r1
    15fc:	b6 95       	lsr	r27
    15fe:	a7 95       	ror	r26
    1600:	97 95       	ror	r25
    1602:	87 95       	ror	r24
    1604:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1606:	21 15       	cp	r18, r1
    1608:	80 e1       	ldi	r24, 0x10	; 16
    160a:	38 07       	cpc	r19, r24
    160c:	a8 f0       	brcs	.+42     	; 0x1638 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    160e:	e8 89       	ldd	r30, Y+16	; 0x10
    1610:	f9 89       	ldd	r31, Y+17	; 0x11
    1612:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1614:	60 e8       	ldi	r22, 0x80	; 128
    1616:	74 e8       	ldi	r23, 0x84	; 132
    1618:	8e e1       	ldi	r24, 0x1E	; 30
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	a7 01       	movw	r20, r14
    161e:	96 01       	movw	r18, r12
    1620:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__udivmodsi4>
    1624:	da 01       	movw	r26, r20
    1626:	c9 01       	movw	r24, r18
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	a1 09       	sbc	r26, r1
    162c:	b1 09       	sbc	r27, r1
    162e:	b6 95       	lsr	r27
    1630:	a7 95       	ror	r26
    1632:	97 95       	ror	r25
    1634:	87 95       	ror	r24
    1636:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1638:	ec 85       	ldd	r30, Y+12	; 0x0c
    163a:	fd 85       	ldd	r31, Y+13	; 0x0d
    163c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    163e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1640:	ff 85       	ldd	r31, Y+15	; 0x0f
    1642:	20 83       	st	Z, r18

  _written = false;
    1644:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1646:	ec 89       	ldd	r30, Y+20	; 0x14
    1648:	fd 89       	ldd	r31, Y+21	; 0x15
    164a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    164c:	ea 89       	ldd	r30, Y+18	; 0x12
    164e:	fb 89       	ldd	r31, Y+19	; 0x13
    1650:	80 81       	ld	r24, Z
    1652:	80 61       	ori	r24, 0x10	; 16
    1654:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1656:	ea 89       	ldd	r30, Y+18	; 0x12
    1658:	fb 89       	ldd	r31, Y+19	; 0x13
    165a:	80 81       	ld	r24, Z
    165c:	88 60       	ori	r24, 0x08	; 8
    165e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1660:	ea 89       	ldd	r30, Y+18	; 0x12
    1662:	fb 89       	ldd	r31, Y+19	; 0x13
    1664:	80 81       	ld	r24, Z
    1666:	80 68       	ori	r24, 0x80	; 128
    1668:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    166a:	ea 89       	ldd	r30, Y+18	; 0x12
    166c:	fb 89       	ldd	r31, Y+19	; 0x13
    166e:	80 81       	ld	r24, Z
    1670:	8f 7d       	andi	r24, 0xDF	; 223
    1672:	80 83       	st	Z, r24
}
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	1f 91       	pop	r17
    167a:	ff 90       	pop	r15
    167c:	ef 90       	pop	r14
    167e:	df 90       	pop	r13
    1680:	cf 90       	pop	r12
    1682:	08 95       	ret

00001684 <_ZN14HardwareSerial5beginEm>:

// Public Methods //////////////////////////////////////////////////////////////
//selbst erstellt da inline Methoden irgendwie nicht immer funktionieren
void HardwareSerial::begin(unsigned long baud) 
{ 
	begin(baud, SERIAL_8N1); 
    1684:	26 e0       	ldi	r18, 0x06	; 6
    1686:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <_ZN14HardwareSerial5beginEmh>

0000168a <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    168a:	1f 92       	push	r1
    168c:	0f 92       	push	r0
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	0f 92       	push	r0
    1692:	11 24       	eor	r1, r1
    1694:	2f 93       	push	r18
    1696:	8f 93       	push	r24
    1698:	9f 93       	push	r25
    169a:	ef 93       	push	r30
    169c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    169e:	e0 91 87 04 	lds	r30, 0x0487	; 0x800487 <Serial+0x10>
    16a2:	f0 91 88 04 	lds	r31, 0x0488	; 0x800488 <Serial+0x11>
    16a6:	80 81       	ld	r24, Z
    16a8:	e0 91 8d 04 	lds	r30, 0x048D	; 0x80048d <Serial+0x16>
    16ac:	f0 91 8e 04 	lds	r31, 0x048E	; 0x80048e <Serial+0x17>
    16b0:	82 fd       	sbrc	r24, 2
    16b2:	12 c0       	rjmp	.+36     	; 0x16d8 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    16b4:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    16b6:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <Serial+0x19>
    16ba:	8f 5f       	subi	r24, 0xFF	; 255
    16bc:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    16be:	20 91 91 04 	lds	r18, 0x0491	; 0x800491 <Serial+0x1a>
    16c2:	82 17       	cp	r24, r18
    16c4:	51 f0       	breq	.+20     	; 0x16da <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    16c6:	e0 91 90 04 	lds	r30, 0x0490	; 0x800490 <Serial+0x19>
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	e9 58       	subi	r30, 0x89	; 137
    16ce:	fb 4f       	sbci	r31, 0xFB	; 251
    16d0:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    16d2:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <Serial+0x19>
    16d6:	01 c0       	rjmp	.+2      	; 0x16da <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    16d8:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    16da:	ff 91       	pop	r31
    16dc:	ef 91       	pop	r30
    16de:	9f 91       	pop	r25
    16e0:	8f 91       	pop	r24
    16e2:	2f 91       	pop	r18
    16e4:	0f 90       	pop	r0
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	0f 90       	pop	r0
    16ea:	1f 90       	pop	r1
    16ec:	18 95       	reti

000016ee <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    16ee:	1f 92       	push	r1
    16f0:	0f 92       	push	r0
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	0f 92       	push	r0
    16f6:	11 24       	eor	r1, r1
    16f8:	2f 93       	push	r18
    16fa:	3f 93       	push	r19
    16fc:	4f 93       	push	r20
    16fe:	5f 93       	push	r21
    1700:	6f 93       	push	r22
    1702:	7f 93       	push	r23
    1704:	8f 93       	push	r24
    1706:	9f 93       	push	r25
    1708:	af 93       	push	r26
    170a:	bf 93       	push	r27
    170c:	ef 93       	push	r30
    170e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1710:	87 e7       	ldi	r24, 0x77	; 119
    1712:	94 e0       	ldi	r25, 0x04	; 4
    1714:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1718:	ff 91       	pop	r31
    171a:	ef 91       	pop	r30
    171c:	bf 91       	pop	r27
    171e:	af 91       	pop	r26
    1720:	9f 91       	pop	r25
    1722:	8f 91       	pop	r24
    1724:	7f 91       	pop	r23
    1726:	6f 91       	pop	r22
    1728:	5f 91       	pop	r21
    172a:	4f 91       	pop	r20
    172c:	3f 91       	pop	r19
    172e:	2f 91       	pop	r18
    1730:	0f 90       	pop	r0
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	0f 90       	pop	r0
    1736:	1f 90       	pop	r1
    1738:	18 95       	reti

0000173a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    173a:	87 e7       	ldi	r24, 0x77	; 119
    173c:	94 e0       	ldi	r25, 0x04	; 4
    173e:	0e 94 08 0a 	call	0x1410	; 0x1410 <_ZN14HardwareSerial9availableEv>
    1742:	21 e0       	ldi	r18, 0x01	; 1
    1744:	89 2b       	or	r24, r25
    1746:	09 f4       	brne	.+2      	; 0x174a <_Z17Serial0_availablev+0x10>
    1748:	20 e0       	ldi	r18, 0x00	; 0
}
    174a:	82 2f       	mov	r24, r18
    174c:	08 95       	ret

0000174e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    174e:	e7 e7       	ldi	r30, 0x77	; 119
    1750:	f4 e0       	ldi	r31, 0x04	; 4
    1752:	13 82       	std	Z+3, r1	; 0x03
    1754:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1756:	88 ee       	ldi	r24, 0xE8	; 232
    1758:	93 e0       	ldi	r25, 0x03	; 3
    175a:	a0 e0       	ldi	r26, 0x00	; 0
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	84 83       	std	Z+4, r24	; 0x04
    1760:	95 83       	std	Z+5, r25	; 0x05
    1762:	a6 83       	std	Z+6, r26	; 0x06
    1764:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1766:	84 ec       	ldi	r24, 0xC4	; 196
    1768:	93 e0       	ldi	r25, 0x03	; 3
    176a:	91 83       	std	Z+1, r25	; 0x01
    176c:	80 83       	st	Z, r24
    176e:	85 ec       	ldi	r24, 0xC5	; 197
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	95 87       	std	Z+13, r25	; 0x0d
    1774:	84 87       	std	Z+12, r24	; 0x0c
    1776:	84 ec       	ldi	r24, 0xC4	; 196
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	97 87       	std	Z+15, r25	; 0x0f
    177c:	86 87       	std	Z+14, r24	; 0x0e
    177e:	80 ec       	ldi	r24, 0xC0	; 192
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	91 8b       	std	Z+17, r25	; 0x11
    1784:	80 8b       	std	Z+16, r24	; 0x10
    1786:	81 ec       	ldi	r24, 0xC1	; 193
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	93 8b       	std	Z+19, r25	; 0x13
    178c:	82 8b       	std	Z+18, r24	; 0x12
    178e:	82 ec       	ldi	r24, 0xC2	; 194
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	95 8b       	std	Z+21, r25	; 0x15
    1794:	84 8b       	std	Z+20, r24	; 0x14
    1796:	86 ec       	ldi	r24, 0xC6	; 198
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	97 8b       	std	Z+23, r25	; 0x17
    179c:	86 8b       	std	Z+22, r24	; 0x16
    179e:	11 8e       	std	Z+25, r1	; 0x19
    17a0:	12 8e       	std	Z+26, r1	; 0x1a
    17a2:	13 8e       	std	Z+27, r1	; 0x1b
    17a4:	14 8e       	std	Z+28, r1	; 0x1c
    17a6:	08 95       	ret

000017a8 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    17a8:	08 95       	ret

000017aa <initVariant>:
    17aa:	08 95       	ret

000017ac <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    17ac:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <init>

	initVariant();
    17b0:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    17b4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    17b8:	c5 e4       	ldi	r28, 0x45	; 69
    17ba:	da e0       	ldi	r29, 0x0A	; 10
#endif
	
	setup();
    
	for (;;) {
		loop();
    17bc:	0e 94 00 02 	call	0x400	; 0x400 <loop>
		if (serialEventRun) serialEventRun();
    17c0:	20 97       	sbiw	r28, 0x00	; 0
    17c2:	e1 f3       	breq	.-8      	; 0x17bc <main+0x10>
    17c4:	0e 94 45 0a 	call	0x148a	; 0x148a <_Z14serialEventRunv>
    17c8:	f9 cf       	rjmp	.-14     	; 0x17bc <main+0x10>

000017ca <_ZdlPv>:
    17ca:	0c 94 e1 0f 	jmp	0x1fc2	; 0x1fc2 <free>

000017ce <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    17ce:	cf 92       	push	r12
    17d0:	df 92       	push	r13
    17d2:	ef 92       	push	r14
    17d4:	ff 92       	push	r15
    17d6:	0f 93       	push	r16
    17d8:	1f 93       	push	r17
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	6c 01       	movw	r12, r24
    17e0:	7a 01       	movw	r14, r20
    17e2:	8b 01       	movw	r16, r22
    17e4:	c0 e0       	ldi	r28, 0x00	; 0
    17e6:	d0 e0       	ldi	r29, 0x00	; 0
    17e8:	ce 15       	cp	r28, r14
    17ea:	df 05       	cpc	r29, r15
    17ec:	81 f0       	breq	.+32     	; 0x180e <_ZN5Print5writeEPKhj+0x40>
    17ee:	d8 01       	movw	r26, r16
    17f0:	6d 91       	ld	r22, X+
    17f2:	8d 01       	movw	r16, r26
    17f4:	d6 01       	movw	r26, r12
    17f6:	ed 91       	ld	r30, X+
    17f8:	fc 91       	ld	r31, X
    17fa:	01 90       	ld	r0, Z+
    17fc:	f0 81       	ld	r31, Z
    17fe:	e0 2d       	mov	r30, r0
    1800:	c6 01       	movw	r24, r12
    1802:	09 95       	icall
    1804:	89 2b       	or	r24, r25
    1806:	11 f0       	breq	.+4      	; 0x180c <_ZN5Print5writeEPKhj+0x3e>
    1808:	21 96       	adiw	r28, 0x01	; 1
    180a:	ee cf       	rjmp	.-36     	; 0x17e8 <_ZN5Print5writeEPKhj+0x1a>
    180c:	7e 01       	movw	r14, r28
    180e:	c7 01       	movw	r24, r14
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	1f 91       	pop	r17
    1816:	0f 91       	pop	r16
    1818:	ff 90       	pop	r15
    181a:	ef 90       	pop	r14
    181c:	df 90       	pop	r13
    181e:	cf 90       	pop	r12
    1820:	08 95       	ret

00001822 <_ZN5Print5writeEPKc>:
    1822:	61 15       	cp	r22, r1
    1824:	71 05       	cpc	r23, r1
    1826:	79 f0       	breq	.+30     	; 0x1846 <_ZN5Print5writeEPKc+0x24>
    1828:	fb 01       	movw	r30, r22
    182a:	01 90       	ld	r0, Z+
    182c:	00 20       	and	r0, r0
    182e:	e9 f7       	brne	.-6      	; 0x182a <_ZN5Print5writeEPKc+0x8>
    1830:	31 97       	sbiw	r30, 0x01	; 1
    1832:	af 01       	movw	r20, r30
    1834:	46 1b       	sub	r20, r22
    1836:	57 0b       	sbc	r21, r23
    1838:	dc 01       	movw	r26, r24
    183a:	ed 91       	ld	r30, X+
    183c:	fc 91       	ld	r31, X
    183e:	02 80       	ldd	r0, Z+2	; 0x02
    1840:	f3 81       	ldd	r31, Z+3	; 0x03
    1842:	e0 2d       	mov	r30, r0
    1844:	09 94       	ijmp
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	08 95       	ret

0000184c <_ZN5Print5printEPKc>:
    184c:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <_ZN5Print5writeEPKc>

00001850 <_ZN5Print5printEc>:
    1850:	dc 01       	movw	r26, r24
    1852:	ed 91       	ld	r30, X+
    1854:	fc 91       	ld	r31, X
    1856:	01 90       	ld	r0, Z+
    1858:	f0 81       	ld	r31, Z
    185a:	e0 2d       	mov	r30, r0
    185c:	09 94       	ijmp

0000185e <_ZN5Print7printlnEv>:
    185e:	62 ed       	ldi	r22, 0xD2	; 210
    1860:	73 e0       	ldi	r23, 0x03	; 3
    1862:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <_ZN5Print5writeEPKc>

00001866 <_ZN5Print7printlnEPKc>:
    1866:	0f 93       	push	r16
    1868:	1f 93       	push	r17
    186a:	cf 93       	push	r28
    186c:	df 93       	push	r29
    186e:	ec 01       	movw	r28, r24
    1870:	0e 94 11 0c 	call	0x1822	; 0x1822 <_ZN5Print5writeEPKc>
    1874:	8c 01       	movw	r16, r24
    1876:	ce 01       	movw	r24, r28
    1878:	0e 94 2f 0c 	call	0x185e	; 0x185e <_ZN5Print7printlnEv>
    187c:	80 0f       	add	r24, r16
    187e:	91 1f       	adc	r25, r17
    1880:	df 91       	pop	r29
    1882:	cf 91       	pop	r28
    1884:	1f 91       	pop	r17
    1886:	0f 91       	pop	r16
    1888:	08 95       	ret

0000188a <_ZN5Print11printNumberEmh>:
    188a:	8f 92       	push	r8
    188c:	9f 92       	push	r9
    188e:	af 92       	push	r10
    1890:	bf 92       	push	r11
    1892:	ef 92       	push	r14
    1894:	ff 92       	push	r15
    1896:	0f 93       	push	r16
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	a1 97       	sbiw	r28, 0x21	; 33
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	7c 01       	movw	r14, r24
    18b0:	fa 01       	movw	r30, r20
    18b2:	cb 01       	movw	r24, r22
    18b4:	19 a2       	std	Y+33, r1	; 0x21
    18b6:	22 30       	cpi	r18, 0x02	; 2
    18b8:	08 f4       	brcc	.+2      	; 0x18bc <_ZN5Print11printNumberEmh+0x32>
    18ba:	2a e0       	ldi	r18, 0x0A	; 10
    18bc:	8e 01       	movw	r16, r28
    18be:	0f 5d       	subi	r16, 0xDF	; 223
    18c0:	1f 4f       	sbci	r17, 0xFF	; 255
    18c2:	82 2e       	mov	r8, r18
    18c4:	91 2c       	mov	r9, r1
    18c6:	a1 2c       	mov	r10, r1
    18c8:	b1 2c       	mov	r11, r1
    18ca:	bf 01       	movw	r22, r30
    18cc:	a5 01       	movw	r20, r10
    18ce:	94 01       	movw	r18, r8
    18d0:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__udivmodsi4>
    18d4:	f9 01       	movw	r30, r18
    18d6:	ca 01       	movw	r24, r20
    18d8:	01 50       	subi	r16, 0x01	; 1
    18da:	11 09       	sbc	r17, r1
    18dc:	6a 30       	cpi	r22, 0x0A	; 10
    18de:	10 f4       	brcc	.+4      	; 0x18e4 <_ZN5Print11printNumberEmh+0x5a>
    18e0:	60 5d       	subi	r22, 0xD0	; 208
    18e2:	01 c0       	rjmp	.+2      	; 0x18e6 <_ZN5Print11printNumberEmh+0x5c>
    18e4:	69 5c       	subi	r22, 0xC9	; 201
    18e6:	d8 01       	movw	r26, r16
    18e8:	6c 93       	st	X, r22
    18ea:	23 2b       	or	r18, r19
    18ec:	24 2b       	or	r18, r20
    18ee:	25 2b       	or	r18, r21
    18f0:	61 f7       	brne	.-40     	; 0x18ca <_ZN5Print11printNumberEmh+0x40>
    18f2:	b8 01       	movw	r22, r16
    18f4:	c7 01       	movw	r24, r14
    18f6:	0e 94 11 0c 	call	0x1822	; 0x1822 <_ZN5Print5writeEPKc>
    18fa:	a1 96       	adiw	r28, 0x21	; 33
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	1f 91       	pop	r17
    190c:	0f 91       	pop	r16
    190e:	ff 90       	pop	r15
    1910:	ef 90       	pop	r14
    1912:	bf 90       	pop	r11
    1914:	af 90       	pop	r10
    1916:	9f 90       	pop	r9
    1918:	8f 90       	pop	r8
    191a:	08 95       	ret

0000191c <_ZN5Print5printEmi>:
    191c:	21 15       	cp	r18, r1
    191e:	31 05       	cpc	r19, r1
    1920:	41 f4       	brne	.+16     	; 0x1932 <_ZN5Print5printEmi+0x16>
    1922:	dc 01       	movw	r26, r24
    1924:	ed 91       	ld	r30, X+
    1926:	fc 91       	ld	r31, X
    1928:	01 90       	ld	r0, Z+
    192a:	f0 81       	ld	r31, Z
    192c:	e0 2d       	mov	r30, r0
    192e:	64 2f       	mov	r22, r20
    1930:	09 94       	ijmp
    1932:	0c 94 45 0c 	jmp	0x188a	; 0x188a <_ZN5Print11printNumberEmh>

00001936 <_ZN5Print5printEhi>:
    1936:	9a 01       	movw	r18, r20
    1938:	46 2f       	mov	r20, r22
    193a:	50 e0       	ldi	r21, 0x00	; 0
    193c:	60 e0       	ldi	r22, 0x00	; 0
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	0c 94 8e 0c 	jmp	0x191c	; 0x191c <_ZN5Print5printEmi>

00001944 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    1944:	0f 93       	push	r16
    1946:	1f 93       	push	r17
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
    194c:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    194e:	0e 94 8e 0c 	call	0x191c	; 0x191c <_ZN5Print5printEmi>
    1952:	8c 01       	movw	r16, r24
  n += println();
    1954:	ce 01       	movw	r24, r28
    1956:	0e 94 2f 0c 	call	0x185e	; 0x185e <_ZN5Print7printlnEv>
  return n;
}
    195a:	80 0f       	add	r24, r16
    195c:	91 1f       	adc	r25, r17
    195e:	df 91       	pop	r29
    1960:	cf 91       	pop	r28
    1962:	1f 91       	pop	r17
    1964:	0f 91       	pop	r16
    1966:	08 95       	ret

00001968 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    1968:	cf 92       	push	r12
    196a:	df 92       	push	r13
    196c:	ef 92       	push	r14
    196e:	ff 92       	push	r15
    1970:	0f 93       	push	r16
    1972:	1f 93       	push	r17
    1974:	cf 93       	push	r28
    1976:	df 93       	push	r29
  if (base == 0) {
    1978:	21 15       	cp	r18, r1
    197a:	31 05       	cpc	r19, r1
    197c:	81 f4       	brne	.+32     	; 0x199e <_ZN5Print5printEli+0x36>
    return write(n);
    197e:	dc 01       	movw	r26, r24
    1980:	ed 91       	ld	r30, X+
    1982:	fc 91       	ld	r31, X
    1984:	01 90       	ld	r0, Z+
    1986:	f0 81       	ld	r31, Z
    1988:	e0 2d       	mov	r30, r0
    198a:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    198c:	df 91       	pop	r29
    198e:	cf 91       	pop	r28
    1990:	1f 91       	pop	r17
    1992:	0f 91       	pop	r16
    1994:	ff 90       	pop	r15
    1996:	ef 90       	pop	r14
    1998:	df 90       	pop	r13
    199a:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    199c:	09 94       	ijmp
  } else if (base == 10) {
    199e:	2a 30       	cpi	r18, 0x0A	; 10
    19a0:	31 05       	cpc	r19, r1
    19a2:	01 f5       	brne	.+64     	; 0x19e4 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    19a4:	77 ff       	sbrs	r23, 7
    19a6:	1d c0       	rjmp	.+58     	; 0x19e2 <_ZN5Print5printEli+0x7a>
    19a8:	6a 01       	movw	r12, r20
    19aa:	7b 01       	movw	r14, r22
    19ac:	ec 01       	movw	r28, r24
      int t = print('-');
    19ae:	6d e2       	ldi	r22, 0x2D	; 45
    19b0:	0e 94 28 0c 	call	0x1850	; 0x1850 <_ZN5Print5printEc>
    19b4:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    19b6:	44 27       	eor	r20, r20
    19b8:	55 27       	eor	r21, r21
    19ba:	ba 01       	movw	r22, r20
    19bc:	4c 19       	sub	r20, r12
    19be:	5d 09       	sbc	r21, r13
    19c0:	6e 09       	sbc	r22, r14
    19c2:	7f 09       	sbc	r23, r15
    19c4:	2a e0       	ldi	r18, 0x0A	; 10
    19c6:	ce 01       	movw	r24, r28
    19c8:	0e 94 45 0c 	call	0x188a	; 0x188a <_ZN5Print11printNumberEmh>
    19cc:	80 0f       	add	r24, r16
    19ce:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	1f 91       	pop	r17
    19d6:	0f 91       	pop	r16
    19d8:	ff 90       	pop	r15
    19da:	ef 90       	pop	r14
    19dc:	df 90       	pop	r13
    19de:	cf 90       	pop	r12
    19e0:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    19e2:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	1f 91       	pop	r17
    19ea:	0f 91       	pop	r16
    19ec:	ff 90       	pop	r15
    19ee:	ef 90       	pop	r14
    19f0:	df 90       	pop	r13
    19f2:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    19f4:	0c 94 45 0c 	jmp	0x188a	; 0x188a <_ZN5Print11printNumberEmh>

000019f8 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    19f8:	9a 01       	movw	r18, r20
  return print((long) n, base);
    19fa:	ab 01       	movw	r20, r22
    19fc:	77 0f       	add	r23, r23
    19fe:	66 0b       	sbc	r22, r22
    1a00:	77 0b       	sbc	r23, r23
    1a02:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <_ZN5Print5printEli>

00001a06 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    1a06:	0f 93       	push	r16
    1a08:	1f 93       	push	r17
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    1a10:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <_ZN5Print5printEii>
    1a14:	8c 01       	movw	r16, r24
  n += println();
    1a16:	ce 01       	movw	r24, r28
    1a18:	0e 94 2f 0c 	call	0x185e	; 0x185e <_ZN5Print7printlnEv>
  return n;
}
    1a1c:	80 0f       	add	r24, r16
    1a1e:	91 1f       	adc	r25, r17
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	1f 91       	pop	r17
    1a26:	0f 91       	pop	r16
    1a28:	08 95       	ret

00001a2a <_ZN6Stream9timedReadEv>:
    value = -value;
  if(isFraction)
    return value * fraction;
  else
    return value;
}
    1a2a:	0f 93       	push	r16
    1a2c:	1f 93       	push	r17
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	ec 01       	movw	r28, r24
    1a34:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <millis>
    1a38:	68 87       	std	Y+8, r22	; 0x08
    1a3a:	79 87       	std	Y+9, r23	; 0x09
    1a3c:	8a 87       	std	Y+10, r24	; 0x0a
    1a3e:	9b 87       	std	Y+11, r25	; 0x0b
    1a40:	e8 81       	ld	r30, Y
    1a42:	f9 81       	ldd	r31, Y+1	; 0x01
    1a44:	02 84       	ldd	r0, Z+10	; 0x0a
    1a46:	f3 85       	ldd	r31, Z+11	; 0x0b
    1a48:	e0 2d       	mov	r30, r0
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	09 95       	icall
    1a4e:	97 ff       	sbrs	r25, 7
    1a50:	17 c0       	rjmp	.+46     	; 0x1a80 <_ZN6Stream9timedReadEv+0x56>
    1a52:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <millis>
    1a56:	08 85       	ldd	r16, Y+8	; 0x08
    1a58:	19 85       	ldd	r17, Y+9	; 0x09
    1a5a:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a5c:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	80 1b       	sub	r24, r16
    1a64:	91 0b       	sbc	r25, r17
    1a66:	a2 0b       	sbc	r26, r18
    1a68:	b3 0b       	sbc	r27, r19
    1a6a:	0c 81       	ldd	r16, Y+4	; 0x04
    1a6c:	1d 81       	ldd	r17, Y+5	; 0x05
    1a6e:	2e 81       	ldd	r18, Y+6	; 0x06
    1a70:	3f 81       	ldd	r19, Y+7	; 0x07
    1a72:	80 17       	cp	r24, r16
    1a74:	91 07       	cpc	r25, r17
    1a76:	a2 07       	cpc	r26, r18
    1a78:	b3 07       	cpc	r27, r19
    1a7a:	10 f3       	brcs	.-60     	; 0x1a40 <_ZN6Stream9timedReadEv+0x16>
    1a7c:	8f ef       	ldi	r24, 0xFF	; 255
    1a7e:	9f ef       	ldi	r25, 0xFF	; 255
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	1f 91       	pop	r17
    1a86:	0f 91       	pop	r16
    1a88:	08 95       	ret

00001a8a <_ZN6Stream10setTimeoutEm>:
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	44 83       	std	Z+4, r20	; 0x04
    1a8e:	55 83       	std	Z+5, r21	; 0x05
    1a90:	66 83       	std	Z+6, r22	; 0x06
    1a92:	77 83       	std	Z+7, r23	; 0x07
    1a94:	08 95       	ret

00001a96 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
    1a96:	cf 92       	push	r12
    1a98:	df 92       	push	r13
    1a9a:	ef 92       	push	r14
    1a9c:	ff 92       	push	r15
    1a9e:	0f 93       	push	r16
    1aa0:	1f 93       	push	r17
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	6c 01       	movw	r12, r24
    1aa8:	7a 01       	movw	r14, r20
    1aaa:	8b 01       	movw	r16, r22
  size_t count = 0;
    1aac:	c0 e0       	ldi	r28, 0x00	; 0
    1aae:	d0 e0       	ldi	r29, 0x00	; 0
  while (count < length) {
    1ab0:	ce 15       	cp	r28, r14
    1ab2:	df 05       	cpc	r29, r15
    1ab4:	59 f0       	breq	.+22     	; 0x1acc <_ZN6Stream9readBytesEPcj+0x36>
    int c = timedRead();
    1ab6:	c6 01       	movw	r24, r12
    1ab8:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <_ZN6Stream9timedReadEv>
    if (c < 0) break;
    1abc:	97 fd       	sbrc	r25, 7
    1abe:	05 c0       	rjmp	.+10     	; 0x1aca <_ZN6Stream9readBytesEPcj+0x34>
    *buffer++ = (char)c;
    1ac0:	f8 01       	movw	r30, r16
    1ac2:	81 93       	st	Z+, r24
    1ac4:	8f 01       	movw	r16, r30
    count++;
    1ac6:	21 96       	adiw	r28, 0x01	; 1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
    1ac8:	f3 cf       	rjmp	.-26     	; 0x1ab0 <_ZN6Stream9readBytesEPcj+0x1a>
    1aca:	7e 01       	movw	r14, r28
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
    1acc:	c7 01       	movw	r24, r14
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	1f 91       	pop	r17
    1ad4:	0f 91       	pop	r16
    1ad6:	ff 90       	pop	r15
    1ad8:	ef 90       	pop	r14
    1ada:	df 90       	pop	r13
    1adc:	cf 90       	pop	r12
    1ade:	08 95       	ret

00001ae0 <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
    1ae0:	08 95       	ret

00001ae2 <attachInterrupt>:
#endif
};
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    1ae2:	82 30       	cpi	r24, 0x02	; 2
    1ae4:	e8 f4       	brcc	.+58     	; 0x1b20 <attachInterrupt+0x3e>
    intFunc[interruptNum] = userFunc;
    1ae6:	e8 2f       	mov	r30, r24
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	ee 0f       	add	r30, r30
    1aec:	ff 1f       	adc	r31, r31
    1aee:	ea 5f       	subi	r30, 0xFA	; 250
    1af0:	fe 4f       	sbci	r31, 0xFE	; 254
    1af2:	71 83       	std	Z+1, r23	; 0x01
    1af4:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    1af6:	81 30       	cpi	r24, 0x01	; 1
    1af8:	41 f0       	breq	.+16     	; 0x1b0a <attachInterrupt+0x28>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    1afa:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1afe:	8c 7f       	andi	r24, 0xFC	; 252
    1b00:	48 2b       	or	r20, r24
    1b02:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
      EIMSK |= (1 << INT0);
    1b06:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    1b08:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    1b0a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1b0e:	83 7f       	andi	r24, 0xF3	; 243
    1b10:	44 0f       	add	r20, r20
    1b12:	55 1f       	adc	r21, r21
    1b14:	44 0f       	add	r20, r20
    1b16:	55 1f       	adc	r21, r21
    1b18:	48 2b       	or	r20, r24
    1b1a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
      EIMSK |= (1 << INT1);
    1b1e:	e9 9a       	sbi	0x1d, 1	; 29
    1b20:	08 95       	ret

00001b22 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    1b22:	82 30       	cpi	r24, 0x02	; 2
    1b24:	78 f4       	brcc	.+30     	; 0x1b44 <detachInterrupt+0x22>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    1b26:	81 30       	cpi	r24, 0x01	; 1
    1b28:	11 f0       	breq	.+4      	; 0x1b2e <detachInterrupt+0xc>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    1b2a:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
    1b2c:	01 c0       	rjmp	.+2      	; 0x1b30 <detachInterrupt+0xe>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    1b2e:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    1b30:	e8 2f       	mov	r30, r24
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	ee 0f       	add	r30, r30
    1b36:	ff 1f       	adc	r31, r31
    1b38:	ea 5f       	subi	r30, 0xFA	; 250
    1b3a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b3c:	80 e7       	ldi	r24, 0x70	; 112
    1b3e:	9d e0       	ldi	r25, 0x0D	; 13
    1b40:	91 83       	std	Z+1, r25	; 0x01
    1b42:	80 83       	st	Z, r24
    1b44:	08 95       	ret

00001b46 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    1b46:	1f 92       	push	r1
    1b48:	0f 92       	push	r0
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	0f 92       	push	r0
    1b4e:	11 24       	eor	r1, r1
    1b50:	2f 93       	push	r18
    1b52:	3f 93       	push	r19
    1b54:	4f 93       	push	r20
    1b56:	5f 93       	push	r21
    1b58:	6f 93       	push	r22
    1b5a:	7f 93       	push	r23
    1b5c:	8f 93       	push	r24
    1b5e:	9f 93       	push	r25
    1b60:	af 93       	push	r26
    1b62:	bf 93       	push	r27
    1b64:	ef 93       	push	r30
    1b66:	ff 93       	push	r31
    1b68:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <intFunc>
    1b6c:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <intFunc+0x1>
    1b70:	09 95       	icall
    1b72:	ff 91       	pop	r31
    1b74:	ef 91       	pop	r30
    1b76:	bf 91       	pop	r27
    1b78:	af 91       	pop	r26
    1b7a:	9f 91       	pop	r25
    1b7c:	8f 91       	pop	r24
    1b7e:	7f 91       	pop	r23
    1b80:	6f 91       	pop	r22
    1b82:	5f 91       	pop	r21
    1b84:	4f 91       	pop	r20
    1b86:	3f 91       	pop	r19
    1b88:	2f 91       	pop	r18
    1b8a:	0f 90       	pop	r0
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	0f 90       	pop	r0
    1b90:	1f 90       	pop	r1
    1b92:	18 95       	reti

00001b94 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    1b94:	1f 92       	push	r1
    1b96:	0f 92       	push	r0
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	0f 92       	push	r0
    1b9c:	11 24       	eor	r1, r1
    1b9e:	2f 93       	push	r18
    1ba0:	3f 93       	push	r19
    1ba2:	4f 93       	push	r20
    1ba4:	5f 93       	push	r21
    1ba6:	6f 93       	push	r22
    1ba8:	7f 93       	push	r23
    1baa:	8f 93       	push	r24
    1bac:	9f 93       	push	r25
    1bae:	af 93       	push	r26
    1bb0:	bf 93       	push	r27
    1bb2:	ef 93       	push	r30
    1bb4:	ff 93       	push	r31
    1bb6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <intFunc+0x2>
    1bba:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <intFunc+0x3>
    1bbe:	09 95       	icall
    1bc0:	ff 91       	pop	r31
    1bc2:	ef 91       	pop	r30
    1bc4:	bf 91       	pop	r27
    1bc6:	af 91       	pop	r26
    1bc8:	9f 91       	pop	r25
    1bca:	8f 91       	pop	r24
    1bcc:	7f 91       	pop	r23
    1bce:	6f 91       	pop	r22
    1bd0:	5f 91       	pop	r21
    1bd2:	4f 91       	pop	r20
    1bd4:	3f 91       	pop	r19
    1bd6:	2f 91       	pop	r18
    1bd8:	0f 90       	pop	r0
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	0f 90       	pop	r0
    1bde:	1f 90       	pop	r1
    1be0:	18 95       	reti

00001be2 <__vector_16>:
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1be2:	1f 92       	push	r1
    1be4:	0f 92       	push	r0
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	0f 92       	push	r0
    1bea:	11 24       	eor	r1, r1
    1bec:	2f 93       	push	r18
    1bee:	3f 93       	push	r19
    1bf0:	8f 93       	push	r24
    1bf2:	9f 93       	push	r25
    1bf4:	af 93       	push	r26
    1bf6:	bf 93       	push	r27
    1bf8:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <timer0_millis>
    1bfc:	90 91 16 05 	lds	r25, 0x0516	; 0x800516 <timer0_millis+0x1>
    1c00:	a0 91 17 05 	lds	r26, 0x0517	; 0x800517 <timer0_millis+0x2>
    1c04:	b0 91 18 05 	lds	r27, 0x0518	; 0x800518 <timer0_millis+0x3>
    1c08:	30 91 14 05 	lds	r19, 0x0514	; 0x800514 <timer0_fract>
    1c0c:	23 e0       	ldi	r18, 0x03	; 3
    1c0e:	23 0f       	add	r18, r19
    1c10:	2d 37       	cpi	r18, 0x7D	; 125
    1c12:	20 f4       	brcc	.+8      	; 0x1c1c <__vector_16+0x3a>
    1c14:	01 96       	adiw	r24, 0x01	; 1
    1c16:	a1 1d       	adc	r26, r1
    1c18:	b1 1d       	adc	r27, r1
    1c1a:	05 c0       	rjmp	.+10     	; 0x1c26 <__vector_16+0x44>
    1c1c:	26 e8       	ldi	r18, 0x86	; 134
    1c1e:	23 0f       	add	r18, r19
    1c20:	02 96       	adiw	r24, 0x02	; 2
    1c22:	a1 1d       	adc	r26, r1
    1c24:	b1 1d       	adc	r27, r1
    1c26:	20 93 14 05 	sts	0x0514, r18	; 0x800514 <timer0_fract>
    1c2a:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <timer0_millis>
    1c2e:	90 93 16 05 	sts	0x0516, r25	; 0x800516 <timer0_millis+0x1>
    1c32:	a0 93 17 05 	sts	0x0517, r26	; 0x800517 <timer0_millis+0x2>
    1c36:	b0 93 18 05 	sts	0x0518, r27	; 0x800518 <timer0_millis+0x3>
    1c3a:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <timer0_overflow_count>
    1c3e:	90 91 1a 05 	lds	r25, 0x051A	; 0x80051a <timer0_overflow_count+0x1>
    1c42:	a0 91 1b 05 	lds	r26, 0x051B	; 0x80051b <timer0_overflow_count+0x2>
    1c46:	b0 91 1c 05 	lds	r27, 0x051C	; 0x80051c <timer0_overflow_count+0x3>
    1c4a:	01 96       	adiw	r24, 0x01	; 1
    1c4c:	a1 1d       	adc	r26, r1
    1c4e:	b1 1d       	adc	r27, r1
    1c50:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <timer0_overflow_count>
    1c54:	90 93 1a 05 	sts	0x051A, r25	; 0x80051a <timer0_overflow_count+0x1>
    1c58:	a0 93 1b 05 	sts	0x051B, r26	; 0x80051b <timer0_overflow_count+0x2>
    1c5c:	b0 93 1c 05 	sts	0x051C, r27	; 0x80051c <timer0_overflow_count+0x3>
    1c60:	bf 91       	pop	r27
    1c62:	af 91       	pop	r26
    1c64:	9f 91       	pop	r25
    1c66:	8f 91       	pop	r24
    1c68:	3f 91       	pop	r19
    1c6a:	2f 91       	pop	r18
    1c6c:	0f 90       	pop	r0
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	0f 90       	pop	r0
    1c72:	1f 90       	pop	r1
    1c74:	18 95       	reti

00001c76 <millis>:
    1c76:	2f b7       	in	r18, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	60 91 15 05 	lds	r22, 0x0515	; 0x800515 <timer0_millis>
    1c7e:	70 91 16 05 	lds	r23, 0x0516	; 0x800516 <timer0_millis+0x1>
    1c82:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <timer0_millis+0x2>
    1c86:	90 91 18 05 	lds	r25, 0x0518	; 0x800518 <timer0_millis+0x3>
    1c8a:	2f bf       	out	0x3f, r18	; 63
    1c8c:	08 95       	ret

00001c8e <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1c8e:	82 30       	cpi	r24, 0x02	; 2
    1c90:	91 05       	cpc	r25, r1
    1c92:	38 f0       	brcs	.+14     	; 0x1ca2 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    1c94:	88 0f       	add	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    1c9c:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	f1 f7       	brne	.-4      	; 0x1c9e <delayMicroseconds+0x10>
    1ca2:	08 95       	ret

00001ca4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1ca4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1ca6:	84 b5       	in	r24, 0x24	; 36
    1ca8:	82 60       	ori	r24, 0x02	; 2
    1caa:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1cac:	84 b5       	in	r24, 0x24	; 36
    1cae:	81 60       	ori	r24, 0x01	; 1
    1cb0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1cb2:	85 b5       	in	r24, 0x25	; 37
    1cb4:	82 60       	ori	r24, 0x02	; 2
    1cb6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1cb8:	85 b5       	in	r24, 0x25	; 37
    1cba:	81 60       	ori	r24, 0x01	; 1
    1cbc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1cbe:	ee e6       	ldi	r30, 0x6E	; 110
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	81 60       	ori	r24, 0x01	; 1
    1cc6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1cc8:	e1 e8       	ldi	r30, 0x81	; 129
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1cce:	80 81       	ld	r24, Z
    1cd0:	82 60       	ori	r24, 0x02	; 2
    1cd2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1cd4:	80 81       	ld	r24, Z
    1cd6:	81 60       	ori	r24, 0x01	; 1
    1cd8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1cda:	e0 e8       	ldi	r30, 0x80	; 128
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	81 60       	ori	r24, 0x01	; 1
    1ce2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1ce4:	e1 eb       	ldi	r30, 0xB1	; 177
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	84 60       	ori	r24, 0x04	; 4
    1cec:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1cee:	e0 eb       	ldi	r30, 0xB0	; 176
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	81 60       	ori	r24, 0x01	; 1
    1cf6:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1cf8:	ea e7       	ldi	r30, 0x7A	; 122
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	84 60       	ori	r24, 0x04	; 4
    1d00:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1d02:	80 81       	ld	r24, Z
    1d04:	82 60       	ori	r24, 0x02	; 2
    1d06:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1d08:	80 81       	ld	r24, Z
    1d0a:	81 60       	ori	r24, 0x01	; 1
    1d0c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1d0e:	80 81       	ld	r24, Z
    1d10:	80 68       	ori	r24, 0x80	; 128
    1d12:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1d14:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1d18:	08 95       	ret

00001d1a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1d1a:	83 30       	cpi	r24, 0x03	; 3
    1d1c:	81 f0       	breq	.+32     	; 0x1d3e <turnOffPWM+0x24>
    1d1e:	28 f4       	brcc	.+10     	; 0x1d2a <turnOffPWM+0x10>
    1d20:	81 30       	cpi	r24, 0x01	; 1
    1d22:	99 f0       	breq	.+38     	; 0x1d4a <turnOffPWM+0x30>
    1d24:	82 30       	cpi	r24, 0x02	; 2
    1d26:	a1 f0       	breq	.+40     	; 0x1d50 <turnOffPWM+0x36>
    1d28:	08 95       	ret
    1d2a:	87 30       	cpi	r24, 0x07	; 7
    1d2c:	a9 f0       	breq	.+42     	; 0x1d58 <turnOffPWM+0x3e>
    1d2e:	88 30       	cpi	r24, 0x08	; 8
    1d30:	b9 f0       	breq	.+46     	; 0x1d60 <turnOffPWM+0x46>
    1d32:	84 30       	cpi	r24, 0x04	; 4
    1d34:	d1 f4       	brne	.+52     	; 0x1d6a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1d36:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1d3a:	8f 7d       	andi	r24, 0xDF	; 223
    1d3c:	03 c0       	rjmp	.+6      	; 0x1d44 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1d3e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1d42:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1d44:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1d48:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1d4a:	84 b5       	in	r24, 0x24	; 36
    1d4c:	8f 77       	andi	r24, 0x7F	; 127
    1d4e:	02 c0       	rjmp	.+4      	; 0x1d54 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1d50:	84 b5       	in	r24, 0x24	; 36
    1d52:	8f 7d       	andi	r24, 0xDF	; 223
    1d54:	84 bd       	out	0x24, r24	; 36
    1d56:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1d58:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1d5c:	8f 77       	andi	r24, 0x7F	; 127
    1d5e:	03 c0       	rjmp	.+6      	; 0x1d66 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1d60:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1d64:	8f 7d       	andi	r24, 0xDF	; 223
    1d66:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1d6a:	08 95       	ret

00001d6c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1d6c:	cf 93       	push	r28
    1d6e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	fc 01       	movw	r30, r24
    1d74:	e4 58       	subi	r30, 0x84	; 132
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	e0 57       	subi	r30, 0x70	; 112
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1d82:	88 23       	and	r24, r24
    1d84:	61 f1       	breq	.+88     	; 0x1dde <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	e2 55       	subi	r30, 0x52	; 82
    1d90:	ff 4f       	sbci	r31, 0xFF	; 255
    1d92:	c5 91       	lpm	r28, Z+
    1d94:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1d96:	fc 01       	movw	r30, r24
    1d98:	ec 55       	subi	r30, 0x5C	; 92
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	a5 91       	lpm	r26, Z+
    1d9e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1da0:	61 11       	cpse	r22, r1
    1da2:	09 c0       	rjmp	.+18     	; 0x1db6 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1da4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1da6:	f8 94       	cli
		*reg &= ~bit;
    1da8:	88 81       	ld	r24, Y
    1daa:	20 95       	com	r18
    1dac:	82 23       	and	r24, r18
    1dae:	88 83       	st	Y, r24
		*out &= ~bit;
    1db0:	ec 91       	ld	r30, X
    1db2:	2e 23       	and	r18, r30
    1db4:	0b c0       	rjmp	.+22     	; 0x1dcc <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1db6:	62 30       	cpi	r22, 0x02	; 2
    1db8:	61 f4       	brne	.+24     	; 0x1dd2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1dba:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1dbc:	f8 94       	cli
		*reg &= ~bit;
    1dbe:	88 81       	ld	r24, Y
    1dc0:	32 2f       	mov	r19, r18
    1dc2:	30 95       	com	r19
    1dc4:	83 23       	and	r24, r19
    1dc6:	88 83       	st	Y, r24
		*out |= bit;
    1dc8:	ec 91       	ld	r30, X
    1dca:	2e 2b       	or	r18, r30
    1dcc:	2c 93       	st	X, r18
		SREG = oldSREG;
    1dce:	9f bf       	out	0x3f, r25	; 63
    1dd0:	06 c0       	rjmp	.+12     	; 0x1dde <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1dd2:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1dd4:	f8 94       	cli
		*reg |= bit;
    1dd6:	e8 81       	ld	r30, Y
    1dd8:	2e 2b       	or	r18, r30
    1dda:	28 83       	st	Y, r18
		SREG = oldSREG;
    1ddc:	8f bf       	out	0x3f, r24	; 63
	}
}
    1dde:	df 91       	pop	r29
    1de0:	cf 91       	pop	r28
    1de2:	08 95       	ret

00001de4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1de4:	1f 93       	push	r17
    1de6:	cf 93       	push	r28
    1de8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1dea:	28 2f       	mov	r18, r24
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	f9 01       	movw	r30, r18
    1df0:	e8 59       	subi	r30, 0x98	; 152
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1df6:	f9 01       	movw	r30, r18
    1df8:	e4 58       	subi	r30, 0x84	; 132
    1dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfc:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1dfe:	f9 01       	movw	r30, r18
    1e00:	e0 57       	subi	r30, 0x70	; 112
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1e06:	cc 23       	and	r28, r28
    1e08:	c1 f0       	breq	.+48     	; 0x1e3a <digitalWrite+0x56>
    1e0a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1e0c:	81 11       	cpse	r24, r1
    1e0e:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <turnOffPWM>

	out = portOutputRegister(port);
    1e12:	ec 2f       	mov	r30, r28
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	ee 0f       	add	r30, r30
    1e18:	ff 1f       	adc	r31, r31
    1e1a:	ec 55       	subi	r30, 0x5C	; 92
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	a5 91       	lpm	r26, Z+
    1e20:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1e22:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1e24:	f8 94       	cli

	if (val == LOW) {
    1e26:	11 11       	cpse	r17, r1
    1e28:	04 c0       	rjmp	.+8      	; 0x1e32 <digitalWrite+0x4e>
		*out &= ~bit;
    1e2a:	8c 91       	ld	r24, X
    1e2c:	d0 95       	com	r29
    1e2e:	d8 23       	and	r29, r24
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1e32:	ec 91       	ld	r30, X
    1e34:	de 2b       	or	r29, r30
    1e36:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1e38:	9f bf       	out	0x3f, r25	; 63
}
    1e3a:	df 91       	pop	r29
    1e3c:	cf 91       	pop	r28
    1e3e:	1f 91       	pop	r17
    1e40:	08 95       	ret

00001e42 <__udivmodsi4>:
    1e42:	a1 e2       	ldi	r26, 0x21	; 33
    1e44:	1a 2e       	mov	r1, r26
    1e46:	aa 1b       	sub	r26, r26
    1e48:	bb 1b       	sub	r27, r27
    1e4a:	fd 01       	movw	r30, r26
    1e4c:	0d c0       	rjmp	.+26     	; 0x1e68 <__udivmodsi4_ep>

00001e4e <__udivmodsi4_loop>:
    1e4e:	aa 1f       	adc	r26, r26
    1e50:	bb 1f       	adc	r27, r27
    1e52:	ee 1f       	adc	r30, r30
    1e54:	ff 1f       	adc	r31, r31
    1e56:	a2 17       	cp	r26, r18
    1e58:	b3 07       	cpc	r27, r19
    1e5a:	e4 07       	cpc	r30, r20
    1e5c:	f5 07       	cpc	r31, r21
    1e5e:	20 f0       	brcs	.+8      	; 0x1e68 <__udivmodsi4_ep>
    1e60:	a2 1b       	sub	r26, r18
    1e62:	b3 0b       	sbc	r27, r19
    1e64:	e4 0b       	sbc	r30, r20
    1e66:	f5 0b       	sbc	r31, r21

00001e68 <__udivmodsi4_ep>:
    1e68:	66 1f       	adc	r22, r22
    1e6a:	77 1f       	adc	r23, r23
    1e6c:	88 1f       	adc	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	1a 94       	dec	r1
    1e72:	69 f7       	brne	.-38     	; 0x1e4e <__udivmodsi4_loop>
    1e74:	60 95       	com	r22
    1e76:	70 95       	com	r23
    1e78:	80 95       	com	r24
    1e7a:	90 95       	com	r25
    1e7c:	9b 01       	movw	r18, r22
    1e7e:	ac 01       	movw	r20, r24
    1e80:	bd 01       	movw	r22, r26
    1e82:	cf 01       	movw	r24, r30
    1e84:	08 95       	ret

00001e86 <__tablejump2__>:
    1e86:	ee 0f       	add	r30, r30
    1e88:	ff 1f       	adc	r31, r31
    1e8a:	05 90       	lpm	r0, Z+
    1e8c:	f4 91       	lpm	r31, Z
    1e8e:	e0 2d       	mov	r30, r0
    1e90:	09 94       	ijmp

00001e92 <malloc>:
    1e92:	0f 93       	push	r16
    1e94:	1f 93       	push	r17
    1e96:	cf 93       	push	r28
    1e98:	df 93       	push	r29
    1e9a:	82 30       	cpi	r24, 0x02	; 2
    1e9c:	91 05       	cpc	r25, r1
    1e9e:	10 f4       	brcc	.+4      	; 0x1ea4 <malloc+0x12>
    1ea0:	82 e0       	ldi	r24, 0x02	; 2
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	e0 91 1f 05 	lds	r30, 0x051F	; 0x80051f <__flp>
    1ea8:	f0 91 20 05 	lds	r31, 0x0520	; 0x800520 <__flp+0x1>
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	a0 e0       	ldi	r26, 0x00	; 0
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	30 97       	sbiw	r30, 0x00	; 0
    1eb6:	19 f1       	breq	.+70     	; 0x1efe <malloc+0x6c>
    1eb8:	40 81       	ld	r20, Z
    1eba:	51 81       	ldd	r21, Z+1	; 0x01
    1ebc:	02 81       	ldd	r16, Z+2	; 0x02
    1ebe:	13 81       	ldd	r17, Z+3	; 0x03
    1ec0:	48 17       	cp	r20, r24
    1ec2:	59 07       	cpc	r21, r25
    1ec4:	c8 f0       	brcs	.+50     	; 0x1ef8 <malloc+0x66>
    1ec6:	84 17       	cp	r24, r20
    1ec8:	95 07       	cpc	r25, r21
    1eca:	69 f4       	brne	.+26     	; 0x1ee6 <malloc+0x54>
    1ecc:	10 97       	sbiw	r26, 0x00	; 0
    1ece:	31 f0       	breq	.+12     	; 0x1edc <malloc+0x4a>
    1ed0:	12 96       	adiw	r26, 0x02	; 2
    1ed2:	0c 93       	st	X, r16
    1ed4:	12 97       	sbiw	r26, 0x02	; 2
    1ed6:	13 96       	adiw	r26, 0x03	; 3
    1ed8:	1c 93       	st	X, r17
    1eda:	27 c0       	rjmp	.+78     	; 0x1f2a <malloc+0x98>
    1edc:	00 93 1f 05 	sts	0x051F, r16	; 0x80051f <__flp>
    1ee0:	10 93 20 05 	sts	0x0520, r17	; 0x800520 <__flp+0x1>
    1ee4:	22 c0       	rjmp	.+68     	; 0x1f2a <malloc+0x98>
    1ee6:	21 15       	cp	r18, r1
    1ee8:	31 05       	cpc	r19, r1
    1eea:	19 f0       	breq	.+6      	; 0x1ef2 <malloc+0x60>
    1eec:	42 17       	cp	r20, r18
    1eee:	53 07       	cpc	r21, r19
    1ef0:	18 f4       	brcc	.+6      	; 0x1ef8 <malloc+0x66>
    1ef2:	9a 01       	movw	r18, r20
    1ef4:	bd 01       	movw	r22, r26
    1ef6:	ef 01       	movw	r28, r30
    1ef8:	df 01       	movw	r26, r30
    1efa:	f8 01       	movw	r30, r16
    1efc:	db cf       	rjmp	.-74     	; 0x1eb4 <malloc+0x22>
    1efe:	21 15       	cp	r18, r1
    1f00:	31 05       	cpc	r19, r1
    1f02:	f9 f0       	breq	.+62     	; 0x1f42 <malloc+0xb0>
    1f04:	28 1b       	sub	r18, r24
    1f06:	39 0b       	sbc	r19, r25
    1f08:	24 30       	cpi	r18, 0x04	; 4
    1f0a:	31 05       	cpc	r19, r1
    1f0c:	80 f4       	brcc	.+32     	; 0x1f2e <malloc+0x9c>
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	9b 81       	ldd	r25, Y+3	; 0x03
    1f12:	61 15       	cp	r22, r1
    1f14:	71 05       	cpc	r23, r1
    1f16:	21 f0       	breq	.+8      	; 0x1f20 <malloc+0x8e>
    1f18:	fb 01       	movw	r30, r22
    1f1a:	93 83       	std	Z+3, r25	; 0x03
    1f1c:	82 83       	std	Z+2, r24	; 0x02
    1f1e:	04 c0       	rjmp	.+8      	; 0x1f28 <malloc+0x96>
    1f20:	90 93 20 05 	sts	0x0520, r25	; 0x800520 <__flp+0x1>
    1f24:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <__flp>
    1f28:	fe 01       	movw	r30, r28
    1f2a:	32 96       	adiw	r30, 0x02	; 2
    1f2c:	44 c0       	rjmp	.+136    	; 0x1fb6 <malloc+0x124>
    1f2e:	fe 01       	movw	r30, r28
    1f30:	e2 0f       	add	r30, r18
    1f32:	f3 1f       	adc	r31, r19
    1f34:	81 93       	st	Z+, r24
    1f36:	91 93       	st	Z+, r25
    1f38:	22 50       	subi	r18, 0x02	; 2
    1f3a:	31 09       	sbc	r19, r1
    1f3c:	39 83       	std	Y+1, r19	; 0x01
    1f3e:	28 83       	st	Y, r18
    1f40:	3a c0       	rjmp	.+116    	; 0x1fb6 <malloc+0x124>
    1f42:	20 91 1d 05 	lds	r18, 0x051D	; 0x80051d <__brkval>
    1f46:	30 91 1e 05 	lds	r19, 0x051E	; 0x80051e <__brkval+0x1>
    1f4a:	23 2b       	or	r18, r19
    1f4c:	41 f4       	brne	.+16     	; 0x1f5e <malloc+0xcc>
    1f4e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1f52:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1f56:	30 93 1e 05 	sts	0x051E, r19	; 0x80051e <__brkval+0x1>
    1f5a:	20 93 1d 05 	sts	0x051D, r18	; 0x80051d <__brkval>
    1f5e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1f62:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1f66:	21 15       	cp	r18, r1
    1f68:	31 05       	cpc	r19, r1
    1f6a:	41 f4       	brne	.+16     	; 0x1f7c <malloc+0xea>
    1f6c:	2d b7       	in	r18, 0x3d	; 61
    1f6e:	3e b7       	in	r19, 0x3e	; 62
    1f70:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1f74:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1f78:	24 1b       	sub	r18, r20
    1f7a:	35 0b       	sbc	r19, r21
    1f7c:	e0 91 1d 05 	lds	r30, 0x051D	; 0x80051d <__brkval>
    1f80:	f0 91 1e 05 	lds	r31, 0x051E	; 0x80051e <__brkval+0x1>
    1f84:	e2 17       	cp	r30, r18
    1f86:	f3 07       	cpc	r31, r19
    1f88:	a0 f4       	brcc	.+40     	; 0x1fb2 <malloc+0x120>
    1f8a:	2e 1b       	sub	r18, r30
    1f8c:	3f 0b       	sbc	r19, r31
    1f8e:	28 17       	cp	r18, r24
    1f90:	39 07       	cpc	r19, r25
    1f92:	78 f0       	brcs	.+30     	; 0x1fb2 <malloc+0x120>
    1f94:	ac 01       	movw	r20, r24
    1f96:	4e 5f       	subi	r20, 0xFE	; 254
    1f98:	5f 4f       	sbci	r21, 0xFF	; 255
    1f9a:	24 17       	cp	r18, r20
    1f9c:	35 07       	cpc	r19, r21
    1f9e:	48 f0       	brcs	.+18     	; 0x1fb2 <malloc+0x120>
    1fa0:	4e 0f       	add	r20, r30
    1fa2:	5f 1f       	adc	r21, r31
    1fa4:	50 93 1e 05 	sts	0x051E, r21	; 0x80051e <__brkval+0x1>
    1fa8:	40 93 1d 05 	sts	0x051D, r20	; 0x80051d <__brkval>
    1fac:	81 93       	st	Z+, r24
    1fae:	91 93       	st	Z+, r25
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <malloc+0x124>
    1fb2:	e0 e0       	ldi	r30, 0x00	; 0
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	cf 01       	movw	r24, r30
    1fb8:	df 91       	pop	r29
    1fba:	cf 91       	pop	r28
    1fbc:	1f 91       	pop	r17
    1fbe:	0f 91       	pop	r16
    1fc0:	08 95       	ret

00001fc2 <free>:
    1fc2:	cf 93       	push	r28
    1fc4:	df 93       	push	r29
    1fc6:	00 97       	sbiw	r24, 0x00	; 0
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <free+0xa>
    1fca:	81 c0       	rjmp	.+258    	; 0x20ce <free+0x10c>
    1fcc:	fc 01       	movw	r30, r24
    1fce:	32 97       	sbiw	r30, 0x02	; 2
    1fd0:	13 82       	std	Z+3, r1	; 0x03
    1fd2:	12 82       	std	Z+2, r1	; 0x02
    1fd4:	a0 91 1f 05 	lds	r26, 0x051F	; 0x80051f <__flp>
    1fd8:	b0 91 20 05 	lds	r27, 0x0520	; 0x800520 <__flp+0x1>
    1fdc:	10 97       	sbiw	r26, 0x00	; 0
    1fde:	81 f4       	brne	.+32     	; 0x2000 <free+0x3e>
    1fe0:	20 81       	ld	r18, Z
    1fe2:	31 81       	ldd	r19, Z+1	; 0x01
    1fe4:	82 0f       	add	r24, r18
    1fe6:	93 1f       	adc	r25, r19
    1fe8:	20 91 1d 05 	lds	r18, 0x051D	; 0x80051d <__brkval>
    1fec:	30 91 1e 05 	lds	r19, 0x051E	; 0x80051e <__brkval+0x1>
    1ff0:	28 17       	cp	r18, r24
    1ff2:	39 07       	cpc	r19, r25
    1ff4:	51 f5       	brne	.+84     	; 0x204a <free+0x88>
    1ff6:	f0 93 1e 05 	sts	0x051E, r31	; 0x80051e <__brkval+0x1>
    1ffa:	e0 93 1d 05 	sts	0x051D, r30	; 0x80051d <__brkval>
    1ffe:	67 c0       	rjmp	.+206    	; 0x20ce <free+0x10c>
    2000:	ed 01       	movw	r28, r26
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	ce 17       	cp	r28, r30
    2008:	df 07       	cpc	r29, r31
    200a:	40 f4       	brcc	.+16     	; 0x201c <free+0x5a>
    200c:	4a 81       	ldd	r20, Y+2	; 0x02
    200e:	5b 81       	ldd	r21, Y+3	; 0x03
    2010:	9e 01       	movw	r18, r28
    2012:	41 15       	cp	r20, r1
    2014:	51 05       	cpc	r21, r1
    2016:	f1 f0       	breq	.+60     	; 0x2054 <free+0x92>
    2018:	ea 01       	movw	r28, r20
    201a:	f5 cf       	rjmp	.-22     	; 0x2006 <free+0x44>
    201c:	d3 83       	std	Z+3, r29	; 0x03
    201e:	c2 83       	std	Z+2, r28	; 0x02
    2020:	40 81       	ld	r20, Z
    2022:	51 81       	ldd	r21, Z+1	; 0x01
    2024:	84 0f       	add	r24, r20
    2026:	95 1f       	adc	r25, r21
    2028:	c8 17       	cp	r28, r24
    202a:	d9 07       	cpc	r29, r25
    202c:	59 f4       	brne	.+22     	; 0x2044 <free+0x82>
    202e:	88 81       	ld	r24, Y
    2030:	99 81       	ldd	r25, Y+1	; 0x01
    2032:	84 0f       	add	r24, r20
    2034:	95 1f       	adc	r25, r21
    2036:	02 96       	adiw	r24, 0x02	; 2
    2038:	91 83       	std	Z+1, r25	; 0x01
    203a:	80 83       	st	Z, r24
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	9b 81       	ldd	r25, Y+3	; 0x03
    2040:	93 83       	std	Z+3, r25	; 0x03
    2042:	82 83       	std	Z+2, r24	; 0x02
    2044:	21 15       	cp	r18, r1
    2046:	31 05       	cpc	r19, r1
    2048:	29 f4       	brne	.+10     	; 0x2054 <free+0x92>
    204a:	f0 93 20 05 	sts	0x0520, r31	; 0x800520 <__flp+0x1>
    204e:	e0 93 1f 05 	sts	0x051F, r30	; 0x80051f <__flp>
    2052:	3d c0       	rjmp	.+122    	; 0x20ce <free+0x10c>
    2054:	e9 01       	movw	r28, r18
    2056:	fb 83       	std	Y+3, r31	; 0x03
    2058:	ea 83       	std	Y+2, r30	; 0x02
    205a:	49 91       	ld	r20, Y+
    205c:	59 91       	ld	r21, Y+
    205e:	c4 0f       	add	r28, r20
    2060:	d5 1f       	adc	r29, r21
    2062:	ec 17       	cp	r30, r28
    2064:	fd 07       	cpc	r31, r29
    2066:	61 f4       	brne	.+24     	; 0x2080 <free+0xbe>
    2068:	80 81       	ld	r24, Z
    206a:	91 81       	ldd	r25, Z+1	; 0x01
    206c:	84 0f       	add	r24, r20
    206e:	95 1f       	adc	r25, r21
    2070:	02 96       	adiw	r24, 0x02	; 2
    2072:	e9 01       	movw	r28, r18
    2074:	99 83       	std	Y+1, r25	; 0x01
    2076:	88 83       	st	Y, r24
    2078:	82 81       	ldd	r24, Z+2	; 0x02
    207a:	93 81       	ldd	r25, Z+3	; 0x03
    207c:	9b 83       	std	Y+3, r25	; 0x03
    207e:	8a 83       	std	Y+2, r24	; 0x02
    2080:	e0 e0       	ldi	r30, 0x00	; 0
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	12 96       	adiw	r26, 0x02	; 2
    2086:	8d 91       	ld	r24, X+
    2088:	9c 91       	ld	r25, X
    208a:	13 97       	sbiw	r26, 0x03	; 3
    208c:	00 97       	sbiw	r24, 0x00	; 0
    208e:	19 f0       	breq	.+6      	; 0x2096 <free+0xd4>
    2090:	fd 01       	movw	r30, r26
    2092:	dc 01       	movw	r26, r24
    2094:	f7 cf       	rjmp	.-18     	; 0x2084 <free+0xc2>
    2096:	8d 91       	ld	r24, X+
    2098:	9c 91       	ld	r25, X
    209a:	11 97       	sbiw	r26, 0x01	; 1
    209c:	9d 01       	movw	r18, r26
    209e:	2e 5f       	subi	r18, 0xFE	; 254
    20a0:	3f 4f       	sbci	r19, 0xFF	; 255
    20a2:	82 0f       	add	r24, r18
    20a4:	93 1f       	adc	r25, r19
    20a6:	20 91 1d 05 	lds	r18, 0x051D	; 0x80051d <__brkval>
    20aa:	30 91 1e 05 	lds	r19, 0x051E	; 0x80051e <__brkval+0x1>
    20ae:	28 17       	cp	r18, r24
    20b0:	39 07       	cpc	r19, r25
    20b2:	69 f4       	brne	.+26     	; 0x20ce <free+0x10c>
    20b4:	30 97       	sbiw	r30, 0x00	; 0
    20b6:	29 f4       	brne	.+10     	; 0x20c2 <free+0x100>
    20b8:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <__flp+0x1>
    20bc:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <__flp>
    20c0:	02 c0       	rjmp	.+4      	; 0x20c6 <free+0x104>
    20c2:	13 82       	std	Z+3, r1	; 0x03
    20c4:	12 82       	std	Z+2, r1	; 0x02
    20c6:	b0 93 1e 05 	sts	0x051E, r27	; 0x80051e <__brkval+0x1>
    20ca:	a0 93 1d 05 	sts	0x051D, r26	; 0x80051d <__brkval>
    20ce:	df 91       	pop	r29
    20d0:	cf 91       	pop	r28
    20d2:	08 95       	ret

000020d4 <memcpy>:
    20d4:	fb 01       	movw	r30, r22
    20d6:	dc 01       	movw	r26, r24
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <memcpy+0xa>
    20da:	01 90       	ld	r0, Z+
    20dc:	0d 92       	st	X+, r0
    20de:	41 50       	subi	r20, 0x01	; 1
    20e0:	50 40       	sbci	r21, 0x00	; 0
    20e2:	d8 f7       	brcc	.-10     	; 0x20da <memcpy+0x6>
    20e4:	08 95       	ret

000020e6 <__do_global_dtors>:
    20e6:	10 e0       	ldi	r17, 0x00	; 0
    20e8:	ce e5       	ldi	r28, 0x5E	; 94
    20ea:	d0 e0       	ldi	r29, 0x00	; 0
    20ec:	04 c0       	rjmp	.+8      	; 0x20f6 <__do_global_dtors+0x10>
    20ee:	fe 01       	movw	r30, r28
    20f0:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__tablejump2__>
    20f4:	21 96       	adiw	r28, 0x01	; 1
    20f6:	cf 35       	cpi	r28, 0x5F	; 95
    20f8:	d1 07       	cpc	r29, r17
    20fa:	c9 f7       	brne	.-14     	; 0x20ee <__do_global_dtors+0x8>
    20fc:	f8 94       	cli

000020fe <__stop_program>:
    20fe:	ff cf       	rjmp	.-2      	; 0x20fe <__stop_program>
